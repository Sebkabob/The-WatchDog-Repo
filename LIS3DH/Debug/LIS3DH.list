
LIS3DH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080017bc  080017bc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080017bc  080017bc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080017bc  080017bc  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017bc  080017bc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017bc  080017bc  000027bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017c0  080017c0  000027c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080017c4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080017d0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080017d0  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000499b  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f11  00000000  00000000  000079cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  000088e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044d  00000000  00000000  00008e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df8b  00000000  00000000  000092d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007807  00000000  00000000  00017260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054556  00000000  00000000  0001ea67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00072fbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a0  00000000  00000000  00073000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000743a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017a4 	.word	0x080017a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080017a4 	.word	0x080017a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
void LIS3DH_Read_Accel(int16_t* x, int16_t* y, int16_t* z);
uint8_t LIS3DH_Read_Register(uint8_t reg);
void LIS3DH_Write_Register(uint8_t reg, uint8_t value);

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  // Initialization
  HAL_Init();
 8000226:	f000 f9c3 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 800022a:	f000 f8fd 	bl	8000428 <SystemClock_Config>
  MX_GPIO_Init();
 800022e:	f000 f8c9 	bl	80003c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f8a1 	bl	8000378 <MX_I2C1_Init>

  // Initialize LIS3DH
  LIS3DH_Init();
 8000236:	f000 f83b 	bl	80002b0 <LIS3DH_Init>
  int16_t x, y, z;

  while (1)
  {
    // Read accelerometer data
    LIS3DH_Read_Accel(&x, &y, &z);
 800023a:	1cba      	adds	r2, r7, #2
 800023c:	1d39      	adds	r1, r7, #4
 800023e:	1dbb      	adds	r3, r7, #6
 8000240:	0018      	movs	r0, r3
 8000242:	f000 f83f 	bl	80002c4 <LIS3DH_Read_Accel>

    // Simple movement detection based on threshold
    if (abs(x) > 1000 || abs(y) > 1000 || abs(z) > 1000)
 8000246:	1dbb      	adds	r3, r7, #6
 8000248:	2200      	movs	r2, #0
 800024a:	5e9b      	ldrsh	r3, [r3, r2]
 800024c:	17da      	asrs	r2, r3, #31
 800024e:	189b      	adds	r3, r3, r2
 8000250:	4053      	eors	r3, r2
 8000252:	b29a      	uxth	r2, r3
 8000254:	23fa      	movs	r3, #250	@ 0xfa
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	429a      	cmp	r2, r3
 800025a:	d815      	bhi.n	8000288 <main+0x68>
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	5e9b      	ldrsh	r3, [r3, r2]
 8000262:	17da      	asrs	r2, r3, #31
 8000264:	189b      	adds	r3, r3, r2
 8000266:	4053      	eors	r3, r2
 8000268:	b29a      	uxth	r2, r3
 800026a:	23fa      	movs	r3, #250	@ 0xfa
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	429a      	cmp	r2, r3
 8000270:	d80a      	bhi.n	8000288 <main+0x68>
 8000272:	1cbb      	adds	r3, r7, #2
 8000274:	2200      	movs	r2, #0
 8000276:	5e9b      	ldrsh	r3, [r3, r2]
 8000278:	17da      	asrs	r2, r3, #31
 800027a:	189b      	adds	r3, r3, r2
 800027c:	4053      	eors	r3, r2
 800027e:	b29a      	uxth	r2, r3
 8000280:	23fa      	movs	r3, #250	@ 0xfa
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	429a      	cmp	r2, r3
 8000286:	d906      	bls.n	8000296 <main+0x76>
    {
      // Turn on LED
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <main+0x8c>)
 800028a:	2201      	movs	r2, #1
 800028c:	2101      	movs	r1, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fc3a 	bl	8000b08 <HAL_GPIO_WritePin>
 8000294:	e005      	b.n	80002a2 <main+0x82>
    }
    else
    {
      // Turn off LED
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000296:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <main+0x8c>)
 8000298:	2200      	movs	r2, #0
 800029a:	2101      	movs	r1, #1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fc33 	bl	8000b08 <HAL_GPIO_WritePin>
    }

    // Small delay
    HAL_Delay(100);
 80002a2:	2064      	movs	r0, #100	@ 0x64
 80002a4:	f000 f9e8 	bl	8000678 <HAL_Delay>
    LIS3DH_Read_Accel(&x, &y, &z);
 80002a8:	e7c7      	b.n	800023a <main+0x1a>
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	48000400 	.word	0x48000400

080002b0 <LIS3DH_Init>:
  }
}

void LIS3DH_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  // Write to CTRL_REG1 to enable the accelerometer
  LIS3DH_Write_Register(LIS3DH_REG_CTRL1, 0x47);
 80002b4:	2147      	movs	r1, #71	@ 0x47
 80002b6:	2020      	movs	r0, #32
 80002b8:	f000 f840 	bl	800033c <LIS3DH_Write_Register>
}
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <LIS3DH_Read_Accel>:

void LIS3DH_Read_Accel(int16_t* x, int16_t* y, int16_t* z)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b08b      	sub	sp, #44	@ 0x2c
 80002c8:	af04      	add	r7, sp, #16
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
  uint8_t buffer[6];

  // Read 6 bytes from the accelerometer starting from OUT_X_L
  HAL_I2C_Mem_Read(&hi2c1, LIS3DH_ADDR, LIS3DH_REG_OUT_X_L | 0x80, 1, buffer, 6, HAL_MAX_DELAY);
 80002d0:	4819      	ldr	r0, [pc, #100]	@ (8000338 <LIS3DH_Read_Accel+0x74>)
 80002d2:	2301      	movs	r3, #1
 80002d4:	425b      	negs	r3, r3
 80002d6:	9302      	str	r3, [sp, #8]
 80002d8:	2306      	movs	r3, #6
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2410      	movs	r4, #16
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	2301      	movs	r3, #1
 80002e4:	22a8      	movs	r2, #168	@ 0xa8
 80002e6:	2132      	movs	r1, #50	@ 0x32
 80002e8:	f000 fe00 	bl	8000eec <HAL_I2C_Mem_Read>

  // Combine high and low bytes
  *x = (int16_t)(buffer[1] << 8 | buffer[0]);
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	b21a      	sxth	r2, r3
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b21b      	sxth	r3, r3
 80002fc:	4313      	orrs	r3, r2
 80002fe:	b21a      	sxth	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	801a      	strh	r2, [r3, #0]
  *y = (int16_t)(buffer[3] << 8 | buffer[2]);
 8000304:	187b      	adds	r3, r7, r1
 8000306:	78db      	ldrb	r3, [r3, #3]
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	b21a      	sxth	r2, r3
 800030c:	187b      	adds	r3, r7, r1
 800030e:	789b      	ldrb	r3, [r3, #2]
 8000310:	b21b      	sxth	r3, r3
 8000312:	4313      	orrs	r3, r2
 8000314:	b21a      	sxth	r2, r3
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	801a      	strh	r2, [r3, #0]
  *z = (int16_t)(buffer[5] << 8 | buffer[4]);
 800031a:	187b      	adds	r3, r7, r1
 800031c:	795b      	ldrb	r3, [r3, #5]
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	b21a      	sxth	r2, r3
 8000322:	187b      	adds	r3, r7, r1
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	b21b      	sxth	r3, r3
 8000328:	4313      	orrs	r3, r2
 800032a:	b21a      	sxth	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	801a      	strh	r2, [r3, #0]
}
 8000330:	46c0      	nop			@ (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b007      	add	sp, #28
 8000336:	bd90      	pop	{r4, r7, pc}
 8000338:	20000028 	.word	0x20000028

0800033c <LIS3DH_Write_Register>:
  HAL_I2C_Mem_Read(&hi2c1, LIS3DH_ADDR, reg, 1, &value, 1, HAL_MAX_DELAY);
  return value;
}

void LIS3DH_Write_Register(uint8_t reg, uint8_t value)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af04      	add	r7, sp, #16
 8000342:	0002      	movs	r2, r0
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	1dbb      	adds	r3, r7, #6
 800034a:	1c0a      	adds	r2, r1, #0
 800034c:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, LIS3DH_ADDR, reg, 1, &value, 1, HAL_MAX_DELAY);
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b29a      	uxth	r2, r3
 8000354:	4807      	ldr	r0, [pc, #28]	@ (8000374 <LIS3DH_Write_Register+0x38>)
 8000356:	2301      	movs	r3, #1
 8000358:	425b      	negs	r3, r3
 800035a:	9302      	str	r3, [sp, #8]
 800035c:	2301      	movs	r3, #1
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	1dbb      	adds	r3, r7, #6
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2301      	movs	r3, #1
 8000366:	2132      	movs	r1, #50	@ 0x32
 8000368:	f000 fc92 	bl	8000c90 <HAL_I2C_Mem_Write>
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b002      	add	sp, #8
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028

08000378 <MX_I2C1_Init>:

// I2C1 initialization function
static void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <MX_I2C1_Init+0x44>)
 800037e:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <MX_I2C1_Init+0x48>)
 8000380:	601a      	str	r2, [r3, #0]
  //hi2c1.Init.ClockSpeed = 100000;
  //hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <MX_I2C1_Init+0x44>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <MX_I2C1_Init+0x44>)
 800038a:	2201      	movs	r2, #1
 800038c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <MX_I2C1_Init+0x44>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <MX_I2C1_Init+0x44>)
 8000396:	2200      	movs	r2, #0
 8000398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <MX_I2C1_Init+0x44>)
 800039c:	2200      	movs	r2, #0
 800039e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <MX_I2C1_Init+0x44>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <MX_I2C1_Init+0x44>)
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fbcb 	bl	8000b44 <HAL_I2C_Init>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
 80003b2:	f000 f83e 	bl	8000432 <Error_Handler>
  }
}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40005400 	.word	0x40005400

080003c4 <MX_GPIO_Init>:

// GPIO initialization function
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	2314      	movs	r3, #20
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f001 f9ba 	bl	800174c <memset>

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003de:	2180      	movs	r1, #128	@ 0x80
 80003e0:	02c9      	lsls	r1, r1, #11
 80003e2:	430a      	orrs	r2, r1
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_GPIO_Init+0x5c>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	2380      	movs	r3, #128	@ 0x80
 80003ec:	02db      	lsls	r3, r3, #11
 80003ee:	4013      	ands	r3, r2
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

  // Configure LED GPIO pin
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2201      	movs	r2, #1
 80003f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4a05      	ldr	r2, [pc, #20]	@ (8000424 <MX_GPIO_Init+0x60>)
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f000 fa08 	bl	8000828 <HAL_GPIO_Init>
}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b006      	add	sp, #24
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	48000400 	.word	0x48000400

08000428 <SystemClock_Config>:

// System Clock Configuration
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  // Configuration code generated by STM32CubeMX
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <Error_Handler>:

// Error Handler
void Error_Handler(void)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	af00      	add	r7, sp, #0
  while (1)
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7fd      	b.n	8000436 <Error_Handler+0x4>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	699a      	ldr	r2, [r3, #24]
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	619a      	str	r2, [r3, #24]
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	69da      	ldr	r2, [r3, #28]
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0549      	lsls	r1, r1, #21
 8000464:	430a      	orrs	r2, r1
 8000466:	61da      	str	r2, [r3, #28]
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <HAL_MspInit+0x44>)
 800046a:	69da      	ldr	r2, [r3, #28]
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	055b      	lsls	r3, r3, #21
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08b      	sub	sp, #44	@ 0x2c
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	2414      	movs	r4, #20
 800048e:	193b      	adds	r3, r7, r4
 8000490:	0018      	movs	r0, r3
 8000492:	2314      	movs	r3, #20
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f001 f958 	bl	800174c <memset>
  if(hi2c->Instance==I2C1)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000518 <HAL_I2C_MspInit+0x94>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d133      	bne.n	800050e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <HAL_I2C_MspInit+0x98>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <HAL_I2C_MspInit+0x98>)
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <HAL_I2C_MspInit+0x98>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	22c0      	movs	r2, #192	@ 0xc0
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ca:	0021      	movs	r1, r4
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2212      	movs	r2, #18
 80004d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2203      	movs	r2, #3
 80004dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2204      	movs	r2, #4
 80004e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	187a      	adds	r2, r7, r1
 80004e6:	2390      	movs	r3, #144	@ 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f99b 	bl	8000828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_I2C_MspInit+0x98>)
 80004f4:	69da      	ldr	r2, [r3, #28]
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <HAL_I2C_MspInit+0x98>)
 80004f8:	2180      	movs	r1, #128	@ 0x80
 80004fa:	0389      	lsls	r1, r1, #14
 80004fc:	430a      	orrs	r2, r1
 80004fe:	61da      	str	r2, [r3, #28]
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <HAL_I2C_MspInit+0x98>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	039b      	lsls	r3, r3, #14
 8000508:	4013      	ands	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b00b      	add	sp, #44	@ 0x2c
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	40005400 	.word	0x40005400
 800051c:	40021000 	.word	0x40021000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <NMI_Handler+0x4>

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000548:	f000 f87a 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f7ff fff7 	bl	8000552 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058a:	f001 f8e7 	bl	800175c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fe47 	bl	8000220 <main>

08000592 <LoopForever>:

LoopForever:
    b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	080017c4 	.word	0x080017c4
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	20000080 	.word	0x20000080

080005ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_IRQHandler>
	...

080005b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <HAL_Init+0x24>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_Init+0x24>)
 80005ba:	2110      	movs	r1, #16
 80005bc:	430a      	orrs	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 f809 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c6:	f7ff ff39 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_InitTick+0x5c>)
 80005e2:	681c      	ldr	r4, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <HAL_InitTick+0x60>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	0019      	movs	r1, r3
 80005ea:	23fa      	movs	r3, #250	@ 0xfa
 80005ec:	0098      	lsls	r0, r3, #2
 80005ee:	f7ff fd8b 	bl	8000108 <__udivsi3>
 80005f2:	0003      	movs	r3, r0
 80005f4:	0019      	movs	r1, r3
 80005f6:	0020      	movs	r0, r4
 80005f8:	f7ff fd86 	bl	8000108 <__udivsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f905 	bl	800080e <HAL_SYSTICK_Config>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	e00f      	b.n	800062c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d80b      	bhi.n	800062a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	425b      	negs	r3, r3
 8000618:	2200      	movs	r2, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f8e2 	bl	80007e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_InitTick+0x64>)
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	001a      	movs	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	18d2      	adds	r2, r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_IncTick+0x20>)
 8000652:	601a      	str	r2, [r3, #0]
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	20000008 	.word	0x20000008
 8000660:	2000007c 	.word	0x2000007c

08000664 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	@ (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	2000007c 	.word	0x2000007c

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff fff0 	bl	8000664 <HAL_GetTick>
 8000684:	0003      	movs	r3, r0
 8000686:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	189b      	adds	r3, r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	f7ff ffe0 	bl	8000664 <HAL_GetTick>
 80006a4:	0002      	movs	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b004      	add	sp, #16
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000008 	.word	0x20000008

080006c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0002      	movs	r2, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80006d4:	d828      	bhi.n	8000728 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <__NVIC_SetPriority+0xd4>)
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	33c0      	adds	r3, #192	@ 0xc0
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	589b      	ldr	r3, [r3, r2]
 80006e6:	1dfa      	adds	r2, r7, #7
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	0011      	movs	r1, r2
 80006ec:	2203      	movs	r2, #3
 80006ee:	400a      	ands	r2, r1
 80006f0:	00d2      	lsls	r2, r2, #3
 80006f2:	21ff      	movs	r1, #255	@ 0xff
 80006f4:	4091      	lsls	r1, r2
 80006f6:	000a      	movs	r2, r1
 80006f8:	43d2      	mvns	r2, r2
 80006fa:	401a      	ands	r2, r3
 80006fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	019b      	lsls	r3, r3, #6
 8000702:	22ff      	movs	r2, #255	@ 0xff
 8000704:	401a      	ands	r2, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	0018      	movs	r0, r3
 800070c:	2303      	movs	r3, #3
 800070e:	4003      	ands	r3, r0
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000714:	481f      	ldr	r0, [pc, #124]	@ (8000794 <__NVIC_SetPriority+0xd4>)
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	089b      	lsrs	r3, r3, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	33c0      	adds	r3, #192	@ 0xc0
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000726:	e031      	b.n	800078c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <__NVIC_SetPriority+0xd8>)
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	0019      	movs	r1, r3
 8000730:	230f      	movs	r3, #15
 8000732:	400b      	ands	r3, r1
 8000734:	3b08      	subs	r3, #8
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	3306      	adds	r3, #6
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	0011      	movs	r1, r2
 8000748:	2203      	movs	r2, #3
 800074a:	400a      	ands	r2, r1
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	21ff      	movs	r1, #255	@ 0xff
 8000750:	4091      	lsls	r1, r2
 8000752:	000a      	movs	r2, r1
 8000754:	43d2      	mvns	r2, r2
 8000756:	401a      	ands	r2, r3
 8000758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	22ff      	movs	r2, #255	@ 0xff
 8000760:	401a      	ands	r2, r3
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0018      	movs	r0, r3
 8000768:	2303      	movs	r3, #3
 800076a:	4003      	ands	r3, r0
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000770:	4809      	ldr	r0, [pc, #36]	@ (8000798 <__NVIC_SetPriority+0xd8>)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	001c      	movs	r4, r3
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	3b08      	subs	r3, #8
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	430a      	orrs	r2, r1
 8000782:	3306      	adds	r3, #6
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	18c3      	adds	r3, r0, r3
 8000788:	3304      	adds	r3, #4
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b003      	add	sp, #12
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	045b      	lsls	r3, r3, #17
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d301      	bcc.n	80007b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b0:	2301      	movs	r3, #1
 80007b2:	e010      	b.n	80007d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <SysTick_Config+0x44>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	3a01      	subs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007bc:	2301      	movs	r3, #1
 80007be:	425b      	negs	r3, r3
 80007c0:	2103      	movs	r1, #3
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff ff7c 	bl	80006c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <SysTick_Config+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <SysTick_Config+0x44>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	210f      	movs	r1, #15
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	1c02      	adds	r2, r0, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff5d 	bl	80006c0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ffbf 	bl	800079c <SysTick_Config>
 800081e:	0003      	movs	r3, r0
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e14f      	b.n	8000ad8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <HAL_GPIO_Init+0x28>
 800084e:	e140      	b.n	8000ad2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2203      	movs	r2, #3
 8000856:	4013      	ands	r3, r2
 8000858:	2b01      	cmp	r3, #1
 800085a:	d005      	beq.n	8000868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2203      	movs	r2, #3
 8000862:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000864:	2b02      	cmp	r3, #2
 8000866:	d130      	bne.n	80008ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	409a      	lsls	r2, r3
 8000876:	0013      	movs	r3, r2
 8000878:	43da      	mvns	r2, r3
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	409a      	lsls	r2, r3
 800088a:	0013      	movs	r3, r2
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089e:	2201      	movs	r2, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	43da      	mvns	r2, r3
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	091b      	lsrs	r3, r3, #4
 80008b4:	2201      	movs	r2, #1
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2203      	movs	r2, #3
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d017      	beq.n	8000906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	409a      	lsls	r2, r3
 80008e4:	0013      	movs	r3, r2
 80008e6:	43da      	mvns	r2, r3
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2203      	movs	r2, #3
 800090c:	4013      	ands	r3, r2
 800090e:	2b02      	cmp	r3, #2
 8000910:	d123      	bne.n	800095a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	58d3      	ldr	r3, [r2, r3]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2207      	movs	r2, #7
 8000924:	4013      	ands	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2107      	movs	r1, #7
 800093e:	400b      	ands	r3, r1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	6939      	ldr	r1, [r7, #16]
 8000958:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2203      	movs	r2, #3
 8000978:	401a      	ands	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	029b      	lsls	r3, r3, #10
 8000996:	4013      	ands	r3, r2
 8000998:	d100      	bne.n	800099c <HAL_GPIO_Init+0x174>
 800099a:	e09a      	b.n	8000ad2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b54      	ldr	r3, [pc, #336]	@ (8000af0 <HAL_GPIO_Init+0x2c8>)
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	4b53      	ldr	r3, [pc, #332]	@ (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	430a      	orrs	r2, r1
 80009a6:	619a      	str	r2, [r3, #24]
 80009a8:	4b51      	ldr	r3, [pc, #324]	@ (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2201      	movs	r2, #1
 80009ae:	4013      	ands	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b4:	4a4f      	ldr	r2, [pc, #316]	@ (8000af4 <HAL_GPIO_Init+0x2cc>)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	589b      	ldr	r3, [r3, r2]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2203      	movs	r2, #3
 80009c6:	4013      	ands	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	43da      	mvns	r2, r3
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	2390      	movs	r3, #144	@ 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	429a      	cmp	r2, r3
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x1e2>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a44      	ldr	r2, [pc, #272]	@ (8000af8 <HAL_GPIO_Init+0x2d0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x1de>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <HAL_GPIO_Init+0x2d4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x1da>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a42      	ldr	r2, [pc, #264]	@ (8000b00 <HAL_GPIO_Init+0x2d8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x1d6>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x1e4>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e004      	b.n	8000a0c <HAL_GPIO_Init+0x1e4>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e002      	b.n	8000a0c <HAL_GPIO_Init+0x1e4>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x1e4>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	2103      	movs	r1, #3
 8000a10:	400a      	ands	r2, r1
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4093      	lsls	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a1c:	4935      	ldr	r1, [pc, #212]	@ (8000af4 <HAL_GPIO_Init+0x2cc>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2a:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	035b      	lsls	r3, r3, #13
 8000a42:	4013      	ands	r3, r2
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43da      	mvns	r2, r3
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	039b      	lsls	r3, r3, #14
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	2380      	movs	r3, #128	@ 0x80
 8000a94:	029b      	lsls	r3, r3, #10
 8000a96:	4013      	ands	r3, r2
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_GPIO_Init+0x2dc>)
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	40da      	lsrs	r2, r3
 8000ae0:	1e13      	subs	r3, r2, #0
 8000ae2:	d000      	beq.n	8000ae6 <HAL_GPIO_Init+0x2be>
 8000ae4:	e6a8      	b.n	8000838 <HAL_GPIO_Init+0x10>
  } 
}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b006      	add	sp, #24
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000800 	.word	0x48000800
 8000b00:	48000c00 	.word	0x48000c00
 8000b04:	40010400 	.word	0x40010400

08000b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	0008      	movs	r0, r1
 8000b12:	0011      	movs	r1, r2
 8000b14:	1cbb      	adds	r3, r7, #2
 8000b16:	1c02      	adds	r2, r0, #0
 8000b18:	801a      	strh	r2, [r3, #0]
 8000b1a:	1c7b      	adds	r3, r7, #1
 8000b1c:	1c0a      	adds	r2, r1, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b20:	1c7b      	adds	r3, r7, #1
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d004      	beq.n	8000b32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b28:	1cbb      	adds	r3, r7, #2
 8000b2a:	881a      	ldrh	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b30:	e003      	b.n	8000b3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b32:	1cbb      	adds	r3, r7, #2
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e08f      	b.n	8000c76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2241      	movs	r2, #65	@ 0x41
 8000b5a:	5c9b      	ldrb	r3, [r3, r2]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d107      	bne.n	8000b72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2240      	movs	r2, #64	@ 0x40
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fc89 	bl	8000484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2241      	movs	r2, #65	@ 0x41
 8000b76:	2124      	movs	r1, #36	@ 0x24
 8000b78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	438a      	bics	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	493b      	ldr	r1, [pc, #236]	@ (8000c80 <HAL_I2C_Init+0x13c>)
 8000b94:	400a      	ands	r2, r1
 8000b96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4938      	ldr	r1, [pc, #224]	@ (8000c84 <HAL_I2C_Init+0x140>)
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0209      	lsls	r1, r1, #8
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	e007      	b.n	8000bd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2184      	movs	r1, #132	@ 0x84
 8000bcc:	0209      	lsls	r1, r1, #8
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d109      	bne.n	8000bee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	0109      	lsls	r1, r1, #4
 8000be8:	430a      	orrs	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	e007      	b.n	8000bfe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4923      	ldr	r1, [pc, #140]	@ (8000c88 <HAL_I2C_Init+0x144>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4920      	ldr	r1, [pc, #128]	@ (8000c8c <HAL_I2C_Init+0x148>)
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	491a      	ldr	r1, [pc, #104]	@ (8000c84 <HAL_I2C_Init+0x140>)
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691a      	ldr	r2, [r3, #16]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69d9      	ldr	r1, [r3, #28]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2241      	movs	r2, #65	@ 0x41
 8000c62:	2120      	movs	r1, #32
 8000c64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2242      	movs	r2, #66	@ 0x42
 8000c70:	2100      	movs	r1, #0
 8000c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	f0ffffff 	.word	0xf0ffffff
 8000c84:	ffff7fff 	.word	0xffff7fff
 8000c88:	fffff7ff 	.word	0xfffff7ff
 8000c8c:	02008000 	.word	0x02008000

08000c90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b089      	sub	sp, #36	@ 0x24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	000c      	movs	r4, r1
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	1c22      	adds	r2, r4, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	1c02      	adds	r2, r0, #0
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	1c0a      	adds	r2, r1, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2241      	movs	r2, #65	@ 0x41
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d000      	beq.n	8000cc2 <HAL_I2C_Mem_Write+0x32>
 8000cc0:	e10c      	b.n	8000edc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d004      	beq.n	8000cd2 <HAL_I2C_Mem_Write+0x42>
 8000cc8:	232c      	movs	r3, #44	@ 0x2c
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d105      	bne.n	8000cde <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0ff      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2240      	movs	r2, #64	@ 0x40
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d101      	bne.n	8000cec <HAL_I2C_Mem_Write+0x5c>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e0f8      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2240      	movs	r2, #64	@ 0x40
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000cf4:	f7ff fcb6 	bl	8000664 <HAL_GetTick>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	0219      	lsls	r1, r3, #8
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2319      	movs	r3, #25
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f000 fb0b 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0e3      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2241      	movs	r2, #65	@ 0x41
 8000d1a:	2121      	movs	r1, #33	@ 0x21
 8000d1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2242      	movs	r2, #66	@ 0x42
 8000d22:	2140      	movs	r1, #64	@ 0x40
 8000d24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	222c      	movs	r2, #44	@ 0x2c
 8000d36:	18ba      	adds	r2, r7, r2
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	881c      	ldrh	r4, [r3, #0]
 8000d46:	2308      	movs	r3, #8
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	8819      	ldrh	r1, [r3, #0]
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	0023      	movs	r3, r4
 8000d5e:	f000 f9f9 	bl	8001154 <I2C_RequestMemoryWrite>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d005      	beq.n	8000d72 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2240      	movs	r2, #64	@ 0x40
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e0b5      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	2bff      	cmp	r3, #255	@ 0xff
 8000d7a:	d911      	bls.n	8000da0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	22ff      	movs	r2, #255	@ 0xff
 8000d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	2380      	movs	r3, #128	@ 0x80
 8000d8a:	045c      	lsls	r4, r3, #17
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	8819      	ldrh	r1, [r3, #0]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	2300      	movs	r3, #0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	0023      	movs	r3, r4
 8000d9a:	f000 fc9d 	bl	80016d8 <I2C_TransferConfig>
 8000d9e:	e012      	b.n	8000dc6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	049c      	lsls	r4, r3, #18
 8000db4:	230a      	movs	r3, #10
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	8819      	ldrh	r1, [r3, #0]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	f000 fc89 	bl	80016d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 fb01 	bl	80013d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e081      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d03a      	beq.n	8000e8a <HAL_I2C_Mem_Write+0x1fa>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d136      	bne.n	8000e8a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	0013      	movs	r3, r2
 8000e26:	2200      	movs	r2, #0
 8000e28:	2180      	movs	r1, #128	@ 0x80
 8000e2a:	f000 fa7b 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e053      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	2bff      	cmp	r3, #255	@ 0xff
 8000e3e:	d911      	bls.n	8000e64 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	22ff      	movs	r2, #255	@ 0xff
 8000e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	045c      	lsls	r4, r3, #17
 8000e50:	230a      	movs	r3, #10
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	8819      	ldrh	r1, [r3, #0]
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	0023      	movs	r3, r4
 8000e5e:	f000 fc3b 	bl	80016d8 <I2C_TransferConfig>
 8000e62:	e012      	b.n	8000e8a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	049c      	lsls	r4, r3, #18
 8000e78:	230a      	movs	r3, #10
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	8819      	ldrh	r1, [r3, #0]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	0023      	movs	r3, r4
 8000e86:	f000 fc27 	bl	80016d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d198      	bne.n	8000dc6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fae0 	bl	8001460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e01a      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2220      	movs	r2, #32
 8000eae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	490b      	ldr	r1, [pc, #44]	@ (8000ee8 <HAL_I2C_Mem_Write+0x258>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2241      	movs	r2, #65	@ 0x41
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2242      	movs	r2, #66	@ 0x42
 8000ecc:	2100      	movs	r1, #0
 8000ece:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2240      	movs	r2, #64	@ 0x40
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8000edc:	2302      	movs	r3, #2
  }
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b007      	add	sp, #28
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	fe00e800 	.word	0xfe00e800

08000eec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	230a      	movs	r3, #10
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	1c22      	adds	r2, r4, #0
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	2308      	movs	r3, #8
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	1c0a      	adds	r2, r1, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2241      	movs	r2, #65	@ 0x41
 8000f14:	5c9b      	ldrb	r3, [r3, r2]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d000      	beq.n	8000f1e <HAL_I2C_Mem_Read+0x32>
 8000f1c:	e110      	b.n	8001140 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <HAL_I2C_Mem_Read+0x42>
 8000f24:	232c      	movs	r3, #44	@ 0x2c
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d105      	bne.n	8000f3a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e103      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2240      	movs	r2, #64	@ 0x40
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_I2C_Mem_Read+0x5c>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e0fc      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2240      	movs	r2, #64	@ 0x40
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f50:	f7ff fb88 	bl	8000664 <HAL_GetTick>
 8000f54:	0003      	movs	r3, r0
 8000f56:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	0219      	lsls	r1, r3, #8
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2319      	movs	r3, #25
 8000f64:	2201      	movs	r2, #1
 8000f66:	f000 f9dd 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0e7      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2241      	movs	r2, #65	@ 0x41
 8000f76:	2122      	movs	r1, #34	@ 0x22
 8000f78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2242      	movs	r2, #66	@ 0x42
 8000f7e:	2140      	movs	r1, #64	@ 0x40
 8000f80:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	222c      	movs	r2, #44	@ 0x2c
 8000f92:	18ba      	adds	r2, r7, r2
 8000f94:	8812      	ldrh	r2, [r2, #0]
 8000f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	881c      	ldrh	r4, [r3, #0]
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	881a      	ldrh	r2, [r3, #0]
 8000fa8:	230a      	movs	r3, #10
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	8819      	ldrh	r1, [r3, #0]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	0023      	movs	r3, r4
 8000fba:	f000 f92f 	bl	800121c <I2C_RequestMemoryRead>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d005      	beq.n	8000fce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2240      	movs	r2, #64	@ 0x40
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0b9      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2bff      	cmp	r3, #255	@ 0xff
 8000fd6:	d911      	bls.n	8000ffc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	045c      	lsls	r4, r3, #17
 8000fe8:	230a      	movs	r3, #10
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	8819      	ldrh	r1, [r3, #0]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	4b56      	ldr	r3, [pc, #344]	@ (800114c <HAL_I2C_Mem_Read+0x260>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	0023      	movs	r3, r4
 8000ff6:	f000 fb6f 	bl	80016d8 <I2C_TransferConfig>
 8000ffa:	e012      	b.n	8001022 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001000:	b29a      	uxth	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800100a:	b2da      	uxtb	r2, r3
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	049c      	lsls	r4, r3, #18
 8001010:	230a      	movs	r3, #10
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	8819      	ldrh	r1, [r3, #0]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	4b4c      	ldr	r3, [pc, #304]	@ (800114c <HAL_I2C_Mem_Read+0x260>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	0023      	movs	r3, r4
 800101e:	f000 fb5b 	bl	80016d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	0013      	movs	r3, r2
 800102c:	2200      	movs	r2, #0
 800102e:	2104      	movs	r1, #4
 8001030:	f000 f978 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e082      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001064:	b29b      	uxth	r3, r3
 8001066:	3b01      	subs	r3, #1
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001072:	b29b      	uxth	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d03a      	beq.n	80010ee <HAL_I2C_Mem_Read+0x202>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d136      	bne.n	80010ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	0013      	movs	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	2180      	movs	r1, #128	@ 0x80
 800108e:	f000 f949 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e053      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2bff      	cmp	r3, #255	@ 0xff
 80010a2:	d911      	bls.n	80010c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2201      	movs	r2, #1
 80010a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	045c      	lsls	r4, r3, #17
 80010b4:	230a      	movs	r3, #10
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	8819      	ldrh	r1, [r3, #0]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	2300      	movs	r3, #0
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	0023      	movs	r3, r4
 80010c2:	f000 fb09 	bl	80016d8 <I2C_TransferConfig>
 80010c6:	e012      	b.n	80010ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	049c      	lsls	r4, r3, #18
 80010dc:	230a      	movs	r3, #10
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	0023      	movs	r3, r4
 80010ea:	f000 faf5 	bl	80016d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d194      	bne.n	8001022 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 f9ae 	bl	8001460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e01a      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2220      	movs	r2, #32
 8001112:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	490c      	ldr	r1, [pc, #48]	@ (8001150 <HAL_I2C_Mem_Read+0x264>)
 8001120:	400a      	ands	r2, r1
 8001122:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2241      	movs	r2, #65	@ 0x41
 8001128:	2120      	movs	r1, #32
 800112a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2242      	movs	r2, #66	@ 0x42
 8001130:	2100      	movs	r1, #0
 8001132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2240      	movs	r2, #64	@ 0x40
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001140:	2302      	movs	r3, #2
  }
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	b007      	add	sp, #28
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	80002400 	.word	0x80002400
 8001150:	fe00e800 	.word	0xfe00e800

08001154 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af02      	add	r7, sp, #8
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	000c      	movs	r4, r1
 800115e:	0010      	movs	r0, r2
 8001160:	0019      	movs	r1, r3
 8001162:	250a      	movs	r5, #10
 8001164:	197b      	adds	r3, r7, r5
 8001166:	1c22      	adds	r2, r4, #0
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	2308      	movs	r3, #8
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	1c02      	adds	r2, r0, #0
 8001170:	801a      	strh	r2, [r3, #0]
 8001172:	1dbb      	adds	r3, r7, #6
 8001174:	1c0a      	adds	r2, r1, #0
 8001176:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001178:	1dbb      	adds	r3, r7, #6
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	045c      	lsls	r4, r3, #17
 8001182:	197b      	adds	r3, r7, r5
 8001184:	8819      	ldrh	r1, [r3, #0]
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <I2C_RequestMemoryWrite+0xc4>)
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	0023      	movs	r3, r4
 800118e:	f000 faa3 	bl	80016d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001194:	6a39      	ldr	r1, [r7, #32]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	0018      	movs	r0, r3
 800119a:	f000 f91b 	bl	80013d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d001      	beq.n	80011a6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e033      	b.n	800120e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011ae:	2308      	movs	r3, #8
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80011bc:	e019      	b.n	80011f2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80011be:	2308      	movs	r3, #8
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d2:	6a39      	ldr	r1, [r7, #32]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f8fc 	bl	80013d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e014      	b.n	800120e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011e4:	2308      	movs	r3, #8
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80011f2:	6a3a      	ldr	r2, [r7, #32]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	0013      	movs	r3, r2
 80011fc:	2200      	movs	r2, #0
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	f000 f890 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	80002000 	.word	0x80002000

0800121c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af02      	add	r7, sp, #8
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	000c      	movs	r4, r1
 8001226:	0010      	movs	r0, r2
 8001228:	0019      	movs	r1, r3
 800122a:	250a      	movs	r5, #10
 800122c:	197b      	adds	r3, r7, r5
 800122e:	1c22      	adds	r2, r4, #0
 8001230:	801a      	strh	r2, [r3, #0]
 8001232:	2308      	movs	r3, #8
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	1c02      	adds	r2, r0, #0
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	1c0a      	adds	r2, r1, #0
 800123e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001240:	1dbb      	adds	r3, r7, #6
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	197b      	adds	r3, r7, r5
 8001248:	8819      	ldrh	r1, [r3, #0]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <I2C_RequestMemoryRead+0xc0>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	f000 fa41 	bl	80016d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f8b9 	bl	80013d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e033      	b.n	80012d2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800126a:	1dbb      	adds	r3, r7, #6
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001272:	2308      	movs	r3, #8
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001280:	e019      	b.n	80012b6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001282:	2308      	movs	r3, #8
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b29b      	uxth	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	0018      	movs	r0, r3
 800129c:	f000 f89a 	bl	80013d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e014      	b.n	80012d2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012a8:	2308      	movs	r3, #8
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	0013      	movs	r3, r2
 80012c0:	2200      	movs	r2, #0
 80012c2:	2140      	movs	r1, #64	@ 0x40
 80012c4:	f000 f82e 	bl	8001324 <I2C_WaitOnFlagUntilTimeout>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b004      	add	sp, #16
 80012d8:	bdb0      	pop	{r4, r5, r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	80002000 	.word	0x80002000

080012e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2202      	movs	r2, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d103      	bne.n	80012fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2201      	movs	r2, #1
 8001306:	4013      	ands	r3, r2
 8001308:	2b01      	cmp	r3, #1
 800130a:	d007      	beq.n	800131c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	619a      	str	r2, [r3, #24]
  }
}
 800131c:	46c0      	nop			@ (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}

08001324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001334:	e03a      	b.n	80013ac <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	0018      	movs	r0, r3
 800133e:	f000 f8d3 	bl	80014e8 <I2C_IsErrorOccurred>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e040      	b.n	80013cc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	d02d      	beq.n	80013ac <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001350:	f7ff f988 	bl	8000664 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d302      	bcc.n	8001366 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d122      	bne.n	80013ac <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4013      	ands	r3, r2
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	425a      	negs	r2, r3
 8001376:	4153      	adcs	r3, r2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	001a      	movs	r2, r3
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d113      	bne.n	80013ac <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001388:	2220      	movs	r2, #32
 800138a:	431a      	orrs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2241      	movs	r2, #65	@ 0x41
 8001394:	2120      	movs	r1, #32
 8001396:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2242      	movs	r2, #66	@ 0x42
 800139c:	2100      	movs	r1, #0
 800139e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2240      	movs	r2, #64	@ 0x40
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00f      	b.n	80013cc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4013      	ands	r3, r2
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	425a      	negs	r2, r3
 80013bc:	4153      	adcs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	001a      	movs	r2, r3
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d0b5      	beq.n	8001336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b004      	add	sp, #16
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013e0:	e032      	b.n	8001448 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f87d 	bl	80014e8 <I2C_IsErrorOccurred>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e030      	b.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	d025      	beq.n	8001448 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013fc:	f7ff f932 	bl	8000664 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	429a      	cmp	r2, r3
 800140a:	d302      	bcc.n	8001412 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11a      	bne.n	8001448 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	2b02      	cmp	r3, #2
 800141e:	d013      	beq.n	8001448 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	2220      	movs	r2, #32
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2241      	movs	r2, #65	@ 0x41
 8001430:	2120      	movs	r1, #32
 8001432:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2242      	movs	r2, #66	@ 0x42
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2240      	movs	r2, #64	@ 0x40
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e007      	b.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d1c5      	bne.n	80013e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}

08001460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800146c:	e02f      	b.n	80014ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	0018      	movs	r0, r3
 8001476:	f000 f837 	bl	80014e8 <I2C_IsErrorOccurred>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e02d      	b.n	80014de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001482:	f7ff f8ef 	bl	8000664 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	429a      	cmp	r2, r3
 8001490:	d302      	bcc.n	8001498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d11a      	bne.n	80014ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2220      	movs	r2, #32
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d013      	beq.n	80014ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	2220      	movs	r2, #32
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2241      	movs	r2, #65	@ 0x41
 80014b6:	2120      	movs	r1, #32
 80014b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2242      	movs	r2, #66	@ 0x42
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2240      	movs	r2, #64	@ 0x40
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e007      	b.n	80014de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2220      	movs	r2, #32
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b20      	cmp	r3, #32
 80014da:	d1c8      	bne.n	800146e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f4:	2327      	movs	r3, #39	@ 0x27
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2210      	movs	r2, #16
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <I2C_IsErrorOccurred+0x2e>
 8001514:	e079      	b.n	800160a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2210      	movs	r2, #16
 800151c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800151e:	e057      	b.n	80015d0 <I2C_IsErrorOccurred+0xe8>
 8001520:	2227      	movs	r2, #39	@ 0x27
 8001522:	18bb      	adds	r3, r7, r2
 8001524:	18ba      	adds	r2, r7, r2
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	d04f      	beq.n	80015d0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001530:	f7ff f898 	bl	8000664 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	d302      	bcc.n	8001546 <I2C_IsErrorOccurred+0x5e>
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d144      	bne.n	80015d0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	01db      	lsls	r3, r3, #7
 8001550:	4013      	ands	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001554:	2013      	movs	r0, #19
 8001556:	183b      	adds	r3, r7, r0
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	2142      	movs	r1, #66	@ 0x42
 800155c:	5c52      	ldrb	r2, [r2, r1]
 800155e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	401a      	ands	r2, r3
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	429a      	cmp	r2, r3
 8001572:	d126      	bne.n	80015c2 <I2C_IsErrorOccurred+0xda>
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	429a      	cmp	r2, r3
 800157c:	d021      	beq.n	80015c2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800157e:	183b      	adds	r3, r7, r0
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b20      	cmp	r3, #32
 8001584:	d01d      	beq.n	80015c2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	01c9      	lsls	r1, r1, #7
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001598:	f7ff f864 	bl	8000664 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a0:	e00f      	b.n	80015c2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015a2:	f7ff f85f 	bl	8000664 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b19      	cmp	r3, #25
 80015ae:	d908      	bls.n	80015c2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4313      	orrs	r3, r2
 80015b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015b8:	2327      	movs	r3, #39	@ 0x27
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]

              break;
 80015c0:	e006      	b.n	80015d0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2220      	movs	r2, #32
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d1e8      	bne.n	80015a2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2220      	movs	r2, #32
 80015d8:	4013      	ands	r3, r2
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d004      	beq.n	80015e8 <I2C_IsErrorOccurred+0x100>
 80015de:	2327      	movs	r3, #39	@ 0x27
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d09b      	beq.n	8001520 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80015e8:	2327      	movs	r3, #39	@ 0x27
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2220      	movs	r2, #32
 80015f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	2204      	movs	r2, #4
 80015fe:	4313      	orrs	r3, r2
 8001600:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001602:	2327      	movs	r3, #39	@ 0x27
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4013      	ands	r3, r2
 800161a:	d00c      	beq.n	8001636 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2201      	movs	r2, #1
 8001620:	4313      	orrs	r3, r2
 8001622:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	0052      	lsls	r2, r2, #1
 800162c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800162e:	2327      	movs	r3, #39	@ 0x27
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4013      	ands	r3, r2
 800163e:	d00c      	beq.n	800165a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2208      	movs	r2, #8
 8001644:	4313      	orrs	r3, r2
 8001646:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001652:	2327      	movs	r3, #39	@ 0x27
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d00c      	beq.n	800167e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2202      	movs	r2, #2
 8001668:	4313      	orrs	r3, r2
 800166a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001676:	2327      	movs	r3, #39	@ 0x27
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800167e:	2327      	movs	r3, #39	@ 0x27
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01d      	beq.n	80016c4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fe28 	bl	80012e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	490e      	ldr	r1, [pc, #56]	@ (80016d4 <I2C_IsErrorOccurred+0x1ec>)
 800169c:	400a      	ands	r2, r1
 800169e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2241      	movs	r2, #65	@ 0x41
 80016b0:	2120      	movs	r1, #32
 80016b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2242      	movs	r2, #66	@ 0x42
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2240      	movs	r2, #64	@ 0x40
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80016c4:	2327      	movs	r3, #39	@ 0x27
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b00a      	add	sp, #40	@ 0x28
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	fe00e800 	.word	0xfe00e800

080016d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	0008      	movs	r0, r1
 80016e2:	0011      	movs	r1, r2
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	240a      	movs	r4, #10
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	1c02      	adds	r2, r0, #0
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	2009      	movs	r0, #9
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	1c0a      	adds	r2, r1, #0
 80016f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	059b      	lsls	r3, r3, #22
 80016fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	0419      	lsls	r1, r3, #16
 8001704:	23ff      	movs	r3, #255	@ 0xff
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800170a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001712:	4313      	orrs	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001722:	0d51      	lsrs	r1, r2, #21
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	00d2      	lsls	r2, r2, #3
 8001728:	400a      	ands	r2, r1
 800172a:	4907      	ldr	r1, [pc, #28]	@ (8001748 <I2C_TransferConfig+0x70>)
 800172c:	430a      	orrs	r2, r1
 800172e:	43d2      	mvns	r2, r2
 8001730:	401a      	ands	r2, r3
 8001732:	0011      	movs	r1, r2
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b007      	add	sp, #28
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	03ff63ff 	.word	0x03ff63ff

0800174c <memset>:
 800174c:	0003      	movs	r3, r0
 800174e:	1882      	adds	r2, r0, r2
 8001750:	4293      	cmp	r3, r2
 8001752:	d100      	bne.n	8001756 <memset+0xa>
 8001754:	4770      	bx	lr
 8001756:	7019      	strb	r1, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	e7f9      	b.n	8001750 <memset+0x4>

0800175c <__libc_init_array>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	2600      	movs	r6, #0
 8001760:	4c0c      	ldr	r4, [pc, #48]	@ (8001794 <__libc_init_array+0x38>)
 8001762:	4d0d      	ldr	r5, [pc, #52]	@ (8001798 <__libc_init_array+0x3c>)
 8001764:	1b64      	subs	r4, r4, r5
 8001766:	10a4      	asrs	r4, r4, #2
 8001768:	42a6      	cmp	r6, r4
 800176a:	d109      	bne.n	8001780 <__libc_init_array+0x24>
 800176c:	2600      	movs	r6, #0
 800176e:	f000 f819 	bl	80017a4 <_init>
 8001772:	4c0a      	ldr	r4, [pc, #40]	@ (800179c <__libc_init_array+0x40>)
 8001774:	4d0a      	ldr	r5, [pc, #40]	@ (80017a0 <__libc_init_array+0x44>)
 8001776:	1b64      	subs	r4, r4, r5
 8001778:	10a4      	asrs	r4, r4, #2
 800177a:	42a6      	cmp	r6, r4
 800177c:	d105      	bne.n	800178a <__libc_init_array+0x2e>
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	00b3      	lsls	r3, r6, #2
 8001782:	58eb      	ldr	r3, [r5, r3]
 8001784:	4798      	blx	r3
 8001786:	3601      	adds	r6, #1
 8001788:	e7ee      	b.n	8001768 <__libc_init_array+0xc>
 800178a:	00b3      	lsls	r3, r6, #2
 800178c:	58eb      	ldr	r3, [r5, r3]
 800178e:	4798      	blx	r3
 8001790:	3601      	adds	r6, #1
 8001792:	e7f2      	b.n	800177a <__libc_init_array+0x1e>
 8001794:	080017bc 	.word	0x080017bc
 8001798:	080017bc 	.word	0x080017bc
 800179c:	080017c0 	.word	0x080017c0
 80017a0:	080017bc 	.word	0x080017bc

080017a4 <_init>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr

080017b0 <_fini>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr
