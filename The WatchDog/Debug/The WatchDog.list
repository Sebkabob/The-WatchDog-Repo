
The WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000355c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800361c  0800361c  0000461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c8  080036c8  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080036c8  080036c8  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c8  080036c8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c8  080036c8  000046c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080036d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080036e0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080036e0  000050a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a318  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4d  00000000  00000000  0000f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00010da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  00011828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f816  00000000  00000000  00012016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbee  00000000  00000000  0002182c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a6dc  00000000  00000000  0002e41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00088af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  00088b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0008b114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003604 	.word	0x08003604

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003604 	.word	0x08003604

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0243      	lsls	r3, r0, #9
 8000228:	0a5a      	lsrs	r2, r3, #9
 800022a:	024e      	lsls	r6, r1, #9
 800022c:	0045      	lsls	r5, r0, #1
 800022e:	0fc4      	lsrs	r4, r0, #31
 8000230:	0048      	lsls	r0, r1, #1
 8000232:	4691      	mov	r9, r2
 8000234:	0e2d      	lsrs	r5, r5, #24
 8000236:	0a72      	lsrs	r2, r6, #9
 8000238:	0e00      	lsrs	r0, r0, #24
 800023a:	4694      	mov	ip, r2
 800023c:	b580      	push	{r7, lr}
 800023e:	099b      	lsrs	r3, r3, #6
 8000240:	0fc9      	lsrs	r1, r1, #31
 8000242:	09b6      	lsrs	r6, r6, #6
 8000244:	1a2a      	subs	r2, r5, r0
 8000246:	428c      	cmp	r4, r1
 8000248:	d021      	beq.n	800028e <__aeabi_fadd+0x6e>
 800024a:	2a00      	cmp	r2, #0
 800024c:	dd0d      	ble.n	800026a <__aeabi_fadd+0x4a>
 800024e:	2800      	cmp	r0, #0
 8000250:	d12d      	bne.n	80002ae <__aeabi_fadd+0x8e>
 8000252:	2e00      	cmp	r6, #0
 8000254:	d100      	bne.n	8000258 <__aeabi_fadd+0x38>
 8000256:	e08d      	b.n	8000374 <__aeabi_fadd+0x154>
 8000258:	1e51      	subs	r1, r2, #1
 800025a:	2a01      	cmp	r2, #1
 800025c:	d100      	bne.n	8000260 <__aeabi_fadd+0x40>
 800025e:	e11d      	b.n	800049c <__aeabi_fadd+0x27c>
 8000260:	2aff      	cmp	r2, #255	@ 0xff
 8000262:	d100      	bne.n	8000266 <__aeabi_fadd+0x46>
 8000264:	e0ab      	b.n	80003be <__aeabi_fadd+0x19e>
 8000266:	000a      	movs	r2, r1
 8000268:	e027      	b.n	80002ba <__aeabi_fadd+0x9a>
 800026a:	2a00      	cmp	r2, #0
 800026c:	d04d      	beq.n	800030a <__aeabi_fadd+0xea>
 800026e:	1b42      	subs	r2, r0, r5
 8000270:	2d00      	cmp	r5, #0
 8000272:	d000      	beq.n	8000276 <__aeabi_fadd+0x56>
 8000274:	e0cc      	b.n	8000410 <__aeabi_fadd+0x1f0>
 8000276:	2b00      	cmp	r3, #0
 8000278:	d100      	bne.n	800027c <__aeabi_fadd+0x5c>
 800027a:	e079      	b.n	8000370 <__aeabi_fadd+0x150>
 800027c:	1e54      	subs	r4, r2, #1
 800027e:	2a01      	cmp	r2, #1
 8000280:	d100      	bne.n	8000284 <__aeabi_fadd+0x64>
 8000282:	e128      	b.n	80004d6 <__aeabi_fadd+0x2b6>
 8000284:	2aff      	cmp	r2, #255	@ 0xff
 8000286:	d100      	bne.n	800028a <__aeabi_fadd+0x6a>
 8000288:	e097      	b.n	80003ba <__aeabi_fadd+0x19a>
 800028a:	0022      	movs	r2, r4
 800028c:	e0c5      	b.n	800041a <__aeabi_fadd+0x1fa>
 800028e:	2a00      	cmp	r2, #0
 8000290:	dc00      	bgt.n	8000294 <__aeabi_fadd+0x74>
 8000292:	e096      	b.n	80003c2 <__aeabi_fadd+0x1a2>
 8000294:	2800      	cmp	r0, #0
 8000296:	d04f      	beq.n	8000338 <__aeabi_fadd+0x118>
 8000298:	2dff      	cmp	r5, #255	@ 0xff
 800029a:	d100      	bne.n	800029e <__aeabi_fadd+0x7e>
 800029c:	e08f      	b.n	80003be <__aeabi_fadd+0x19e>
 800029e:	2180      	movs	r1, #128	@ 0x80
 80002a0:	04c9      	lsls	r1, r1, #19
 80002a2:	430e      	orrs	r6, r1
 80002a4:	2a1b      	cmp	r2, #27
 80002a6:	dd51      	ble.n	800034c <__aeabi_fadd+0x12c>
 80002a8:	002a      	movs	r2, r5
 80002aa:	3301      	adds	r3, #1
 80002ac:	e018      	b.n	80002e0 <__aeabi_fadd+0xc0>
 80002ae:	2dff      	cmp	r5, #255	@ 0xff
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fadd+0x94>
 80002b2:	e084      	b.n	80003be <__aeabi_fadd+0x19e>
 80002b4:	2180      	movs	r1, #128	@ 0x80
 80002b6:	04c9      	lsls	r1, r1, #19
 80002b8:	430e      	orrs	r6, r1
 80002ba:	2101      	movs	r1, #1
 80002bc:	2a1b      	cmp	r2, #27
 80002be:	dc08      	bgt.n	80002d2 <__aeabi_fadd+0xb2>
 80002c0:	0031      	movs	r1, r6
 80002c2:	2020      	movs	r0, #32
 80002c4:	40d1      	lsrs	r1, r2
 80002c6:	1a82      	subs	r2, r0, r2
 80002c8:	4096      	lsls	r6, r2
 80002ca:	0032      	movs	r2, r6
 80002cc:	1e50      	subs	r0, r2, #1
 80002ce:	4182      	sbcs	r2, r0
 80002d0:	4311      	orrs	r1, r2
 80002d2:	1a5b      	subs	r3, r3, r1
 80002d4:	015a      	lsls	r2, r3, #5
 80002d6:	d459      	bmi.n	800038c <__aeabi_fadd+0x16c>
 80002d8:	2107      	movs	r1, #7
 80002da:	002a      	movs	r2, r5
 80002dc:	4019      	ands	r1, r3
 80002de:	d049      	beq.n	8000374 <__aeabi_fadd+0x154>
 80002e0:	210f      	movs	r1, #15
 80002e2:	4019      	ands	r1, r3
 80002e4:	2904      	cmp	r1, #4
 80002e6:	d000      	beq.n	80002ea <__aeabi_fadd+0xca>
 80002e8:	3304      	adds	r3, #4
 80002ea:	0159      	lsls	r1, r3, #5
 80002ec:	d542      	bpl.n	8000374 <__aeabi_fadd+0x154>
 80002ee:	1c50      	adds	r0, r2, #1
 80002f0:	2afe      	cmp	r2, #254	@ 0xfe
 80002f2:	d03a      	beq.n	800036a <__aeabi_fadd+0x14a>
 80002f4:	019b      	lsls	r3, r3, #6
 80002f6:	b2c0      	uxtb	r0, r0
 80002f8:	0a5b      	lsrs	r3, r3, #9
 80002fa:	05c0      	lsls	r0, r0, #23
 80002fc:	4318      	orrs	r0, r3
 80002fe:	07e4      	lsls	r4, r4, #31
 8000300:	4320      	orrs	r0, r4
 8000302:	bcc0      	pop	{r6, r7}
 8000304:	46b9      	mov	r9, r7
 8000306:	46b0      	mov	r8, r6
 8000308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800030a:	20fe      	movs	r0, #254	@ 0xfe
 800030c:	4680      	mov	r8, r0
 800030e:	1c6f      	adds	r7, r5, #1
 8000310:	0038      	movs	r0, r7
 8000312:	4647      	mov	r7, r8
 8000314:	4207      	tst	r7, r0
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0xfa>
 8000318:	e08e      	b.n	8000438 <__aeabi_fadd+0x218>
 800031a:	2d00      	cmp	r5, #0
 800031c:	d000      	beq.n	8000320 <__aeabi_fadd+0x100>
 800031e:	e0b4      	b.n	800048a <__aeabi_fadd+0x26a>
 8000320:	2b00      	cmp	r3, #0
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x106>
 8000324:	e0db      	b.n	80004de <__aeabi_fadd+0x2be>
 8000326:	2e00      	cmp	r6, #0
 8000328:	d06c      	beq.n	8000404 <__aeabi_fadd+0x1e4>
 800032a:	1b98      	subs	r0, r3, r6
 800032c:	0145      	lsls	r5, r0, #5
 800032e:	d400      	bmi.n	8000332 <__aeabi_fadd+0x112>
 8000330:	e0f7      	b.n	8000522 <__aeabi_fadd+0x302>
 8000332:	000c      	movs	r4, r1
 8000334:	1af3      	subs	r3, r6, r3
 8000336:	e03d      	b.n	80003b4 <__aeabi_fadd+0x194>
 8000338:	2e00      	cmp	r6, #0
 800033a:	d01b      	beq.n	8000374 <__aeabi_fadd+0x154>
 800033c:	1e51      	subs	r1, r2, #1
 800033e:	2a01      	cmp	r2, #1
 8000340:	d100      	bne.n	8000344 <__aeabi_fadd+0x124>
 8000342:	e082      	b.n	800044a <__aeabi_fadd+0x22a>
 8000344:	2aff      	cmp	r2, #255	@ 0xff
 8000346:	d03a      	beq.n	80003be <__aeabi_fadd+0x19e>
 8000348:	000a      	movs	r2, r1
 800034a:	e7ab      	b.n	80002a4 <__aeabi_fadd+0x84>
 800034c:	0031      	movs	r1, r6
 800034e:	2020      	movs	r0, #32
 8000350:	40d1      	lsrs	r1, r2
 8000352:	1a82      	subs	r2, r0, r2
 8000354:	4096      	lsls	r6, r2
 8000356:	0032      	movs	r2, r6
 8000358:	1e50      	subs	r0, r2, #1
 800035a:	4182      	sbcs	r2, r0
 800035c:	430a      	orrs	r2, r1
 800035e:	189b      	adds	r3, r3, r2
 8000360:	015a      	lsls	r2, r3, #5
 8000362:	d5b9      	bpl.n	80002d8 <__aeabi_fadd+0xb8>
 8000364:	1c6a      	adds	r2, r5, #1
 8000366:	2dfe      	cmp	r5, #254	@ 0xfe
 8000368:	d175      	bne.n	8000456 <__aeabi_fadd+0x236>
 800036a:	20ff      	movs	r0, #255	@ 0xff
 800036c:	2300      	movs	r3, #0
 800036e:	e7c4      	b.n	80002fa <__aeabi_fadd+0xda>
 8000370:	000c      	movs	r4, r1
 8000372:	0033      	movs	r3, r6
 8000374:	08db      	lsrs	r3, r3, #3
 8000376:	2aff      	cmp	r2, #255	@ 0xff
 8000378:	d146      	bne.n	8000408 <__aeabi_fadd+0x1e8>
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f5      	beq.n	800036a <__aeabi_fadd+0x14a>
 800037e:	2280      	movs	r2, #128	@ 0x80
 8000380:	03d2      	lsls	r2, r2, #15
 8000382:	4313      	orrs	r3, r2
 8000384:	025b      	lsls	r3, r3, #9
 8000386:	20ff      	movs	r0, #255	@ 0xff
 8000388:	0a5b      	lsrs	r3, r3, #9
 800038a:	e7b6      	b.n	80002fa <__aeabi_fadd+0xda>
 800038c:	019f      	lsls	r7, r3, #6
 800038e:	09bf      	lsrs	r7, r7, #6
 8000390:	0038      	movs	r0, r7
 8000392:	f000 fa3b 	bl	800080c <__clzsi2>
 8000396:	3805      	subs	r0, #5
 8000398:	4087      	lsls	r7, r0
 800039a:	4285      	cmp	r5, r0
 800039c:	dc24      	bgt.n	80003e8 <__aeabi_fadd+0x1c8>
 800039e:	003b      	movs	r3, r7
 80003a0:	2120      	movs	r1, #32
 80003a2:	1b42      	subs	r2, r0, r5
 80003a4:	3201      	adds	r2, #1
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	1a8a      	subs	r2, r1, r2
 80003aa:	4097      	lsls	r7, r2
 80003ac:	1e7a      	subs	r2, r7, #1
 80003ae:	4197      	sbcs	r7, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	433b      	orrs	r3, r7
 80003b4:	0759      	lsls	r1, r3, #29
 80003b6:	d193      	bne.n	80002e0 <__aeabi_fadd+0xc0>
 80003b8:	e797      	b.n	80002ea <__aeabi_fadd+0xca>
 80003ba:	000c      	movs	r4, r1
 80003bc:	0033      	movs	r3, r6
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	e7db      	b.n	800037a <__aeabi_fadd+0x15a>
 80003c2:	2a00      	cmp	r2, #0
 80003c4:	d014      	beq.n	80003f0 <__aeabi_fadd+0x1d0>
 80003c6:	1b42      	subs	r2, r0, r5
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	d14b      	bne.n	8000464 <__aeabi_fadd+0x244>
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0d0      	beq.n	8000372 <__aeabi_fadd+0x152>
 80003d0:	1e51      	subs	r1, r2, #1
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	d100      	bne.n	80003d8 <__aeabi_fadd+0x1b8>
 80003d6:	e09e      	b.n	8000516 <__aeabi_fadd+0x2f6>
 80003d8:	2aff      	cmp	r2, #255	@ 0xff
 80003da:	d0ef      	beq.n	80003bc <__aeabi_fadd+0x19c>
 80003dc:	000a      	movs	r2, r1
 80003de:	2a1b      	cmp	r2, #27
 80003e0:	dd5f      	ble.n	80004a2 <__aeabi_fadd+0x282>
 80003e2:	0002      	movs	r2, r0
 80003e4:	1c73      	adds	r3, r6, #1
 80003e6:	e77b      	b.n	80002e0 <__aeabi_fadd+0xc0>
 80003e8:	4b50      	ldr	r3, [pc, #320]	@ (800052c <__aeabi_fadd+0x30c>)
 80003ea:	1a2a      	subs	r2, r5, r0
 80003ec:	403b      	ands	r3, r7
 80003ee:	e7e1      	b.n	80003b4 <__aeabi_fadd+0x194>
 80003f0:	21fe      	movs	r1, #254	@ 0xfe
 80003f2:	1c6a      	adds	r2, r5, #1
 80003f4:	4211      	tst	r1, r2
 80003f6:	d13b      	bne.n	8000470 <__aeabi_fadd+0x250>
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	d15d      	bne.n	80004b8 <__aeabi_fadd+0x298>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d07f      	beq.n	8000500 <__aeabi_fadd+0x2e0>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d17f      	bne.n	8000504 <__aeabi_fadd+0x2e4>
 8000404:	2200      	movs	r2, #0
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	0a5b      	lsrs	r3, r3, #9
 800040c:	b2d0      	uxtb	r0, r2
 800040e:	e774      	b.n	80002fa <__aeabi_fadd+0xda>
 8000410:	28ff      	cmp	r0, #255	@ 0xff
 8000412:	d0d2      	beq.n	80003ba <__aeabi_fadd+0x19a>
 8000414:	2480      	movs	r4, #128	@ 0x80
 8000416:	04e4      	lsls	r4, r4, #19
 8000418:	4323      	orrs	r3, r4
 800041a:	2401      	movs	r4, #1
 800041c:	2a1b      	cmp	r2, #27
 800041e:	dc07      	bgt.n	8000430 <__aeabi_fadd+0x210>
 8000420:	001c      	movs	r4, r3
 8000422:	2520      	movs	r5, #32
 8000424:	40d4      	lsrs	r4, r2
 8000426:	1aaa      	subs	r2, r5, r2
 8000428:	4093      	lsls	r3, r2
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	4193      	sbcs	r3, r2
 800042e:	431c      	orrs	r4, r3
 8000430:	1b33      	subs	r3, r6, r4
 8000432:	0005      	movs	r5, r0
 8000434:	000c      	movs	r4, r1
 8000436:	e74d      	b.n	80002d4 <__aeabi_fadd+0xb4>
 8000438:	1b9f      	subs	r7, r3, r6
 800043a:	017a      	lsls	r2, r7, #5
 800043c:	d422      	bmi.n	8000484 <__aeabi_fadd+0x264>
 800043e:	2f00      	cmp	r7, #0
 8000440:	d1a6      	bne.n	8000390 <__aeabi_fadd+0x170>
 8000442:	2400      	movs	r4, #0
 8000444:	2000      	movs	r0, #0
 8000446:	2300      	movs	r3, #0
 8000448:	e757      	b.n	80002fa <__aeabi_fadd+0xda>
 800044a:	199b      	adds	r3, r3, r6
 800044c:	2501      	movs	r5, #1
 800044e:	3201      	adds	r2, #1
 8000450:	0159      	lsls	r1, r3, #5
 8000452:	d400      	bmi.n	8000456 <__aeabi_fadd+0x236>
 8000454:	e740      	b.n	80002d8 <__aeabi_fadd+0xb8>
 8000456:	2101      	movs	r1, #1
 8000458:	4835      	ldr	r0, [pc, #212]	@ (8000530 <__aeabi_fadd+0x310>)
 800045a:	4019      	ands	r1, r3
 800045c:	085b      	lsrs	r3, r3, #1
 800045e:	4003      	ands	r3, r0
 8000460:	430b      	orrs	r3, r1
 8000462:	e7a7      	b.n	80003b4 <__aeabi_fadd+0x194>
 8000464:	28ff      	cmp	r0, #255	@ 0xff
 8000466:	d0a9      	beq.n	80003bc <__aeabi_fadd+0x19c>
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	04c9      	lsls	r1, r1, #19
 800046c:	430b      	orrs	r3, r1
 800046e:	e7b6      	b.n	80003de <__aeabi_fadd+0x1be>
 8000470:	2aff      	cmp	r2, #255	@ 0xff
 8000472:	d100      	bne.n	8000476 <__aeabi_fadd+0x256>
 8000474:	e779      	b.n	800036a <__aeabi_fadd+0x14a>
 8000476:	199b      	adds	r3, r3, r6
 8000478:	085b      	lsrs	r3, r3, #1
 800047a:	0759      	lsls	r1, r3, #29
 800047c:	d000      	beq.n	8000480 <__aeabi_fadd+0x260>
 800047e:	e72f      	b.n	80002e0 <__aeabi_fadd+0xc0>
 8000480:	08db      	lsrs	r3, r3, #3
 8000482:	e7c1      	b.n	8000408 <__aeabi_fadd+0x1e8>
 8000484:	000c      	movs	r4, r1
 8000486:	1af7      	subs	r7, r6, r3
 8000488:	e782      	b.n	8000390 <__aeabi_fadd+0x170>
 800048a:	2b00      	cmp	r3, #0
 800048c:	d12c      	bne.n	80004e8 <__aeabi_fadd+0x2c8>
 800048e:	2e00      	cmp	r6, #0
 8000490:	d193      	bne.n	80003ba <__aeabi_fadd+0x19a>
 8000492:	2380      	movs	r3, #128	@ 0x80
 8000494:	2400      	movs	r4, #0
 8000496:	20ff      	movs	r0, #255	@ 0xff
 8000498:	03db      	lsls	r3, r3, #15
 800049a:	e72e      	b.n	80002fa <__aeabi_fadd+0xda>
 800049c:	2501      	movs	r5, #1
 800049e:	1b9b      	subs	r3, r3, r6
 80004a0:	e718      	b.n	80002d4 <__aeabi_fadd+0xb4>
 80004a2:	0019      	movs	r1, r3
 80004a4:	2520      	movs	r5, #32
 80004a6:	40d1      	lsrs	r1, r2
 80004a8:	1aaa      	subs	r2, r5, r2
 80004aa:	4093      	lsls	r3, r2
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	4193      	sbcs	r3, r2
 80004b0:	430b      	orrs	r3, r1
 80004b2:	0005      	movs	r5, r0
 80004b4:	199b      	adds	r3, r3, r6
 80004b6:	e753      	b.n	8000360 <__aeabi_fadd+0x140>
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0x29e>
 80004bc:	e77e      	b.n	80003bc <__aeabi_fadd+0x19c>
 80004be:	2e00      	cmp	r6, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fadd+0x2a4>
 80004c2:	e77c      	b.n	80003be <__aeabi_fadd+0x19e>
 80004c4:	2280      	movs	r2, #128	@ 0x80
 80004c6:	03d2      	lsls	r2, r2, #15
 80004c8:	4591      	cmp	r9, r2
 80004ca:	d302      	bcc.n	80004d2 <__aeabi_fadd+0x2b2>
 80004cc:	4594      	cmp	ip, r2
 80004ce:	d200      	bcs.n	80004d2 <__aeabi_fadd+0x2b2>
 80004d0:	0033      	movs	r3, r6
 80004d2:	08db      	lsrs	r3, r3, #3
 80004d4:	e753      	b.n	800037e <__aeabi_fadd+0x15e>
 80004d6:	000c      	movs	r4, r1
 80004d8:	1af3      	subs	r3, r6, r3
 80004da:	3501      	adds	r5, #1
 80004dc:	e6fa      	b.n	80002d4 <__aeabi_fadd+0xb4>
 80004de:	2e00      	cmp	r6, #0
 80004e0:	d0af      	beq.n	8000442 <__aeabi_fadd+0x222>
 80004e2:	000c      	movs	r4, r1
 80004e4:	0033      	movs	r3, r6
 80004e6:	e78d      	b.n	8000404 <__aeabi_fadd+0x1e4>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x2ce>
 80004ec:	e767      	b.n	80003be <__aeabi_fadd+0x19e>
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	03d2      	lsls	r2, r2, #15
 80004f2:	4591      	cmp	r9, r2
 80004f4:	d3ed      	bcc.n	80004d2 <__aeabi_fadd+0x2b2>
 80004f6:	4594      	cmp	ip, r2
 80004f8:	d2eb      	bcs.n	80004d2 <__aeabi_fadd+0x2b2>
 80004fa:	000c      	movs	r4, r1
 80004fc:	0033      	movs	r3, r6
 80004fe:	e7e8      	b.n	80004d2 <__aeabi_fadd+0x2b2>
 8000500:	0033      	movs	r3, r6
 8000502:	e77f      	b.n	8000404 <__aeabi_fadd+0x1e4>
 8000504:	199b      	adds	r3, r3, r6
 8000506:	2200      	movs	r2, #0
 8000508:	0159      	lsls	r1, r3, #5
 800050a:	d5b9      	bpl.n	8000480 <__aeabi_fadd+0x260>
 800050c:	4a07      	ldr	r2, [pc, #28]	@ (800052c <__aeabi_fadd+0x30c>)
 800050e:	4013      	ands	r3, r2
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	2201      	movs	r2, #1
 8000514:	e778      	b.n	8000408 <__aeabi_fadd+0x1e8>
 8000516:	199b      	adds	r3, r3, r6
 8000518:	3201      	adds	r2, #1
 800051a:	3501      	adds	r5, #1
 800051c:	0159      	lsls	r1, r3, #5
 800051e:	d49a      	bmi.n	8000456 <__aeabi_fadd+0x236>
 8000520:	e6da      	b.n	80002d8 <__aeabi_fadd+0xb8>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d08d      	beq.n	8000442 <__aeabi_fadd+0x222>
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	e76e      	b.n	8000408 <__aeabi_fadd+0x1e8>
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	fbffffff 	.word	0xfbffffff
 8000530:	7dffffff 	.word	0x7dffffff

08000534 <__aeabi_fdiv>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	464f      	mov	r7, r9
 8000538:	4646      	mov	r6, r8
 800053a:	46d6      	mov	lr, sl
 800053c:	0244      	lsls	r4, r0, #9
 800053e:	b5c0      	push	{r6, r7, lr}
 8000540:	0047      	lsls	r7, r0, #1
 8000542:	1c0e      	adds	r6, r1, #0
 8000544:	0a64      	lsrs	r4, r4, #9
 8000546:	0e3f      	lsrs	r7, r7, #24
 8000548:	0fc5      	lsrs	r5, r0, #31
 800054a:	2f00      	cmp	r7, #0
 800054c:	d03c      	beq.n	80005c8 <__aeabi_fdiv+0x94>
 800054e:	2fff      	cmp	r7, #255	@ 0xff
 8000550:	d042      	beq.n	80005d8 <__aeabi_fdiv+0xa4>
 8000552:	2300      	movs	r3, #0
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	4699      	mov	r9, r3
 8000558:	469a      	mov	sl, r3
 800055a:	00e4      	lsls	r4, r4, #3
 800055c:	04d2      	lsls	r2, r2, #19
 800055e:	4314      	orrs	r4, r2
 8000560:	3f7f      	subs	r7, #127	@ 0x7f
 8000562:	0273      	lsls	r3, r6, #9
 8000564:	0a5b      	lsrs	r3, r3, #9
 8000566:	4698      	mov	r8, r3
 8000568:	0073      	lsls	r3, r6, #1
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	0ff6      	lsrs	r6, r6, #31
 800056e:	2b00      	cmp	r3, #0
 8000570:	d01b      	beq.n	80005aa <__aeabi_fdiv+0x76>
 8000572:	2bff      	cmp	r3, #255	@ 0xff
 8000574:	d013      	beq.n	800059e <__aeabi_fdiv+0x6a>
 8000576:	4642      	mov	r2, r8
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	04c9      	lsls	r1, r1, #19
 800057e:	4311      	orrs	r1, r2
 8000580:	4688      	mov	r8, r1
 8000582:	2000      	movs	r0, #0
 8000584:	3b7f      	subs	r3, #127	@ 0x7f
 8000586:	0029      	movs	r1, r5
 8000588:	1aff      	subs	r7, r7, r3
 800058a:	464b      	mov	r3, r9
 800058c:	4071      	eors	r1, r6
 800058e:	b2c9      	uxtb	r1, r1
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d900      	bls.n	8000596 <__aeabi_fdiv+0x62>
 8000594:	e0b5      	b.n	8000702 <__aeabi_fdiv+0x1ce>
 8000596:	4a74      	ldr	r2, [pc, #464]	@ (8000768 <__aeabi_fdiv+0x234>)
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	58d3      	ldr	r3, [r2, r3]
 800059c:	469f      	mov	pc, r3
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d13f      	bne.n	8000624 <__aeabi_fdiv+0xf0>
 80005a4:	3fff      	subs	r7, #255	@ 0xff
 80005a6:	3302      	adds	r3, #2
 80005a8:	e003      	b.n	80005b2 <__aeabi_fdiv+0x7e>
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d12d      	bne.n	800060c <__aeabi_fdiv+0xd8>
 80005b0:	2301      	movs	r3, #1
 80005b2:	0029      	movs	r1, r5
 80005b4:	464a      	mov	r2, r9
 80005b6:	4071      	eors	r1, r6
 80005b8:	b2c9      	uxtb	r1, r1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	2a0e      	cmp	r2, #14
 80005be:	d838      	bhi.n	8000632 <__aeabi_fdiv+0xfe>
 80005c0:	486a      	ldr	r0, [pc, #424]	@ (800076c <__aeabi_fdiv+0x238>)
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	5882      	ldr	r2, [r0, r2]
 80005c6:	4697      	mov	pc, r2
 80005c8:	2c00      	cmp	r4, #0
 80005ca:	d113      	bne.n	80005f4 <__aeabi_fdiv+0xc0>
 80005cc:	2304      	movs	r3, #4
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b03      	subs	r3, #3
 80005d2:	2700      	movs	r7, #0
 80005d4:	469a      	mov	sl, r3
 80005d6:	e7c4      	b.n	8000562 <__aeabi_fdiv+0x2e>
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d105      	bne.n	80005e8 <__aeabi_fdiv+0xb4>
 80005dc:	2308      	movs	r3, #8
 80005de:	4699      	mov	r9, r3
 80005e0:	3b06      	subs	r3, #6
 80005e2:	27ff      	movs	r7, #255	@ 0xff
 80005e4:	469a      	mov	sl, r3
 80005e6:	e7bc      	b.n	8000562 <__aeabi_fdiv+0x2e>
 80005e8:	230c      	movs	r3, #12
 80005ea:	4699      	mov	r9, r3
 80005ec:	3b09      	subs	r3, #9
 80005ee:	27ff      	movs	r7, #255	@ 0xff
 80005f0:	469a      	mov	sl, r3
 80005f2:	e7b6      	b.n	8000562 <__aeabi_fdiv+0x2e>
 80005f4:	0020      	movs	r0, r4
 80005f6:	f000 f909 	bl	800080c <__clzsi2>
 80005fa:	2776      	movs	r7, #118	@ 0x76
 80005fc:	1f43      	subs	r3, r0, #5
 80005fe:	409c      	lsls	r4, r3
 8000600:	2300      	movs	r3, #0
 8000602:	427f      	negs	r7, r7
 8000604:	4699      	mov	r9, r3
 8000606:	469a      	mov	sl, r3
 8000608:	1a3f      	subs	r7, r7, r0
 800060a:	e7aa      	b.n	8000562 <__aeabi_fdiv+0x2e>
 800060c:	4640      	mov	r0, r8
 800060e:	f000 f8fd 	bl	800080c <__clzsi2>
 8000612:	4642      	mov	r2, r8
 8000614:	1f43      	subs	r3, r0, #5
 8000616:	409a      	lsls	r2, r3
 8000618:	2376      	movs	r3, #118	@ 0x76
 800061a:	425b      	negs	r3, r3
 800061c:	1a1b      	subs	r3, r3, r0
 800061e:	4690      	mov	r8, r2
 8000620:	2000      	movs	r0, #0
 8000622:	e7b0      	b.n	8000586 <__aeabi_fdiv+0x52>
 8000624:	2303      	movs	r3, #3
 8000626:	464a      	mov	r2, r9
 8000628:	431a      	orrs	r2, r3
 800062a:	4691      	mov	r9, r2
 800062c:	2003      	movs	r0, #3
 800062e:	33fc      	adds	r3, #252	@ 0xfc
 8000630:	e7a9      	b.n	8000586 <__aeabi_fdiv+0x52>
 8000632:	000d      	movs	r5, r1
 8000634:	20ff      	movs	r0, #255	@ 0xff
 8000636:	2200      	movs	r2, #0
 8000638:	05c0      	lsls	r0, r0, #23
 800063a:	07ed      	lsls	r5, r5, #31
 800063c:	4310      	orrs	r0, r2
 800063e:	4328      	orrs	r0, r5
 8000640:	bce0      	pop	{r5, r6, r7}
 8000642:	46ba      	mov	sl, r7
 8000644:	46b1      	mov	r9, r6
 8000646:	46a8      	mov	r8, r5
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064a:	000d      	movs	r5, r1
 800064c:	2000      	movs	r0, #0
 800064e:	2200      	movs	r2, #0
 8000650:	e7f2      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000652:	4653      	mov	r3, sl
 8000654:	2b02      	cmp	r3, #2
 8000656:	d0ed      	beq.n	8000634 <__aeabi_fdiv+0x100>
 8000658:	2b03      	cmp	r3, #3
 800065a:	d033      	beq.n	80006c4 <__aeabi_fdiv+0x190>
 800065c:	46a0      	mov	r8, r4
 800065e:	2b01      	cmp	r3, #1
 8000660:	d105      	bne.n	800066e <__aeabi_fdiv+0x13a>
 8000662:	2000      	movs	r0, #0
 8000664:	2200      	movs	r2, #0
 8000666:	e7e7      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000668:	0035      	movs	r5, r6
 800066a:	2803      	cmp	r0, #3
 800066c:	d07a      	beq.n	8000764 <__aeabi_fdiv+0x230>
 800066e:	003b      	movs	r3, r7
 8000670:	337f      	adds	r3, #127	@ 0x7f
 8000672:	2b00      	cmp	r3, #0
 8000674:	dd2d      	ble.n	80006d2 <__aeabi_fdiv+0x19e>
 8000676:	4642      	mov	r2, r8
 8000678:	0752      	lsls	r2, r2, #29
 800067a:	d007      	beq.n	800068c <__aeabi_fdiv+0x158>
 800067c:	220f      	movs	r2, #15
 800067e:	4641      	mov	r1, r8
 8000680:	400a      	ands	r2, r1
 8000682:	2a04      	cmp	r2, #4
 8000684:	d002      	beq.n	800068c <__aeabi_fdiv+0x158>
 8000686:	2204      	movs	r2, #4
 8000688:	4694      	mov	ip, r2
 800068a:	44e0      	add	r8, ip
 800068c:	4642      	mov	r2, r8
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	d505      	bpl.n	800069e <__aeabi_fdiv+0x16a>
 8000692:	4642      	mov	r2, r8
 8000694:	4b36      	ldr	r3, [pc, #216]	@ (8000770 <__aeabi_fdiv+0x23c>)
 8000696:	401a      	ands	r2, r3
 8000698:	003b      	movs	r3, r7
 800069a:	4690      	mov	r8, r2
 800069c:	3380      	adds	r3, #128	@ 0x80
 800069e:	2bfe      	cmp	r3, #254	@ 0xfe
 80006a0:	dcc8      	bgt.n	8000634 <__aeabi_fdiv+0x100>
 80006a2:	4642      	mov	r2, r8
 80006a4:	0192      	lsls	r2, r2, #6
 80006a6:	0a52      	lsrs	r2, r2, #9
 80006a8:	b2d8      	uxtb	r0, r3
 80006aa:	e7c5      	b.n	8000638 <__aeabi_fdiv+0x104>
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	2500      	movs	r5, #0
 80006b0:	20ff      	movs	r0, #255	@ 0xff
 80006b2:	03d2      	lsls	r2, r2, #15
 80006b4:	e7c0      	b.n	8000638 <__aeabi_fdiv+0x104>
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	03d2      	lsls	r2, r2, #15
 80006ba:	4214      	tst	r4, r2
 80006bc:	d002      	beq.n	80006c4 <__aeabi_fdiv+0x190>
 80006be:	4643      	mov	r3, r8
 80006c0:	4213      	tst	r3, r2
 80006c2:	d049      	beq.n	8000758 <__aeabi_fdiv+0x224>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	03d2      	lsls	r2, r2, #15
 80006c8:	4322      	orrs	r2, r4
 80006ca:	0252      	lsls	r2, r2, #9
 80006cc:	20ff      	movs	r0, #255	@ 0xff
 80006ce:	0a52      	lsrs	r2, r2, #9
 80006d0:	e7b2      	b.n	8000638 <__aeabi_fdiv+0x104>
 80006d2:	2201      	movs	r2, #1
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b1b      	cmp	r3, #27
 80006d8:	dcc3      	bgt.n	8000662 <__aeabi_fdiv+0x12e>
 80006da:	4642      	mov	r2, r8
 80006dc:	40da      	lsrs	r2, r3
 80006de:	4643      	mov	r3, r8
 80006e0:	379e      	adds	r7, #158	@ 0x9e
 80006e2:	40bb      	lsls	r3, r7
 80006e4:	1e59      	subs	r1, r3, #1
 80006e6:	418b      	sbcs	r3, r1
 80006e8:	431a      	orrs	r2, r3
 80006ea:	0753      	lsls	r3, r2, #29
 80006ec:	d004      	beq.n	80006f8 <__aeabi_fdiv+0x1c4>
 80006ee:	230f      	movs	r3, #15
 80006f0:	4013      	ands	r3, r2
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fdiv+0x1c4>
 80006f6:	3204      	adds	r2, #4
 80006f8:	0153      	lsls	r3, r2, #5
 80006fa:	d529      	bpl.n	8000750 <__aeabi_fdiv+0x21c>
 80006fc:	2001      	movs	r0, #1
 80006fe:	2200      	movs	r2, #0
 8000700:	e79a      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000702:	4642      	mov	r2, r8
 8000704:	0163      	lsls	r3, r4, #5
 8000706:	0155      	lsls	r5, r2, #5
 8000708:	42ab      	cmp	r3, r5
 800070a:	d215      	bcs.n	8000738 <__aeabi_fdiv+0x204>
 800070c:	201b      	movs	r0, #27
 800070e:	2200      	movs	r2, #0
 8000710:	3f01      	subs	r7, #1
 8000712:	2601      	movs	r6, #1
 8000714:	001c      	movs	r4, r3
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	2c00      	cmp	r4, #0
 800071c:	db01      	blt.n	8000722 <__aeabi_fdiv+0x1ee>
 800071e:	429d      	cmp	r5, r3
 8000720:	d801      	bhi.n	8000726 <__aeabi_fdiv+0x1f2>
 8000722:	1b5b      	subs	r3, r3, r5
 8000724:	4332      	orrs	r2, r6
 8000726:	3801      	subs	r0, #1
 8000728:	2800      	cmp	r0, #0
 800072a:	d1f3      	bne.n	8000714 <__aeabi_fdiv+0x1e0>
 800072c:	1e58      	subs	r0, r3, #1
 800072e:	4183      	sbcs	r3, r0
 8000730:	4313      	orrs	r3, r2
 8000732:	4698      	mov	r8, r3
 8000734:	000d      	movs	r5, r1
 8000736:	e79a      	b.n	800066e <__aeabi_fdiv+0x13a>
 8000738:	201a      	movs	r0, #26
 800073a:	2201      	movs	r2, #1
 800073c:	1b5b      	subs	r3, r3, r5
 800073e:	e7e8      	b.n	8000712 <__aeabi_fdiv+0x1de>
 8000740:	3b02      	subs	r3, #2
 8000742:	425a      	negs	r2, r3
 8000744:	4153      	adcs	r3, r2
 8000746:	425b      	negs	r3, r3
 8000748:	0035      	movs	r5, r6
 800074a:	2200      	movs	r2, #0
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e773      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000750:	0192      	lsls	r2, r2, #6
 8000752:	2000      	movs	r0, #0
 8000754:	0a52      	lsrs	r2, r2, #9
 8000756:	e76f      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000758:	431a      	orrs	r2, r3
 800075a:	0252      	lsls	r2, r2, #9
 800075c:	0035      	movs	r5, r6
 800075e:	20ff      	movs	r0, #255	@ 0xff
 8000760:	0a52      	lsrs	r2, r2, #9
 8000762:	e769      	b.n	8000638 <__aeabi_fdiv+0x104>
 8000764:	4644      	mov	r4, r8
 8000766:	e7ad      	b.n	80006c4 <__aeabi_fdiv+0x190>
 8000768:	0800361c 	.word	0x0800361c
 800076c:	0800365c 	.word	0x0800365c
 8000770:	f7ffffff 	.word	0xf7ffffff

08000774 <__aeabi_i2f>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	2800      	cmp	r0, #0
 8000778:	d013      	beq.n	80007a2 <__aeabi_i2f+0x2e>
 800077a:	17c3      	asrs	r3, r0, #31
 800077c:	18c5      	adds	r5, r0, r3
 800077e:	405d      	eors	r5, r3
 8000780:	0fc4      	lsrs	r4, r0, #31
 8000782:	0028      	movs	r0, r5
 8000784:	f000 f842 	bl	800080c <__clzsi2>
 8000788:	239e      	movs	r3, #158	@ 0x9e
 800078a:	0001      	movs	r1, r0
 800078c:	1a1b      	subs	r3, r3, r0
 800078e:	2b96      	cmp	r3, #150	@ 0x96
 8000790:	dc0f      	bgt.n	80007b2 <__aeabi_i2f+0x3e>
 8000792:	2808      	cmp	r0, #8
 8000794:	d034      	beq.n	8000800 <__aeabi_i2f+0x8c>
 8000796:	3908      	subs	r1, #8
 8000798:	408d      	lsls	r5, r1
 800079a:	026d      	lsls	r5, r5, #9
 800079c:	0a6d      	lsrs	r5, r5, #9
 800079e:	b2d8      	uxtb	r0, r3
 80007a0:	e002      	b.n	80007a8 <__aeabi_i2f+0x34>
 80007a2:	2400      	movs	r4, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	2500      	movs	r5, #0
 80007a8:	05c0      	lsls	r0, r0, #23
 80007aa:	4328      	orrs	r0, r5
 80007ac:	07e4      	lsls	r4, r4, #31
 80007ae:	4320      	orrs	r0, r4
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	2b99      	cmp	r3, #153	@ 0x99
 80007b4:	dc16      	bgt.n	80007e4 <__aeabi_i2f+0x70>
 80007b6:	1f42      	subs	r2, r0, #5
 80007b8:	2805      	cmp	r0, #5
 80007ba:	d000      	beq.n	80007be <__aeabi_i2f+0x4a>
 80007bc:	4095      	lsls	r5, r2
 80007be:	002a      	movs	r2, r5
 80007c0:	4811      	ldr	r0, [pc, #68]	@ (8000808 <__aeabi_i2f+0x94>)
 80007c2:	4002      	ands	r2, r0
 80007c4:	076e      	lsls	r6, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_i2f+0x68>
 80007c8:	260f      	movs	r6, #15
 80007ca:	4035      	ands	r5, r6
 80007cc:	2d04      	cmp	r5, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_i2f+0x68>
 80007d0:	3204      	adds	r2, #4
 80007d2:	0155      	lsls	r5, r2, #5
 80007d4:	d502      	bpl.n	80007dc <__aeabi_i2f+0x68>
 80007d6:	239f      	movs	r3, #159	@ 0x9f
 80007d8:	4002      	ands	r2, r0
 80007da:	1a5b      	subs	r3, r3, r1
 80007dc:	0192      	lsls	r2, r2, #6
 80007de:	0a55      	lsrs	r5, r2, #9
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	e7e1      	b.n	80007a8 <__aeabi_i2f+0x34>
 80007e4:	2205      	movs	r2, #5
 80007e6:	1a12      	subs	r2, r2, r0
 80007e8:	0028      	movs	r0, r5
 80007ea:	40d0      	lsrs	r0, r2
 80007ec:	0002      	movs	r2, r0
 80007ee:	0008      	movs	r0, r1
 80007f0:	301b      	adds	r0, #27
 80007f2:	4085      	lsls	r5, r0
 80007f4:	0028      	movs	r0, r5
 80007f6:	1e45      	subs	r5, r0, #1
 80007f8:	41a8      	sbcs	r0, r5
 80007fa:	4302      	orrs	r2, r0
 80007fc:	0015      	movs	r5, r2
 80007fe:	e7de      	b.n	80007be <__aeabi_i2f+0x4a>
 8000800:	026d      	lsls	r5, r5, #9
 8000802:	2096      	movs	r0, #150	@ 0x96
 8000804:	0a6d      	lsrs	r5, r5, #9
 8000806:	e7cf      	b.n	80007a8 <__aeabi_i2f+0x34>
 8000808:	fbffffff 	.word	0xfbffffff

0800080c <__clzsi2>:
 800080c:	211c      	movs	r1, #28
 800080e:	2301      	movs	r3, #1
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	4298      	cmp	r0, r3
 8000814:	d301      	bcc.n	800081a <__clzsi2+0xe>
 8000816:	0c00      	lsrs	r0, r0, #16
 8000818:	3910      	subs	r1, #16
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	4298      	cmp	r0, r3
 800081e:	d301      	bcc.n	8000824 <__clzsi2+0x18>
 8000820:	0a00      	lsrs	r0, r0, #8
 8000822:	3908      	subs	r1, #8
 8000824:	091b      	lsrs	r3, r3, #4
 8000826:	4298      	cmp	r0, r3
 8000828:	d301      	bcc.n	800082e <__clzsi2+0x22>
 800082a:	0900      	lsrs	r0, r0, #4
 800082c:	3904      	subs	r1, #4
 800082e:	a202      	add	r2, pc, #8	@ (adr r2, 8000838 <__clzsi2+0x2c>)
 8000830:	5c10      	ldrb	r0, [r2, r0]
 8000832:	1840      	adds	r0, r0, r1
 8000834:	4770      	bx	lr
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	02020304 	.word	0x02020304
 800083c:	01010101 	.word	0x01010101
	...

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	240c      	movs	r4, #12
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2314      	movs	r3, #20
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f002 fea7 	bl	80035ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <MX_GPIO_Init+0x11c>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x11c>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x11c>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x11c>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b39      	ldr	r3, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x11c>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	02c9      	lsls	r1, r1, #11
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b36      	ldr	r3, [pc, #216]	@ (8000964 <MX_GPIO_Init+0x11c>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	02db      	lsls	r3, r3, #11
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 8000896:	4934      	ldr	r1, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x120>)
 8000898:	2390      	movs	r3, #144	@ 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f9a7 	bl	8001bf2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_GPIO_Init+0x124>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	214a      	movs	r1, #74	@ 0x4a
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 f9a1 	bl	8001bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2212      	movs	r2, #18
 80008b4:	32ff      	adds	r2, #255	@ 0xff
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	193a      	adds	r2, r7, r4
 80008c6:	2390      	movs	r3, #144	@ 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f803 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	4a26      	ldr	r2, [pc, #152]	@ (8000970 <MX_GPIO_Init+0x128>)
 80008d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2203      	movs	r2, #3
 80008dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	2390      	movs	r3, #144	@ 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fff3 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x120>)
 80008f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2201      	movs	r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	193a      	adds	r2, r7, r4
 800090c:	2390      	movs	r3, #144	@ 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 ffe0 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2211      	movs	r2, #17
 800091c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2201      	movs	r2, #1
 8000928:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <MX_GPIO_Init+0x124>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f000 ffd1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	224a      	movs	r2, #74	@ 0x4a
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a06      	ldr	r2, [pc, #24]	@ (800096c <MX_GPIO_Init+0x124>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f000 ffbe 	bl	80018d8 <HAL_GPIO_Init>

}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b009      	add	sp, #36	@ 0x24
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	000018cc 	.word	0x000018cc
 800096c:	48000400 	.word	0x48000400
 8000970:	00008002 	.word	0x00008002

08000974 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_I2C1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_I2C1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_I2C1_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <MX_I2C1_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_I2C1_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_I2C1_Init+0x74>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 f957 	bl	8001c64 <HAL_I2C_Init>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 fdde 	bl	800157a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <MX_I2C1_Init+0x74>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 f84e 	bl	8002a64 <HAL_I2CEx_ConfigAnalogFilter>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 fdd5 	bl	800157a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <MX_I2C1_Init+0x74>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 f891 	bl	8002afc <HAL_I2CEx_ConfigDigitalFilter>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fdcc 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000002c 	.word	0x2000002c
 80009ec:	40005400 	.word	0x40005400
 80009f0:	2000090e 	.word	0x2000090e

080009f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b08b      	sub	sp, #44	@ 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	2414      	movs	r4, #20
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	0018      	movs	r0, r3
 8000a02:	2314      	movs	r3, #20
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f002 fdd0 	bl	80035ac <memset>
  if(i2cHandle->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <HAL_I2C_MspInit+0x94>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d133      	bne.n	8000a7e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	22c0      	movs	r2, #192	@ 0xc0
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2212      	movs	r2, #18
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2204      	movs	r2, #4
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	2390      	movs	r3, #144	@ 0x90
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 ff3b 	bl	80018d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a64:	69da      	ldr	r2, [r3, #28]
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	0389      	lsls	r1, r1, #14
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	61da      	str	r2, [r3, #28]
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_I2C_MspInit+0x98>)
 8000a72:	69da      	ldr	r2, [r3, #28]
 8000a74:	2380      	movs	r3, #128	@ 0x80
 8000a76:	039b      	lsls	r3, r3, #14
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b00b      	add	sp, #44	@ 0x2c
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	0008      	movs	r0, r1
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	1c0a      	adds	r2, r1, #0
 8000aac:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <lis3dh_read_reg+0x2a>
  {
    return -1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	e00f      	b.n	8000ada <lis3dh_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685c      	ldr	r4, [r3, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	68d8      	ldr	r0, [r3, #12]
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	881d      	ldrh	r5, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	230b      	movs	r3, #11
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	7819      	ldrb	r1, [r3, #0]
 8000ad0:	002b      	movs	r3, r5
 8000ad2:	47a0      	blx	r4
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	617b      	str	r3, [r7, #20]

  return ret;
 8000ad8:	697b      	ldr	r3, [r7, #20]
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b006      	add	sp, #24
 8000ae0:	bdb0      	pop	{r4, r5, r7, pc}

08000ae2 <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000ae2:	b5b0      	push	{r4, r5, r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	0008      	movs	r0, r1
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230b      	movs	r3, #11
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	1c02      	adds	r2, r0, #0
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	2308      	movs	r3, #8
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	1c0a      	adds	r2, r1, #0
 8000afe:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <lis3dh_write_reg+0x2a>
  {
    return -1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	e00f      	b.n	8000b2c <lis3dh_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68d8      	ldr	r0, [r3, #12]
 8000b14:	2308      	movs	r3, #8
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	881d      	ldrh	r5, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	002b      	movs	r3, r5
 8000b24:	47a0      	blx	r4
 8000b26:	0003      	movs	r3, r0
 8000b28:	617b      	str	r3, [r7, #20]

  return ret;
 8000b2a:	697b      	ldr	r3, [r7, #20]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b006      	add	sp, #24
 8000b32:	bdb0      	pop	{r4, r5, r7, pc}

08000b34 <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	2200      	movs	r2, #0
 8000b44:	5e9b      	ldrsh	r3, [r3, r2]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe14 	bl	8000774 <__aeabi_i2f>
 8000b4c:	1c03      	adds	r3, r0, #0
 8000b4e:	2183      	movs	r1, #131	@ 0x83
 8000b50:	05c9      	lsls	r1, r1, #23
 8000b52:	1c18      	adds	r0, r3, #0
 8000b54:	f7ff fcee 	bl	8000534 <__aeabi_fdiv>
 8000b58:	1c03      	adds	r3, r0, #0
}
 8000b5a:	1c18      	adds	r0, r3, #0
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <lis3dh_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis3dh_from_lsb_hr_to_celsius(int16_t lsb)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	1dbb      	adds	r3, r7, #6
 8000b6e:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 8000b70:	1dbb      	adds	r3, r7, #6
 8000b72:	2200      	movs	r2, #0
 8000b74:	5e9b      	ldrsh	r3, [r3, r2]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fdfc 	bl	8000774 <__aeabi_i2f>
 8000b7c:	1c03      	adds	r3, r0, #0
 8000b7e:	2185      	movs	r1, #133	@ 0x85
 8000b80:	05c9      	lsls	r1, r1, #23
 8000b82:	1c18      	adds	r0, r3, #0
 8000b84:	f7ff fcd6 	bl	8000534 <__aeabi_fdiv>
 8000b88:	1c03      	adds	r3, r0, #0
 8000b8a:	2181      	movs	r1, #129	@ 0x81
 8000b8c:	05c9      	lsls	r1, r1, #23
 8000b8e:	1c18      	adds	r0, r3, #0
 8000b90:	f7ff fcd0 	bl	8000534 <__aeabi_fdiv>
 8000b94:	1c03      	adds	r3, r0, #0
 8000b96:	4904      	ldr	r1, [pc, #16]	@ (8000ba8 <lis3dh_from_lsb_hr_to_celsius+0x44>)
 8000b98:	1c18      	adds	r0, r3, #0
 8000b9a:	f7ff fb41 	bl	8000220 <__aeabi_fadd>
 8000b9e:	1c03      	adds	r3, r0, #0
}
 8000ba0:	1c18      	adds	r0, r3, #0
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	41c80000 	.word	0x41c80000

08000bac <lis3dh_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temp_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG_AUX,
 8000bb6:	2408      	movs	r4, #8
 8000bb8:	193a      	adds	r2, r7, r4
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2107      	movs	r1, #7
 8000bc0:	f7ff ff66 	bl	8000a90 <lis3dh_read_reg>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux._3da;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	075b      	lsls	r3, r3, #29
 8000bce:	0fdb      	lsrs	r3, r3, #31
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	701a      	strb	r2, [r3, #0]

  return ret;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b005      	add	sp, #20
 8000be0:	bd90      	pop	{r4, r7, pc}

08000be2 <lis3dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_ADC3_L, buff, 2);
 8000bec:	2408      	movs	r4, #8
 8000bee:	193a      	adds	r2, r7, r4
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	210c      	movs	r1, #12
 8000bf6:	f7ff ff4b 	bl	8000a90 <lis3dh_read_reg>
 8000bfa:	0003      	movs	r3, r0
 8000bfc:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	187a      	adds	r2, r7, r1
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	189b      	adds	r3, r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	801a      	strh	r2, [r3, #0]

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b005      	add	sp, #20
 8000c2c:	bd90      	pop	{r4, r7, pc}

08000c2e <lis3dh_aux_adc_set>:
  * @param  val      configure the auxiliary ADC
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_aux_adc_set(const stmdev_ctx_t *ctx, lis3dh_temp_en_t val)
{
 8000c2e:	b590      	push	{r4, r7, lr}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	000a      	movs	r2, r1
 8000c38:	1cfb      	adds	r3, r7, #3
 8000c3a:	701a      	strb	r2, [r3, #0]
  lis3dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_TEMP_CFG_REG,
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	18fa      	adds	r2, r7, r3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	2301      	movs	r3, #1
 8000c44:	211f      	movs	r1, #31
 8000c46:	f7ff ff23 	bl	8000a90 <lis3dh_read_reg>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10a      	bne.n	8000c6a <lis3dh_aux_adc_set+0x3c>
  {
    if (val != LIS3DH_AUX_DISABLE)
 8000c54:	1cfb      	adds	r3, r7, #3
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <lis3dh_aux_adc_set+0x3c>
    {
      /* Required in order to use auxiliary adc */
      ret = lis3dh_block_data_update_set(ctx, PROPERTY_ENABLE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f8fa 	bl	8000e5a <lis3dh_block_data_update_set>
 8000c66:	0003      	movs	r3, r0
 8000c68:	60fb      	str	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d128      	bne.n	8000cc2 <lis3dh_aux_adc_set+0x94>
  {
    temp_cfg_reg.temp_en = ((uint8_t) val & 0x02U) >> 1;
 8000c70:	1cfb      	adds	r3, r7, #3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	1c1a      	adds	r2, r3, #0
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	2408      	movs	r4, #8
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2101      	movs	r1, #1
 8000c84:	400a      	ands	r2, r1
 8000c86:	0190      	lsls	r0, r2, #6
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	2140      	movs	r1, #64	@ 0x40
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	1c11      	adds	r1, r2, #0
 8000c90:	1c02      	adds	r2, r0, #0
 8000c92:	430a      	orrs	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
    temp_cfg_reg.adc_pd  = (uint8_t) val &  0x01U;
 8000c96:	1cfb      	adds	r3, r7, #3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	01d0      	lsls	r0, r2, #7
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	217f      	movs	r1, #127	@ 0x7f
 8000ca8:	400a      	ands	r2, r1
 8000caa:	1c11      	adds	r1, r2, #0
 8000cac:	1c02      	adds	r2, r0, #0
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_TEMP_CFG_REG,
 8000cb2:	193a      	adds	r2, r7, r4
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	211f      	movs	r1, #31
 8000cba:	f7ff ff12 	bl	8000ae2 <lis3dh_write_reg>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b005      	add	sp, #20
 8000cca:	bd90      	pop	{r4, r7, pc}

08000ccc <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	000a      	movs	r2, r1
 8000cd6:	1cfb      	adds	r3, r7, #3
 8000cd8:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8000cda:	2310      	movs	r3, #16
 8000cdc:	18fa      	adds	r2, r7, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	f7ff fed4 	bl	8000a90 <lis3dh_read_reg>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d108      	bne.n	8000d04 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	18fa      	adds	r2, r7, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2123      	movs	r1, #35	@ 0x23
 8000cfc:	f7ff fec8 	bl	8000a90 <lis3dh_read_reg>
 8000d00:	0003      	movs	r3, r0
 8000d02:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d138      	bne.n	8000d7c <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 8000d0a:	1cfb      	adds	r3, r7, #3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10b      	bne.n	8000d2a <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8000d12:	2310      	movs	r3, #16
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	2108      	movs	r1, #8
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	2108      	movs	r1, #8
 8000d26:	430a      	orrs	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d10b      	bne.n	8000d4a <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8000d32:	2310      	movs	r3, #16
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	2108      	movs	r1, #8
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	2108      	movs	r1, #8
 8000d46:	438a      	bics	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 8000d4a:	1cfb      	adds	r3, r7, #3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d10b      	bne.n	8000d6a <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8000d52:	2310      	movs	r3, #16
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	2108      	movs	r1, #8
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	2108      	movs	r1, #8
 8000d66:	438a      	bics	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	18fa      	adds	r2, r7, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	2301      	movs	r3, #1
 8000d72:	2120      	movs	r1, #32
 8000d74:	f7ff feb5 	bl	8000ae2 <lis3dh_write_reg>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d108      	bne.n	8000d94 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000d82:	230c      	movs	r3, #12
 8000d84:	18fa      	adds	r2, r7, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2123      	movs	r1, #35	@ 0x23
 8000d8c:	f7ff fea9 	bl	8000ae2 <lis3dh_write_reg>
 8000d90:	0003      	movs	r3, r0
 8000d92:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000d94:	697b      	ldr	r3, [r7, #20]
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b006      	add	sp, #24
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(const stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	000a      	movs	r2, r1
 8000da8:	1cfb      	adds	r3, r7, #3
 8000daa:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8000dac:	2408      	movs	r4, #8
 8000dae:	193a      	adds	r2, r7, r4
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	2301      	movs	r3, #1
 8000db4:	2120      	movs	r1, #32
 8000db6:	f7ff fe6b 	bl	8000a90 <lis3dh_read_reg>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d115      	bne.n	8000df0 <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8000dc4:	1cfb      	adds	r3, r7, #3
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	220f      	movs	r2, #15
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0110      	lsls	r0, r2, #4
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	1c11      	adds	r1, r2, #0
 8000dda:	1c02      	adds	r2, r0, #0
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8000de0:	193a      	adds	r2, r7, r4
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	2301      	movs	r3, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	f7ff fe7b 	bl	8000ae2 <lis3dh_write_reg>
 8000dec:	0003      	movs	r3, r0
 8000dee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000df0:	68fb      	ldr	r3, [r7, #12]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b005      	add	sp, #20
 8000df8:	bd90      	pop	{r4, r7, pc}

08000dfa <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(const stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8000dfa:	b590      	push	{r4, r7, lr}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	000a      	movs	r2, r1
 8000e04:	1cfb      	adds	r3, r7, #3
 8000e06:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000e08:	2408      	movs	r4, #8
 8000e0a:	193a      	adds	r2, r7, r4
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2123      	movs	r1, #35	@ 0x23
 8000e12:	f7ff fe3d 	bl	8000a90 <lis3dh_read_reg>
 8000e16:	0003      	movs	r3, r0
 8000e18:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d117      	bne.n	8000e50 <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8000e20:	1cfb      	adds	r3, r7, #3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	0110      	lsls	r0, r2, #4
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	2130      	movs	r1, #48	@ 0x30
 8000e36:	438a      	bics	r2, r1
 8000e38:	1c11      	adds	r1, r2, #0
 8000e3a:	1c02      	adds	r2, r0, #0
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000e40:	193a      	adds	r2, r7, r4
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	2301      	movs	r3, #1
 8000e46:	2123      	movs	r1, #35	@ 0x23
 8000e48:	f7ff fe4b 	bl	8000ae2 <lis3dh_write_reg>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b005      	add	sp, #20
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000e5a:	b590      	push	{r4, r7, lr}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	000a      	movs	r2, r1
 8000e64:	1cfb      	adds	r3, r7, #3
 8000e66:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000e68:	2408      	movs	r4, #8
 8000e6a:	193a      	adds	r2, r7, r4
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	2123      	movs	r1, #35	@ 0x23
 8000e72:	f7ff fe0d 	bl	8000a90 <lis3dh_read_reg>
 8000e76:	0003      	movs	r3, r0
 8000e78:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d115      	bne.n	8000eac <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 8000e80:	1cfb      	adds	r3, r7, #3
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	01d0      	lsls	r0, r2, #7
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	217f      	movs	r1, #127	@ 0x7f
 8000e92:	400a      	ands	r2, r1
 8000e94:	1c11      	adds	r1, r2, #0
 8000e96:	1c02      	adds	r2, r0, #0
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8000e9c:	193a      	adds	r2, r7, r4
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2123      	movs	r1, #35	@ 0x23
 8000ea4:	f7ff fe1d 	bl	8000ae2 <lis3dh_write_reg>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000eac:	68fb      	ldr	r3, [r7, #12]
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b005      	add	sp, #20
 8000eb4:	bd90      	pop	{r4, r7, pc}

08000eb6 <lis3dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8000eb6:	b590      	push	{r4, r7, lr}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *)&status_reg, 1);
 8000ec0:	2408      	movs	r4, #8
 8000ec2:	193a      	adds	r2, r7, r4
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	2127      	movs	r1, #39	@ 0x27
 8000eca:	f7ff fde1 	bl	8000a90 <lis3dh_read_reg>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	60fb      	str	r3, [r7, #12]
  *val = status_reg.zyxda;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	071b      	lsls	r3, r3, #28
 8000ed8:	0fdb      	lsrs	r3, r3, #31
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	001a      	movs	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	701a      	strb	r2, [r3, #0]

  return ret;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b005      	add	sp, #20
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8000ef6:	240c      	movs	r4, #12
 8000ef8:	193a      	adds	r2, r7, r4
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	2306      	movs	r3, #6
 8000efe:	2128      	movs	r1, #40	@ 0x28
 8000f00:	f7ff fdc6 	bl	8000a90 <lis3dh_read_reg>
 8000f04:	0003      	movs	r3, r0
 8000f06:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000f08:	0021      	movs	r1, r4
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	5e9b      	ldrsh	r3, [r3, r2]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	187a      	adds	r2, r7, r1
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	189b      	adds	r3, r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	78da      	ldrb	r2, [r3, #3]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3302      	adds	r3, #2
 8000f36:	b212      	sxth	r2, r2
 8000f38:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	5e9b      	ldrsh	r3, [r3, r2]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	187a      	adds	r2, r7, r1
 8000f4a:	7892      	ldrb	r2, [r2, #2]
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	b212      	sxth	r2, r2
 8000f56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	795a      	ldrb	r2, [r3, #5]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	b212      	sxth	r2, r2
 8000f62:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3304      	adds	r3, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	5e9b      	ldrsh	r3, [r3, r2]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	187a      	adds	r2, r7, r1
 8000f74:	7912      	ldrb	r2, [r2, #4]
 8000f76:	189b      	adds	r3, r3, r2
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	b212      	sxth	r2, r2
 8000f80:	801a      	strh	r2, [r3, #0]

  return ret;
 8000f82:	697b      	ldr	r3, [r7, #20]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b007      	add	sp, #28
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	f7ff fd77 	bl	8000a90 <lis3dh_read_reg>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	60fb      	str	r3, [r7, #12]

  return ret;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b004      	add	sp, #16
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <platform_write>:
static float temperature_degC;
static uint8_t whoamI;
//static uint8_t tx_buffer[1000];

/** Please note that is MANDATORY: return 0 -> no Error.**/
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	0008      	movs	r0, r1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	240b      	movs	r4, #11
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	1c02      	adds	r2, r0, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	2508      	movs	r5, #8
 8000fc8:	197b      	adds	r3, r7, r5
 8000fca:	1c0a      	adds	r2, r1, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8000fce:	0020      	movs	r0, r4
 8000fd0:	183b      	adds	r3, r7, r0
 8000fd2:	183a      	adds	r2, r7, r0
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	4249      	negs	r1, r1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, 0x18<<1, reg, 1, (uint8_t*) bufp, len, 1000); //define 8bit
 8000fde:	183b      	adds	r3, r7, r0
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	23fa      	movs	r3, #250	@ 0xfa
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	197b      	adds	r3, r7, r5
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2130      	movs	r1, #48	@ 0x30
 8000ffa:	f000 fed9 	bl	8001db0 <HAL_I2C_Mem_Write>
}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bdb0      	pop	{r4, r5, r7, pc}

08001008 <platform_read>:

int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af04      	add	r7, sp, #16
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	0008      	movs	r0, r1
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	0019      	movs	r1, r3
 8001016:	240b      	movs	r4, #11
 8001018:	193b      	adds	r3, r7, r4
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	2508      	movs	r5, #8
 8001020:	197b      	adds	r3, r7, r5
 8001022:	1c0a      	adds	r2, r1, #0
 8001024:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8001026:	0020      	movs	r0, r4
 8001028:	183b      	adds	r3, r7, r0
 800102a:	183a      	adds	r2, r7, r0
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4249      	negs	r1, r1
 8001032:	430a      	orrs	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
	int32_t ret = HAL_I2C_Mem_Read(handle, 0x18<<1, reg, 1, bufp, len, 1000);
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b29a      	uxth	r2, r3
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	23fa      	movs	r3, #250	@ 0xfa
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	197b      	adds	r3, r7, r5
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2130      	movs	r1, #48	@ 0x30
 8001052:	f000 ffdb 	bl	800200c <HAL_I2C_Mem_Read>
 8001056:	0003      	movs	r3, r0
 8001058:	617b      	str	r3, [r7, #20]
	//HAL_I2C_Mem_Read(handle, 0x18, reg, 1, bufp, len, 1000);
	return ret;
 800105a:	697b      	ldr	r3, [r7, #20]
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b006      	add	sp, #24
 8001062:	bdb0      	pop	{r4, r5, r7, pc}

08001064 <platform_delay>:

/** Optional (may be required by driver) **/
void platform_delay(uint32_t millisec) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fb5a 	bl	8001728 <HAL_Delay>
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <lis3dh_read_data_polling>:


void lis3dh_read_data_polling(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8001082:	2408      	movs	r4, #8
 8001084:	193b      	adds	r3, r7, r4
 8001086:	4a42      	ldr	r2, [pc, #264]	@ (8001190 <lis3dh_read_data_polling+0x114>)
 8001088:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	4a41      	ldr	r2, [pc, #260]	@ (8001194 <lis3dh_read_data_polling+0x118>)
 800108e:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	4a41      	ldr	r2, [pc, #260]	@ (8001198 <lis3dh_read_data_polling+0x11c>)
 8001094:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	4a40      	ldr	r2, [pc, #256]	@ (800119c <lis3dh_read_data_polling+0x120>)
 800109a:	60da      	str	r2, [r3, #12]
  /* Wait boot time and initialize platform specific hardware */
  //platform_init();
  /* Wait sensor boot time */
  platform_delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff ffe1 	bl	8001064 <platform_delay>
  /* Check device ID */
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 80010a2:	4a3f      	ldr	r2, [pc, #252]	@ (80011a0 <lis3dh_read_data_polling+0x124>)
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ff6f 	bl	8000f8c <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID) {
 80010ae:	4b3c      	ldr	r3, [pc, #240]	@ (80011a0 <lis3dh_read_data_polling+0x124>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b33      	cmp	r3, #51	@ 0x33
 80010b4:	d001      	beq.n	80010ba <lis3dh_read_data_polling+0x3e>
    while (1) {
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	e7fd      	b.n	80010b6 <lis3dh_read_data_polling+0x3a>
      /* manage here device not found */
    }
  }

  /* Enable Block Data Update. */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80010ba:	2408      	movs	r4, #8
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2101      	movs	r1, #1
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff feca 	bl	8000e5a <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_1Hz);
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	2101      	movs	r1, #1
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff fe67 	bl	8000d9e <lis3dh_data_rate_set>
  /* Set full scale to 2g. */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2100      	movs	r1, #0
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fe90 	bl	8000dfa <lis3dh_full_scale_set>
  /* Enable temperature sensor. */
  lis3dh_aux_adc_set(&dev_ctx, LIS3DH_AUX_ON_TEMPERATURE);
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2103      	movs	r1, #3
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff fda5 	bl	8000c2e <lis3dh_aux_adc_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2100      	movs	r1, #0
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fdef 	bl	8000ccc <lis3dh_operating_mode_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    lis3dh_reg_t reg;
    /* Read output only if new value available */
    lis3dh_xl_data_ready_get(&dev_ctx, &reg.byte);
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	2408      	movs	r4, #8
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff fedd 	bl	8000eb6 <lis3dh_xl_data_ready_get>

    if (reg.byte) {
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d026      	beq.n	8001152 <lis3dh_read_data_polling+0xd6>
      /* Read accelerometer data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <lis3dh_read_data_polling+0x128>)
 8001106:	2206      	movs	r2, #6
 8001108:	2100      	movs	r1, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f002 fa4e 	bl	80035ac <memset>
      lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001110:	4a24      	ldr	r2, [pc, #144]	@ (80011a4 <lis3dh_read_data_polling+0x128>)
 8001112:	193b      	adds	r3, r7, r4
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff fee8 	bl	8000eec <lis3dh_acceleration_raw_get>
      acceleration_mg[0] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 800111c:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <lis3dh_read_data_polling+0x128>)
 800111e:	2200      	movs	r2, #0
 8001120:	5e9b      	ldrsh	r3, [r3, r2]
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fd06 	bl	8000b34 <lis3dh_from_fs2_hr_to_mg>
 8001128:	1c02      	adds	r2, r0, #0
      acceleration_mg[0] =
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <lis3dh_read_data_polling+0x12c>)
 800112c:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <lis3dh_read_data_polling+0x128>)
 8001130:	2202      	movs	r2, #2
 8001132:	5e9b      	ldrsh	r3, [r3, r2]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fcfd 	bl	8000b34 <lis3dh_from_fs2_hr_to_mg>
 800113a:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <lis3dh_read_data_polling+0x12c>)
 800113e:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <lis3dh_read_data_polling+0x128>)
 8001142:	2204      	movs	r2, #4
 8001144:	5e9b      	ldrsh	r3, [r3, r2]
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff fcf4 	bl	8000b34 <lis3dh_from_fs2_hr_to_mg>
 800114c:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <lis3dh_read_data_polling+0x12c>)
 8001150:	609a      	str	r2, [r3, #8]
      //sprintf((char *)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
      //tx_com(tx_buffer, strlen((char const *)tx_buffer));
    }

    lis3dh_temp_data_ready_get(&dev_ctx, &reg.byte);
 8001152:	1d3a      	adds	r2, r7, #4
 8001154:	2408      	movs	r4, #8
 8001156:	193b      	adds	r3, r7, r4
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff fd26 	bl	8000bac <lis3dh_temp_data_ready_get>

    if (reg.byte) {
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0c2      	beq.n	80010ee <lis3dh_read_data_polling+0x72>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <lis3dh_read_data_polling+0x130>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
      lis3dh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <lis3dh_read_data_polling+0x130>)
 8001170:	193b      	adds	r3, r7, r4
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fd34 	bl	8000be2 <lis3dh_temperature_raw_get>
      temperature_degC = lis3dh_from_lsb_hr_to_celsius(data_raw_temperature);
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <lis3dh_read_data_polling+0x130>)
 800117c:	2200      	movs	r2, #0
 800117e:	5e9b      	ldrsh	r3, [r3, r2]
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fcef 	bl	8000b64 <lis3dh_from_lsb_hr_to_celsius>
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <lis3dh_read_data_polling+0x134>)
 800118a:	601a      	str	r2, [r3, #0]
  while (1) {
 800118c:	e7af      	b.n	80010ee <lis3dh_read_data_polling+0x72>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	08000fb1 	.word	0x08000fb1
 8001194:	08001009 	.word	0x08001009
 8001198:	08001065 	.word	0x08001065
 800119c:	2000002c 	.word	0x2000002c
 80011a0:	20000098 	.word	0x20000098
 80011a4:	20000080 	.word	0x20000080
 80011a8:	20000088 	.word	0x20000088
 80011ac:	20000086 	.word	0x20000086
 80011b0:	20000094 	.word	0x20000094

080011b4 <theCode>:
	#endif
}
*/
int debounce = 250;

int theCode(int N1, int N2, int N3, int N4) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
    // Check if the length of the string is equal to the integer
    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) != N1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != N2)
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	011a      	lsls	r2, r3, #4
 80011c6:	2390      	movs	r3, #144	@ 0x90
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f000 fcf3 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80011d2:	0003      	movs	r3, r0
 80011d4:	001a      	movs	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4293      	cmp	r3, r2
 80011da:	d021      	beq.n	8001220 <theCode+0x6c>
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <theCode+0x78>)
 80011de:	2140      	movs	r1, #64	@ 0x40
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 fce9 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80011e6:	0003      	movs	r3, r0
 80011e8:	001a      	movs	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d017      	beq.n	8001220 <theCode+0x6c>
    	&& (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) != N3) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) != N4)) {
 80011f0:	2390      	movs	r3, #144	@ 0x90
 80011f2:	05db      	lsls	r3, r3, #23
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0018      	movs	r0, r3
 80011f8:	f000 fcde 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80011fc:	0003      	movs	r3, r0
 80011fe:	001a      	movs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4293      	cmp	r3, r2
 8001204:	d00c      	beq.n	8001220 <theCode+0x6c>
 8001206:	2390      	movs	r3, #144	@ 0x90
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	2140      	movs	r1, #64	@ 0x40
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fcd3 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8001212:	0003      	movs	r3, r0
 8001214:	001a      	movs	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4293      	cmp	r3, r2
 800121a:	d001      	beq.n	8001220 <theCode+0x6c>
        return 1;
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <theCode+0x6e>
    } else {
        return 0;
 8001220:	2300      	movs	r3, #0
    }
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	48000400 	.word	0x48000400

08001230 <allState>:


void allState(int state) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	2390      	movs	r3, #144	@ 0x90
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	2104      	movs	r1, #4
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fcd5 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, state);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	2390      	movs	r3, #144	@ 0x90
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	2140      	movs	r1, #64	@ 0x40
 8001252:	0018      	movs	r0, r3
 8001254:	f000 fccd 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, state);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	2390      	movs	r3, #144	@ 0x90
 800125e:	05db      	lsls	r3, r3, #23
 8001260:	2180      	movs	r1, #128	@ 0x80
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fcc5 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	0119      	lsls	r1, r3, #4
 8001270:	2390      	movs	r3, #144	@ 0x90
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	0018      	movs	r0, r3
 8001276:	f000 fcbc 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, state);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	0159      	lsls	r1, r3, #5
 8001282:	2390      	movs	r3, #144	@ 0x90
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	0018      	movs	r0, r3
 8001288:	f000 fcb3 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, state);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <allState+0x80>)
 8001292:	001a      	movs	r2, r3
 8001294:	2102      	movs	r1, #2
 8001296:	f000 fcac 	bl	8001bf2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <allState+0x80>)
 80012a0:	001a      	movs	r2, r3
 80012a2:	2140      	movs	r1, #64	@ 0x40
 80012a4:	f000 fca5 	bl	8001bf2 <HAL_GPIO_WritePin>
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b002      	add	sp, #8
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	48000400 	.word	0x48000400

080012b4 <twiScan>:

void twiScan(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	  for (uint8_t i = 0; i < 128; i++) {
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e016      	b.n	80012f0 <twiScan+0x3c>
		  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	18db      	adds	r3, r3, r3
 80012ca:	b299      	uxth	r1, r3
 80012cc:	480d      	ldr	r0, [pc, #52]	@ (8001304 <twiScan+0x50>)
 80012ce:	2305      	movs	r3, #5
 80012d0:	2203      	movs	r2, #3
 80012d2:	f000 ffcf 	bl	8002274 <HAL_I2C_IsDeviceReady>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d105      	bne.n	80012e6 <twiScan+0x32>
			  // We got an ack
			  int address = i;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	603b      	str	r3, [r7, #0]
			  allState(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffa5 	bl	8001230 <allState>
	  for (uint8_t i = 0; i < 128; i++) {
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	3201      	adds	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dae3      	bge.n	80012c2 <twiScan+0xe>
		  }
	  }

}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000002c 	.word	0x2000002c

08001308 <buttonsNlights>:

void buttonsNlights() {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	005a      	lsls	r2, r3, #1
 8001310:	2390      	movs	r3, #144	@ 0x90
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	0011      	movs	r1, r2
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fc4e 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d10c      	bne.n	800133a <buttonsNlights+0x32>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	011a      	lsls	r2, r3, #4
 8001324:	2390      	movs	r3, #144	@ 0x90
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fc7e 	bl	8001c2c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <buttonsNlights+0xa4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f000 f9f7 	bl	8001728 <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <buttonsNlights+0xa8>)
 800133c:	2110      	movs	r1, #16
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fc3a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d109      	bne.n	800135c <buttonsNlights+0x54>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <buttonsNlights+0xa8>)
 800134a:	2140      	movs	r1, #64	@ 0x40
 800134c:	0018      	movs	r0, r3
 800134e:	f000 fc6d 	bl	8001c2c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <buttonsNlights+0xa4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f000 f9e6 	bl	8001728 <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <buttonsNlights+0xa8>)
 800135e:	2101      	movs	r1, #1
 8001360:	0018      	movs	r0, r3
 8001362:	f000 fc29 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d10a      	bne.n	8001380 <buttonsNlights+0x78>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800136a:	2390      	movs	r3, #144	@ 0x90
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2180      	movs	r1, #128	@ 0x80
 8001370:	0018      	movs	r0, r3
 8001372:	f000 fc5b 	bl	8001c2c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <buttonsNlights+0xa4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f9d4 	bl	8001728 <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001380:	2390      	movs	r3, #144	@ 0x90
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2110      	movs	r1, #16
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fc16 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d10a      	bne.n	80013a6 <buttonsNlights+0x9e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001390:	2390      	movs	r3, #144	@ 0x90
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	2140      	movs	r1, #64	@ 0x40
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fc48 	bl	8001c2c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <buttonsNlights+0xa4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 f9c1 	bl	8001728 <HAL_Delay>
	}
}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	48000400 	.word	0x48000400

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 f951 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f885 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f7ff fa41 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013c6:	f7ff fad5 	bl	8000974 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  allState(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff30 	bl	8001230 <allState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  twiScan();
 80013d0:	f7ff ff70 	bl	80012b4 <twiScan>
	  buttonsNlights();
 80013d4:	f7ff ff98 	bl	8001308 <buttonsNlights>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) // Assuming active low
 80013d8:	2390      	movs	r3, #144	@ 0x90
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	2101      	movs	r1, #1
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 fbea 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d1f3      	bne.n	80013d0 <main+0x1c>
	  {
		  if (theCode(1,0,1,0)) //button 1, button 2, button 3, button 4
 80013e8:	2300      	movs	r3, #0
 80013ea:	2201      	movs	r2, #1
 80013ec:	2100      	movs	r1, #0
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fee0 	bl	80011b4 <theCode>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d01c      	beq.n	8001432 <main+0x7e>
		  {
			  int time = 1; // in seconds
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
			  int q = time * 5;
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	0013      	movs	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	189b      	adds	r3, r3, r2
 8001404:	603b      	str	r3, [r7, #0]
			  for (int i = 0 ; i <= q; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e00a      	b.n	8001422 <main+0x6e>
			  {
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <main+0x114>)
 800140e:	2102      	movs	r1, #2
 8001410:	0018      	movs	r0, r3
 8001412:	f000 fc0b 	bl	8001c2c <HAL_GPIO_TogglePin>
				  HAL_Delay(200);
 8001416:	20c8      	movs	r0, #200	@ 0xc8
 8001418:	f000 f986 	bl	8001728 <HAL_Delay>
			  for (int i = 0 ; i <= q; i++)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	ddf0      	ble.n	800140c <main+0x58>
			  }
			  allState(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff00 	bl	8001230 <allState>
 8001430:	e7ce      	b.n	80013d0 <main+0x1c>
		  }
			  else
			  {
				  allState(0);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fefc 	bl	8001230 <allState>
				  HAL_Delay(100);
 8001438:	2064      	movs	r0, #100	@ 0x64
 800143a:	f000 f975 	bl	8001728 <HAL_Delay>
				  allState(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff fef6 	bl	8001230 <allState>
				  //BeepX(2,1);
				  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
				  //HAL_Delay(3);
				  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
				  lis3dh_read_data_polling();
 8001444:	f7ff fe1a 	bl	800107c <lis3dh_read_data_polling>
				  int temperature_degC;
				  if (temperature_degC > 23) {
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b17      	cmp	r3, #23
 800144c:	dd0d      	ble.n	800146a <main+0xb6>
					  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	011a      	lsls	r2, r3, #4
 8001452:	2390      	movs	r3, #144	@ 0x90
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fbe7 	bl	8001c2c <HAL_GPIO_TogglePin>
					  HAL_Delay(500);
 800145e:	23fa      	movs	r3, #250	@ 0xfa
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f960 	bl	8001728 <HAL_Delay>
 8001468:	e02a      	b.n	80014c0 <main+0x10c>
				  } else if (temperature_degC > 22) {
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b16      	cmp	r3, #22
 800146e:	dd0a      	ble.n	8001486 <main+0xd2>
					  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <main+0x114>)
 8001472:	2140      	movs	r1, #64	@ 0x40
 8001474:	0018      	movs	r0, r3
 8001476:	f000 fbd9 	bl	8001c2c <HAL_GPIO_TogglePin>
					  HAL_Delay(500);
 800147a:	23fa      	movs	r3, #250	@ 0xfa
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f952 	bl	8001728 <HAL_Delay>
 8001484:	e01c      	b.n	80014c0 <main+0x10c>
				  } else if (temperature_degC > 21) {
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b15      	cmp	r3, #21
 800148a:	dd0b      	ble.n	80014a4 <main+0xf0>
					  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800148c:	2390      	movs	r3, #144	@ 0x90
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	2180      	movs	r1, #128	@ 0x80
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fbca 	bl	8001c2c <HAL_GPIO_TogglePin>
					  HAL_Delay(500);
 8001498:	23fa      	movs	r3, #250	@ 0xfa
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	0018      	movs	r0, r3
 800149e:	f000 f943 	bl	8001728 <HAL_Delay>
 80014a2:	e00d      	b.n	80014c0 <main+0x10c>
				  } else if (temperature_degC < 21) {
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b14      	cmp	r3, #20
 80014a8:	dc0a      	bgt.n	80014c0 <main+0x10c>
					  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80014aa:	2390      	movs	r3, #144	@ 0x90
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	2140      	movs	r1, #64	@ 0x40
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 fbbb 	bl	8001c2c <HAL_GPIO_TogglePin>
					  HAL_Delay(500);
 80014b6:	23fa      	movs	r3, #250	@ 0xfa
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 f934 	bl	8001728 <HAL_Delay>
				  }
				  allState(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff feb5 	bl	8001230 <allState>
	  twiScan();
 80014c6:	e783      	b.n	80013d0 <main+0x1c>
 80014c8:	48000400 	.word	0x48000400

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b095      	sub	sp, #84	@ 0x54
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	2420      	movs	r4, #32
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	0018      	movs	r0, r3
 80014d8:	2330      	movs	r3, #48	@ 0x30
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f002 f865 	bl	80035ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e2:	2310      	movs	r3, #16
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	0018      	movs	r0, r3
 80014e8:	2310      	movs	r3, #16
 80014ea:	001a      	movs	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	f002 f85d 	bl	80035ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f2:	003b      	movs	r3, r7
 80014f4:	0018      	movs	r0, r3
 80014f6:	2310      	movs	r3, #16
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f002 f856 	bl	80035ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	0021      	movs	r1, r4
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2201      	movs	r2, #1
 800150c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2210      	movs	r2, #16
 8001512:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151a:	187b      	adds	r3, r7, r1
 800151c:	0018      	movs	r0, r3
 800151e:	f001 fb39 	bl	8002b94 <HAL_RCC_OscConfig>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001526:	f000 f828 	bl	800157a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	2110      	movs	r1, #16
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2207      	movs	r2, #7
 8001530:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2100      	movs	r1, #0
 8001548:	0018      	movs	r0, r3
 800154a:	f001 fe3d 	bl	80031c8 <HAL_RCC_ClockConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001552:	f000 f812 	bl	800157a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001556:	003b      	movs	r3, r7
 8001558:	2220      	movs	r2, #32
 800155a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800155c:	003b      	movs	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001562:	003b      	movs	r3, r7
 8001564:	0018      	movs	r0, r3
 8001566:	f001 ff53 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800156e:	f000 f804 	bl	800157a <Error_Handler>
  }
}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b015      	add	sp, #84	@ 0x54
 8001578:	bd90      	pop	{r4, r7, pc}

0800157a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157e:	b672      	cpsid	i
}
 8001580:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	e7fd      	b.n	8001582 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_MspInit+0x44>)
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_MspInit+0x44>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_MspInit+0x44>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x44>)
 80015a8:	69da      	ldr	r2, [r3, #28]
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_MspInit+0x44>)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	430a      	orrs	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_MspInit+0x44>)
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	055b      	lsls	r3, r3, #21
 80015bc:	4013      	ands	r3, r2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	46c0      	nop			@ (mov r8, r8)
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015e4:	46c0      	nop			@ (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f87a 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001610:	f7ff fff7 	bl	8001602 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <LoopForever+0x6>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	@ (800164c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <LoopForever+0xe>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	@ (8001658 <LoopForever+0x16>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163a:	f001 ffbf 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff feb9 	bl	80013b4 <main>

08001642 <LoopForever>:

LoopForever:
    b LoopForever
 8001642:	e7fe      	b.n	8001642 <LoopForever>
  ldr   r0, =_estack
 8001644:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001650:	080036d0 	.word	0x080036d0
  ldr r2, =_sbss
 8001654:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001658:	200000a0 	.word	0x200000a0

0800165c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_IRQHandler>
	...

08001660 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <HAL_Init+0x24>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_Init+0x24>)
 800166a:	2110      	movs	r1, #16
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f809 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001676:	f7ff ff87 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HAL_InitTick+0x5c>)
 8001692:	681c      	ldr	r4, [r3, #0]
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_InitTick+0x60>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	0019      	movs	r1, r3
 800169a:	23fa      	movs	r3, #250	@ 0xfa
 800169c:	0098      	lsls	r0, r3, #2
 800169e:	f7fe fd33 	bl	8000108 <__udivsi3>
 80016a2:	0003      	movs	r3, r0
 80016a4:	0019      	movs	r1, r3
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7fe fd2e 	bl	8000108 <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 f905 	bl	80018be <HAL_SYSTICK_Config>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00f      	b.n	80016dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d80b      	bhi.n	80016da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	2301      	movs	r3, #1
 80016c6:	425b      	negs	r3, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 f8e2 	bl	8001894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_InitTick+0x64>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b003      	add	sp, #12
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	20000004 	.word	0x20000004
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	20000008 	.word	0x20000008

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	18d2      	adds	r2, r2, r3
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_IncTick+0x20>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	2000000c 	.word	0x2000000c
 8001710:	2000009c 	.word	0x2000009c

08001714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	@ (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	2000009c 	.word	0x2000009c

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fff0 	bl	8001714 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3301      	adds	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	189b      	adds	r3, r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	f7ff ffe0 	bl	8001714 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b004      	add	sp, #16
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	2000000c 	.word	0x2000000c

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b7f      	cmp	r3, #127	@ 0x7f
 8001784:	d828      	bhi.n	80017d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001786:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <__NVIC_SetPriority+0xd4>)
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	33c0      	adds	r3, #192	@ 0xc0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	589b      	ldr	r3, [r3, r2]
 8001796:	1dfa      	adds	r2, r7, #7
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	0011      	movs	r1, r2
 800179c:	2203      	movs	r2, #3
 800179e:	400a      	ands	r2, r1
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	21ff      	movs	r1, #255	@ 0xff
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	43d2      	mvns	r2, r2
 80017aa:	401a      	ands	r2, r3
 80017ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	22ff      	movs	r2, #255	@ 0xff
 80017b4:	401a      	ands	r2, r3
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	0018      	movs	r0, r3
 80017bc:	2303      	movs	r3, #3
 80017be:	4003      	ands	r3, r0
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	481f      	ldr	r0, [pc, #124]	@ (8001844 <__NVIC_SetPriority+0xd4>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	430a      	orrs	r2, r1
 80017d0:	33c0      	adds	r3, #192	@ 0xc0
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017d6:	e031      	b.n	800183c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <__NVIC_SetPriority+0xd8>)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	0019      	movs	r1, r3
 80017e0:	230f      	movs	r3, #15
 80017e2:	400b      	ands	r3, r1
 80017e4:	3b08      	subs	r3, #8
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3306      	adds	r3, #6
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	18d3      	adds	r3, r2, r3
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1dfa      	adds	r2, r7, #7
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	0011      	movs	r1, r2
 80017f8:	2203      	movs	r2, #3
 80017fa:	400a      	ands	r2, r1
 80017fc:	00d2      	lsls	r2, r2, #3
 80017fe:	21ff      	movs	r1, #255	@ 0xff
 8001800:	4091      	lsls	r1, r2
 8001802:	000a      	movs	r2, r1
 8001804:	43d2      	mvns	r2, r2
 8001806:	401a      	ands	r2, r3
 8001808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	22ff      	movs	r2, #255	@ 0xff
 8001810:	401a      	ands	r2, r3
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0018      	movs	r0, r3
 8001818:	2303      	movs	r3, #3
 800181a:	4003      	ands	r3, r0
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4809      	ldr	r0, [pc, #36]	@ (8001848 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	001c      	movs	r4, r3
 8001828:	230f      	movs	r3, #15
 800182a:	4023      	ands	r3, r4
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	430a      	orrs	r2, r1
 8001832:	3306      	adds	r3, #6
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	18c3      	adds	r3, r0, r3
 8001838:	3304      	adds	r3, #4
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b003      	add	sp, #12
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	045b      	lsls	r3, r3, #17
 800185c:	429a      	cmp	r2, r3
 800185e:	d301      	bcc.n	8001864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001860:	2301      	movs	r3, #1
 8001862:	e010      	b.n	8001886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <SysTick_Config+0x44>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	3a01      	subs	r2, #1
 800186a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186c:	2301      	movs	r3, #1
 800186e:	425b      	negs	r3, r3
 8001870:	2103      	movs	r1, #3
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff7c 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <SysTick_Config+0x44>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <SysTick_Config+0x44>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	210f      	movs	r1, #15
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	1c02      	adds	r2, r0, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff ffbf 	bl	800184c <SysTick_Config>
 80018ce:	0003      	movs	r3, r0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e14f      	b.n	8001b88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4091      	lsls	r1, r2
 80018f2:	000a      	movs	r2, r1
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <HAL_GPIO_Init+0x28>
 80018fe:	e140      	b.n	8001b82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	4013      	ands	r3, r2
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001914:	2b02      	cmp	r3, #2
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	2201      	movs	r2, #1
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	4013      	ands	r3, r2
 8001982:	2b03      	cmp	r3, #3
 8001984:	d017      	beq.n	80019b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d123      	bne.n	8001a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	58d3      	ldr	r3, [r2, r3]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2107      	movs	r1, #7
 80019ee:	400b      	ands	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	23c0      	movs	r3, #192	@ 0xc0
 8001a44:	029b      	lsls	r3, r3, #10
 8001a46:	4013      	ands	r3, r2
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x174>
 8001a4a:	e09a      	b.n	8001b82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4c:	4b54      	ldr	r3, [pc, #336]	@ (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	4b53      	ldr	r3, [pc, #332]	@ (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	619a      	str	r2, [r3, #24]
 8001a58:	4b51      	ldr	r3, [pc, #324]	@ (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x2cc>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	589b      	ldr	r3, [r3, r2]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	43da      	mvns	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	2390      	movs	r3, #144	@ 0x90
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x1e2>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a44      	ldr	r2, [pc, #272]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x1de>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a43      	ldr	r2, [pc, #268]	@ (8001bac <HAL_GPIO_Init+0x2d4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x1da>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a42      	ldr	r2, [pc, #264]	@ (8001bb0 <HAL_GPIO_Init+0x2d8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x1d6>
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001aba:	2300      	movs	r3, #0
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	2103      	movs	r1, #3
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	@ (8001ba4 <HAL_GPIO_Init+0x2cc>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	035b      	lsls	r3, r3, #13
 8001af2:	4013      	ands	r3, r2
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001afe:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	039b      	lsls	r3, r3, #14
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b28:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	029b      	lsls	r3, r3, #10
 8001b46:	4013      	ands	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	025b      	lsls	r3, r3, #9
 8001b70:	4013      	ands	r3, r2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_GPIO_Init+0x2dc>)
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	1e13      	subs	r3, r2, #0
 8001b92:	d000      	beq.n	8001b96 <HAL_GPIO_Init+0x2be>
 8001b94:	e6a8      	b.n	80018e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	1cba      	adds	r2, r7, #2
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
  }
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	0008      	movs	r0, r1
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	1cbb      	adds	r3, r7, #2
 8001c00:	1c02      	adds	r2, r0, #0
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	1c7b      	adds	r3, r7, #1
 8001c06:	1c0a      	adds	r2, r1, #0
 8001c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0a:	1c7b      	adds	r3, r7, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c12:	1cbb      	adds	r3, r7, #2
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c1a:	e003      	b.n	8001c24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	000a      	movs	r2, r1
 8001c36:	1cbb      	adds	r3, r7, #2
 8001c38:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c40:	1cbb      	adds	r3, r7, #2
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	1cb9      	adds	r1, r7, #2
 8001c50:	8809      	ldrh	r1, [r1, #0]
 8001c52:	400b      	ands	r3, r1
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b004      	add	sp, #16
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e08f      	b.n	8001d96 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2241      	movs	r2, #65	@ 0x41
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7fe feb1 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2241      	movs	r2, #65	@ 0x41
 8001c96:	2124      	movs	r1, #36	@ 0x24
 8001c98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	493b      	ldr	r1, [pc, #236]	@ (8001da0 <HAL_I2C_Init+0x13c>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4938      	ldr	r1, [pc, #224]	@ (8001da4 <HAL_I2C_Init+0x140>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0209      	lsls	r1, r1, #8
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e007      	b.n	8001cf2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2184      	movs	r1, #132	@ 0x84
 8001cec:	0209      	lsls	r1, r1, #8
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d109      	bne.n	8001d0e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	0109      	lsls	r1, r1, #4
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	e007      	b.n	8001d1e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_I2C_Init+0x144>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4920      	ldr	r1, [pc, #128]	@ (8001dac <HAL_I2C_Init+0x148>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	491a      	ldr	r1, [pc, #104]	@ (8001da4 <HAL_I2C_Init+0x140>)
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69d9      	ldr	r1, [r3, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2101      	movs	r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2241      	movs	r2, #65	@ 0x41
 8001d82:	2120      	movs	r1, #32
 8001d84:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2242      	movs	r2, #66	@ 0x42
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	f0ffffff 	.word	0xf0ffffff
 8001da4:	ffff7fff 	.word	0xffff7fff
 8001da8:	fffff7ff 	.word	0xfffff7ff
 8001dac:	02008000 	.word	0x02008000

08001db0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	000c      	movs	r4, r1
 8001dba:	0010      	movs	r0, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	1c22      	adds	r2, r4, #0
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	1dbb      	adds	r3, r7, #6
 8001dd0:	1c0a      	adds	r2, r1, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2241      	movs	r2, #65	@ 0x41
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d000      	beq.n	8001de2 <HAL_I2C_Mem_Write+0x32>
 8001de0:	e10c      	b.n	8001ffc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_I2C_Mem_Write+0x42>
 8001de8:	232c      	movs	r3, #44	@ 0x2c
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0ff      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Mem_Write+0x5c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0f8      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e14:	f7ff fc7e 	bl	8001714 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	0219      	lsls	r1, r3, #8
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2319      	movs	r3, #25
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f000 fc07 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e3      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2241      	movs	r2, #65	@ 0x41
 8001e3a:	2121      	movs	r1, #33	@ 0x21
 8001e3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2242      	movs	r2, #66	@ 0x42
 8001e42:	2140      	movs	r1, #64	@ 0x40
 8001e44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	222c      	movs	r2, #44	@ 0x2c
 8001e56:	18ba      	adds	r2, r7, r2
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e62:	1dbb      	adds	r3, r7, #6
 8001e64:	881c      	ldrh	r4, [r3, #0]
 8001e66:	2308      	movs	r3, #8
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	0023      	movs	r3, r4
 8001e7e:	f000 faf5 	bl	800246c <I2C_RequestMemoryWrite>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2240      	movs	r2, #64	@ 0x40
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0b5      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2bff      	cmp	r3, #255	@ 0xff
 8001e9a:	d911      	bls.n	8001ec0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	22ff      	movs	r2, #255	@ 0xff
 8001ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	045c      	lsls	r4, r3, #17
 8001eac:	230a      	movs	r3, #10
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	8819      	ldrh	r1, [r3, #0]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	0023      	movs	r3, r4
 8001eba:	f000 fd99 	bl	80029f0 <I2C_TransferConfig>
 8001ebe:	e012      	b.n	8001ee6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	049c      	lsls	r4, r3, #18
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	8819      	ldrh	r1, [r3, #0]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	0023      	movs	r3, r4
 8001ee2:	f000 fd85 	bl	80029f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 fbfd 	bl	80026ec <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e081      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03a      	beq.n	8001faa <HAL_I2C_Mem_Write+0x1fa>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d136      	bne.n	8001faa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	0013      	movs	r3, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	2180      	movs	r1, #128	@ 0x80
 8001f4a:	f000 fb77 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e053      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2bff      	cmp	r3, #255	@ 0xff
 8001f5e:	d911      	bls.n	8001f84 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	22ff      	movs	r2, #255	@ 0xff
 8001f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	045c      	lsls	r4, r3, #17
 8001f70:	230a      	movs	r3, #10
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	8819      	ldrh	r1, [r3, #0]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	0023      	movs	r3, r4
 8001f7e:	f000 fd37 	bl	80029f0 <I2C_TransferConfig>
 8001f82:	e012      	b.n	8001faa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	049c      	lsls	r4, r3, #18
 8001f98:	230a      	movs	r3, #10
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	8819      	ldrh	r1, [r3, #0]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	0023      	movs	r3, r4
 8001fa6:	f000 fd23 	bl	80029f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d198      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fbdc 	bl	8002778 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e01a      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	490b      	ldr	r1, [pc, #44]	@ (8002008 <HAL_I2C_Mem_Write+0x258>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2241      	movs	r2, #65	@ 0x41
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2242      	movs	r2, #66	@ 0x42
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2240      	movs	r2, #64	@ 0x40
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b007      	add	sp, #28
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	fe00e800 	.word	0xfe00e800

0800200c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	000c      	movs	r4, r1
 8002016:	0010      	movs	r0, r2
 8002018:	0019      	movs	r1, r3
 800201a:	230a      	movs	r3, #10
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	1c22      	adds	r2, r4, #0
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	2308      	movs	r3, #8
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	1c02      	adds	r2, r0, #0
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	1c0a      	adds	r2, r1, #0
 800202e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2241      	movs	r2, #65	@ 0x41
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b20      	cmp	r3, #32
 800203a:	d000      	beq.n	800203e <HAL_I2C_Mem_Read+0x32>
 800203c:	e110      	b.n	8002260 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <HAL_I2C_Mem_Read+0x42>
 8002044:	232c      	movs	r3, #44	@ 0x2c
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e103      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2240      	movs	r2, #64	@ 0x40
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_I2C_Mem_Read+0x5c>
 8002064:	2302      	movs	r3, #2
 8002066:	e0fc      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	2101      	movs	r1, #1
 800206e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002070:	f7ff fb50 	bl	8001714 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	0219      	lsls	r1, r3, #8
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2319      	movs	r3, #25
 8002084:	2201      	movs	r2, #1
 8002086:	f000 fad9 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e7      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2241      	movs	r2, #65	@ 0x41
 8002096:	2122      	movs	r1, #34	@ 0x22
 8002098:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2242      	movs	r2, #66	@ 0x42
 800209e:	2140      	movs	r1, #64	@ 0x40
 80020a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	222c      	movs	r2, #44	@ 0x2c
 80020b2:	18ba      	adds	r2, r7, r2
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020be:	1dbb      	adds	r3, r7, #6
 80020c0:	881c      	ldrh	r4, [r3, #0]
 80020c2:	2308      	movs	r3, #8
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	230a      	movs	r3, #10
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	8819      	ldrh	r1, [r3, #0]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	0023      	movs	r3, r4
 80020da:	f000 fa2b 	bl	8002534 <I2C_RequestMemoryRead>
 80020de:	1e03      	subs	r3, r0, #0
 80020e0:	d005      	beq.n	80020ee <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0b9      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2bff      	cmp	r3, #255	@ 0xff
 80020f6:	d911      	bls.n	800211c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002102:	b2da      	uxtb	r2, r3
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	045c      	lsls	r4, r3, #17
 8002108:	230a      	movs	r3, #10
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	8819      	ldrh	r1, [r3, #0]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	4b56      	ldr	r3, [pc, #344]	@ (800226c <HAL_I2C_Mem_Read+0x260>)
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	0023      	movs	r3, r4
 8002116:	f000 fc6b 	bl	80029f0 <I2C_TransferConfig>
 800211a:	e012      	b.n	8002142 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	049c      	lsls	r4, r3, #18
 8002130:	230a      	movs	r3, #10
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	8819      	ldrh	r1, [r3, #0]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	4b4c      	ldr	r3, [pc, #304]	@ (800226c <HAL_I2C_Mem_Read+0x260>)
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	0023      	movs	r3, r4
 800213e:	f000 fc57 	bl	80029f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	0013      	movs	r3, r2
 800214c:	2200      	movs	r2, #0
 800214e:	2104      	movs	r1, #4
 8002150:	f000 fa74 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e082      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03a      	beq.n	800220e <HAL_I2C_Mem_Read+0x202>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d136      	bne.n	800220e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	0013      	movs	r3, r2
 80021aa:	2200      	movs	r2, #0
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	f000 fa45 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e053      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2bff      	cmp	r3, #255	@ 0xff
 80021c2:	d911      	bls.n	80021e8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	045c      	lsls	r4, r3, #17
 80021d4:	230a      	movs	r3, #10
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	8819      	ldrh	r1, [r3, #0]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	2300      	movs	r3, #0
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	0023      	movs	r3, r4
 80021e2:	f000 fc05 	bl	80029f0 <I2C_TransferConfig>
 80021e6:	e012      	b.n	800220e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	049c      	lsls	r4, r3, #18
 80021fc:	230a      	movs	r3, #10
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	8819      	ldrh	r1, [r3, #0]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	2300      	movs	r3, #0
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	0023      	movs	r3, r4
 800220a:	f000 fbf1 	bl	80029f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d194      	bne.n	8002142 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	0018      	movs	r0, r3
 8002220:	f000 faaa 	bl	8002778 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e01a      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	490c      	ldr	r1, [pc, #48]	@ (8002270 <HAL_I2C_Mem_Read+0x264>)
 8002240:	400a      	ands	r2, r1
 8002242:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2241      	movs	r2, #65	@ 0x41
 8002248:	2120      	movs	r1, #32
 800224a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2242      	movs	r2, #66	@ 0x42
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	@ 0x40
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b007      	add	sp, #28
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	80002400 	.word	0x80002400
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	@ 0x28
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	230a      	movs	r3, #10
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	1c0a      	adds	r2, r1, #0
 8002286:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2241      	movs	r2, #65	@ 0x41
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b20      	cmp	r3, #32
 8002296:	d000      	beq.n	800229a <HAL_I2C_IsDeviceReady+0x26>
 8002298:	e0df      	b.n	800245a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	401a      	ands	r2, r3
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0d4      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2240      	movs	r2, #64	@ 0x40
 80022b6:	5c9b      	ldrb	r3, [r3, r2]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_IsDeviceReady+0x4c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e0cd      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	2101      	movs	r1, #1
 80022c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2241      	movs	r2, #65	@ 0x41
 80022cc:	2124      	movs	r1, #36	@ 0x24
 80022ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_IsDeviceReady+0x7a>
 80022de:	230a      	movs	r3, #10
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	059b      	lsls	r3, r3, #22
 80022e6:	0d9b      	lsrs	r3, r3, #22
 80022e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002464 <HAL_I2C_IsDeviceReady+0x1f0>)
 80022ea:	431a      	orrs	r2, r3
 80022ec:	e006      	b.n	80022fc <HAL_I2C_IsDeviceReady+0x88>
 80022ee:	230a      	movs	r3, #10
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	059b      	lsls	r3, r3, #22
 80022f6:	0d9b      	lsrs	r3, r3, #22
 80022f8:	4a5b      	ldr	r2, [pc, #364]	@ (8002468 <HAL_I2C_IsDeviceReady+0x1f4>)
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002302:	f7ff fa07 	bl	8001714 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2220      	movs	r2, #32
 8002312:	4013      	ands	r3, r2
 8002314:	3b20      	subs	r3, #32
 8002316:	425a      	negs	r2, r3
 8002318:	4153      	adcs	r3, r2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	231f      	movs	r3, #31
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	3b10      	subs	r3, #16
 800232e:	425a      	negs	r2, r3
 8002330:	4153      	adcs	r3, r2
 8002332:	b2da      	uxtb	r2, r3
 8002334:	231e      	movs	r3, #30
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800233a:	e035      	b.n	80023a8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	d01a      	beq.n	8002378 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7ff f9e7 	bl	8001714 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <HAL_I2C_IsDeviceReady+0xe4>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10f      	bne.n	8002378 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2241      	movs	r2, #65	@ 0x41
 800235c:	2120      	movs	r1, #32
 800235e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	2220      	movs	r2, #32
 8002366:	431a      	orrs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e071      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2220      	movs	r2, #32
 8002380:	4013      	ands	r3, r2
 8002382:	3b20      	subs	r3, #32
 8002384:	425a      	negs	r2, r3
 8002386:	4153      	adcs	r3, r2
 8002388:	b2da      	uxtb	r2, r3
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2210      	movs	r2, #16
 8002398:	4013      	ands	r3, r2
 800239a:	3b10      	subs	r3, #16
 800239c:	425a      	negs	r2, r3
 800239e:	4153      	adcs	r3, r2
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	231e      	movs	r3, #30
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023a8:	231f      	movs	r3, #31
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <HAL_I2C_IsDeviceReady+0x148>
 80023b2:	231e      	movs	r3, #30
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0bf      	beq.n	800233c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2210      	movs	r2, #16
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d01a      	beq.n	8002400 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	0013      	movs	r3, r2
 80023d4:	2200      	movs	r2, #0
 80023d6:	2120      	movs	r1, #32
 80023d8:	f000 f930 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e03b      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2241      	movs	r2, #65	@ 0x41
 80023f0:	2120      	movs	r1, #32
 80023f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2240      	movs	r2, #64	@ 0x40
 80023f8:	2100      	movs	r1, #0
 80023fa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e02d      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	0013      	movs	r3, r2
 800240a:	2200      	movs	r2, #0
 800240c:	2120      	movs	r1, #32
 800240e:	f000 f915 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e020      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2210      	movs	r2, #16
 8002420:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d900      	bls.n	800243a <HAL_I2C_IsDeviceReady+0x1c6>
 8002438:	e74d      	b.n	80022d6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2241      	movs	r2, #65	@ 0x41
 800243e:	2120      	movs	r1, #32
 8002440:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	2220      	movs	r2, #32
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b008      	add	sp, #32
 8002462:	bd80      	pop	{r7, pc}
 8002464:	02002000 	.word	0x02002000
 8002468:	02002800 	.word	0x02002800

0800246c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800246c:	b5b0      	push	{r4, r5, r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	000c      	movs	r4, r1
 8002476:	0010      	movs	r0, r2
 8002478:	0019      	movs	r1, r3
 800247a:	250a      	movs	r5, #10
 800247c:	197b      	adds	r3, r7, r5
 800247e:	1c22      	adds	r2, r4, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	2308      	movs	r3, #8
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	1c02      	adds	r2, r0, #0
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	1c0a      	adds	r2, r1, #0
 800248e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002490:	1dbb      	adds	r3, r7, #6
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	045c      	lsls	r4, r3, #17
 800249a:	197b      	adds	r3, r7, r5
 800249c:	8819      	ldrh	r1, [r3, #0]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	4b23      	ldr	r3, [pc, #140]	@ (8002530 <I2C_RequestMemoryWrite+0xc4>)
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	0023      	movs	r3, r4
 80024a6:	f000 faa3 	bl	80029f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 f91b 	bl	80026ec <I2C_WaitOnTXISFlagUntilTimeout>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e033      	b.n	8002526 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024be:	1dbb      	adds	r3, r7, #6
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024c6:	2308      	movs	r3, #8
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024d4:	e019      	b.n	800250a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024d6:	2308      	movs	r3, #8
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f8fc 	bl	80026ec <I2C_WaitOnTXISFlagUntilTimeout>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d001      	beq.n	80024fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e014      	b.n	8002526 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fc:	2308      	movs	r3, #8
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800250a:	6a3a      	ldr	r2, [r7, #32]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	0013      	movs	r3, r2
 8002514:	2200      	movs	r2, #0
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	f000 f890 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d001      	beq.n	8002524 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bdb0      	pop	{r4, r5, r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	80002000 	.word	0x80002000

08002534 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002534:	b5b0      	push	{r4, r5, r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	000c      	movs	r4, r1
 800253e:	0010      	movs	r0, r2
 8002540:	0019      	movs	r1, r3
 8002542:	250a      	movs	r5, #10
 8002544:	197b      	adds	r3, r7, r5
 8002546:	1c22      	adds	r2, r4, #0
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	2308      	movs	r3, #8
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	1c02      	adds	r2, r0, #0
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	1c0a      	adds	r2, r1, #0
 8002556:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002558:	1dbb      	adds	r3, r7, #6
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	197b      	adds	r3, r7, r5
 8002560:	8819      	ldrh	r1, [r3, #0]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <I2C_RequestMemoryRead+0xc0>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	f000 fa41 	bl	80029f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f8b9 	bl	80026ec <I2C_WaitOnTXISFlagUntilTimeout>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d001      	beq.n	8002582 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e033      	b.n	80025ea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002582:	1dbb      	adds	r3, r7, #6
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800258a:	2308      	movs	r3, #8
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
 8002598:	e019      	b.n	80025ce <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800259a:	2308      	movs	r3, #8
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 f89a 	bl	80026ec <I2C_WaitOnTXISFlagUntilTimeout>
 80025b8:	1e03      	subs	r3, r0, #0
 80025ba:	d001      	beq.n	80025c0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e014      	b.n	80025ea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025c0:	2308      	movs	r3, #8
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025ce:	6a3a      	ldr	r2, [r7, #32]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	0013      	movs	r3, r2
 80025d8:	2200      	movs	r2, #0
 80025da:	2140      	movs	r1, #64	@ 0x40
 80025dc:	f000 f82e 	bl	800263c <I2C_WaitOnFlagUntilTimeout>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d001      	beq.n	80025e8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bdb0      	pop	{r4, r5, r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	80002000 	.word	0x80002000

080025f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d103      	bne.n	8002616 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	2b01      	cmp	r3, #1
 8002622:	d007      	beq.n	8002634 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	619a      	str	r2, [r3, #24]
  }
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	e03a      	b.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f8d3 	bl	8002800 <I2C_IsErrorOccurred>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e040      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	d02d      	beq.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7ff f854 	bl	8001714 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d122      	bne.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	425a      	negs	r2, r3
 800268e:	4153      	adcs	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	001a      	movs	r2, r3
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d113      	bne.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a0:	2220      	movs	r2, #32
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2241      	movs	r2, #65	@ 0x41
 80026ac:	2120      	movs	r1, #32
 80026ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2242      	movs	r2, #66	@ 0x42
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	@ 0x40
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00f      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4013      	ands	r3, r2
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	425a      	negs	r2, r3
 80026d4:	4153      	adcs	r3, r2
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	001a      	movs	r2, r3
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d0b5      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026f8:	e032      	b.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	0018      	movs	r0, r3
 8002702:	f000 f87d 	bl	8002800 <I2C_IsErrorOccurred>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e030      	b.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	d025      	beq.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002714:	f7fe fffe 	bl	8001714 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d11a      	bne.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d013      	beq.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	2220      	movs	r2, #32
 800273e:	431a      	orrs	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2241      	movs	r2, #65	@ 0x41
 8002748:	2120      	movs	r1, #32
 800274a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2242      	movs	r2, #66	@ 0x42
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e007      	b.n	8002770 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d1c5      	bne.n	80026fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}

08002778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002784:	e02f      	b.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 f837 	bl	8002800 <I2C_IsErrorOccurred>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e02d      	b.n	80027f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7fe ffbb 	bl	8001714 <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11a      	bne.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d013      	beq.n	80027e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	2220      	movs	r2, #32
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2241      	movs	r2, #65	@ 0x41
 80027ce:	2120      	movs	r1, #32
 80027d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2242      	movs	r2, #66	@ 0x42
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2240      	movs	r2, #64	@ 0x40
 80027de:	2100      	movs	r1, #0
 80027e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e007      	b.n	80027f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2220      	movs	r2, #32
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d1c8      	bne.n	8002786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	@ 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280c:	2327      	movs	r3, #39	@ 0x27
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2210      	movs	r2, #16
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <I2C_IsErrorOccurred+0x2e>
 800282c:	e079      	b.n	8002922 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2210      	movs	r2, #16
 8002834:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002836:	e057      	b.n	80028e8 <I2C_IsErrorOccurred+0xe8>
 8002838:	2227      	movs	r2, #39	@ 0x27
 800283a:	18bb      	adds	r3, r7, r2
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	d04f      	beq.n	80028e8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002848:	f7fe ff64 	bl	8001714 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	d302      	bcc.n	800285e <I2C_IsErrorOccurred+0x5e>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d144      	bne.n	80028e8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	2380      	movs	r3, #128	@ 0x80
 8002866:	01db      	lsls	r3, r3, #7
 8002868:	4013      	ands	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800286c:	2013      	movs	r0, #19
 800286e:	183b      	adds	r3, r7, r0
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	2142      	movs	r1, #66	@ 0x42
 8002874:	5c52      	ldrb	r2, [r2, r1]
 8002876:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	401a      	ands	r2, r3
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	429a      	cmp	r2, r3
 800288a:	d126      	bne.n	80028da <I2C_IsErrorOccurred+0xda>
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	01db      	lsls	r3, r3, #7
 8002892:	429a      	cmp	r2, r3
 8002894:	d021      	beq.n	80028da <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002896:	183b      	adds	r3, r7, r0
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d01d      	beq.n	80028da <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2180      	movs	r1, #128	@ 0x80
 80028aa:	01c9      	lsls	r1, r1, #7
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028b0:	f7fe ff30 	bl	8001714 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b8:	e00f      	b.n	80028da <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ba:	f7fe ff2b 	bl	8001714 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b19      	cmp	r3, #25
 80028c6:	d908      	bls.n	80028da <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2220      	movs	r2, #32
 80028cc:	4313      	orrs	r3, r2
 80028ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028d0:	2327      	movs	r3, #39	@ 0x27
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]

              break;
 80028d8:	e006      	b.n	80028e8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2220      	movs	r2, #32
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d1e8      	bne.n	80028ba <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2220      	movs	r2, #32
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d004      	beq.n	8002900 <I2C_IsErrorOccurred+0x100>
 80028f6:	2327      	movs	r3, #39	@ 0x27
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d09b      	beq.n	8002838 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002900:	2327      	movs	r3, #39	@ 0x27
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2204      	movs	r2, #4
 8002916:	4313      	orrs	r3, r2
 8002918:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800291a:	2327      	movs	r3, #39	@ 0x27
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d00c      	beq.n	800294e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2201      	movs	r2, #1
 8002938:	4313      	orrs	r3, r2
 800293a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	0052      	lsls	r2, r2, #1
 8002944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002946:	2327      	movs	r3, #39	@ 0x27
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4013      	ands	r3, r2
 8002956:	d00c      	beq.n	8002972 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	2208      	movs	r2, #8
 800295c:	4313      	orrs	r3, r2
 800295e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800296a:	2327      	movs	r3, #39	@ 0x27
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d00c      	beq.n	8002996 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2202      	movs	r2, #2
 8002980:	4313      	orrs	r3, r2
 8002982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2280      	movs	r2, #128	@ 0x80
 800298a:	0092      	lsls	r2, r2, #2
 800298c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298e:	2327      	movs	r3, #39	@ 0x27
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002996:	2327      	movs	r3, #39	@ 0x27
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01d      	beq.n	80029dc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff fe28 	bl	80025f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	490e      	ldr	r1, [pc, #56]	@ (80029ec <I2C_IsErrorOccurred+0x1ec>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2241      	movs	r2, #65	@ 0x41
 80029c8:	2120      	movs	r1, #32
 80029ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2242      	movs	r2, #66	@ 0x42
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	@ 0x40
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80029dc:	2327      	movs	r3, #39	@ 0x27
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	781b      	ldrb	r3, [r3, #0]
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b00a      	add	sp, #40	@ 0x28
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	fe00e800 	.word	0xfe00e800

080029f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	0008      	movs	r0, r1
 80029fa:	0011      	movs	r1, r2
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	240a      	movs	r4, #10
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	1c02      	adds	r2, r0, #0
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	2009      	movs	r0, #9
 8002a08:	183b      	adds	r3, r7, r0
 8002a0a:	1c0a      	adds	r2, r1, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	059b      	lsls	r3, r3, #22
 8002a14:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	0419      	lsls	r1, r3, #16
 8002a1c:	23ff      	movs	r3, #255	@ 0xff
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a22:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a3a:	0d51      	lsrs	r1, r2, #21
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	400a      	ands	r2, r1
 8002a42:	4907      	ldr	r1, [pc, #28]	@ (8002a60 <I2C_TransferConfig+0x70>)
 8002a44:	430a      	orrs	r2, r1
 8002a46:	43d2      	mvns	r2, r2
 8002a48:	401a      	ands	r2, r3
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b007      	add	sp, #28
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	03ff63ff 	.word	0x03ff63ff

08002a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2241      	movs	r2, #65	@ 0x41
 8002a72:	5c9b      	ldrb	r3, [r3, r2]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d138      	bne.n	8002aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e032      	b.n	8002aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2240      	movs	r2, #64	@ 0x40
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2241      	movs	r2, #65	@ 0x41
 8002a94:	2124      	movs	r1, #36	@ 0x24
 8002a96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4911      	ldr	r1, [pc, #68]	@ (8002af8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2241      	movs	r2, #65	@ 0x41
 8002adc:	2120      	movs	r1, #32
 8002ade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2240      	movs	r2, #64	@ 0x40
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	ffffefff 	.word	0xffffefff

08002afc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2241      	movs	r2, #65	@ 0x41
 8002b0a:	5c9b      	ldrb	r3, [r3, r2]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d139      	bne.n	8002b86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e033      	b.n	8002b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	2101      	movs	r1, #1
 8002b26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2241      	movs	r2, #65	@ 0x41
 8002b2c:	2124      	movs	r1, #36	@ 0x24
 8002b2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a11      	ldr	r2, [pc, #68]	@ (8002b90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2241      	movs	r2, #65	@ 0x41
 8002b76:	2120      	movs	r1, #32
 8002b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2240      	movs	r2, #64	@ 0x40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	fffff0ff 	.word	0xfffff0ff

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e301      	b.n	80031aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1e>
 8002bb0:	e08d      	b.n	8002cce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bb2:	4bc3      	ldr	r3, [pc, #780]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00e      	beq.n	8002bdc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbe:	4bc0      	ldr	r3, [pc, #768]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d116      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x64>
 8002bca:	4bbd      	ldr	r3, [pc, #756]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	4013      	ands	r3, r2
 8002be6:	d100      	bne.n	8002bea <HAL_RCC_OscConfig+0x56>
 8002be8:	e070      	b.n	8002ccc <HAL_RCC_OscConfig+0x138>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d000      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x60>
 8002bf2:	e06b      	b.n	8002ccc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e2d8      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x7c>
 8002c00:	4baf      	ldr	r3, [pc, #700]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4bae      	ldr	r3, [pc, #696]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c06:	2180      	movs	r1, #128	@ 0x80
 8002c08:	0249      	lsls	r1, r1, #9
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e02f      	b.n	8002c70 <HAL_RCC_OscConfig+0xdc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_OscConfig+0x9e>
 8002c18:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	49a9      	ldr	r1, [pc, #676]	@ (8002ec4 <HAL_RCC_OscConfig+0x330>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	4ba6      	ldr	r3, [pc, #664]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4ba5      	ldr	r3, [pc, #660]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	49a7      	ldr	r1, [pc, #668]	@ (8002ec8 <HAL_RCC_OscConfig+0x334>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e01e      	b.n	8002c70 <HAL_RCC_OscConfig+0xdc>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d10e      	bne.n	8002c58 <HAL_RCC_OscConfig+0xc4>
 8002c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c40:	2180      	movs	r1, #128	@ 0x80
 8002c42:	02c9      	lsls	r1, r1, #11
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	4b9d      	ldr	r3, [pc, #628]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	0249      	lsls	r1, r1, #9
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xdc>
 8002c58:	4b99      	ldr	r3, [pc, #612]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b98      	ldr	r3, [pc, #608]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	4999      	ldr	r1, [pc, #612]	@ (8002ec4 <HAL_RCC_OscConfig+0x330>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b96      	ldr	r3, [pc, #600]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b95      	ldr	r3, [pc, #596]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	4997      	ldr	r1, [pc, #604]	@ (8002ec8 <HAL_RCC_OscConfig+0x334>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd4c 	bl	8001714 <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c82:	f7fe fd47 	bl	8001714 <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	@ 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e28a      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c94:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0xee>
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fd37 	bl	8001714 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fd32 	bl	8001714 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	@ 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e275      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b80      	ldr	r3, [pc, #512]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	029b      	lsls	r3, r3, #10
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x118>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x146>
 8002cd8:	e069      	b.n	8002dae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cda:	4b79      	ldr	r3, [pc, #484]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce4:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	220c      	movs	r2, #12
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d11c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x196>
 8002cf0:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d116      	bne.n	8002d2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfc:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e24b      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22f8      	movs	r2, #248	@ 0xf8
 8002d18:	4393      	bics	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	00da      	lsls	r2, r3, #3
 8002d22:	4b67      	ldr	r3, [pc, #412]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d28:	e041      	b.n	8002dae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d024      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d32:	4b63      	ldr	r3, [pc, #396]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fce9 	bl	8001714 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fce4 	bl	8001714 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e227      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d0f1      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b56      	ldr	r3, [pc, #344]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22f8      	movs	r2, #248	@ 0xf8
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00da      	lsls	r2, r3, #3
 8002d74:	4b52      	ldr	r3, [pc, #328]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e018      	b.n	8002dae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	438a      	bics	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fcc4 	bl	8001714 <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fcbf 	bl	8001714 <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e202      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da4:	4b46      	ldr	r3, [pc, #280]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2202      	movs	r2, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d1f1      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2208      	movs	r2, #8
 8002db4:	4013      	ands	r3, r2
 8002db6:	d036      	beq.n	8002e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d019      	beq.n	8002df4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fca2 	bl	8001714 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fc9d 	bl	8001714 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1e0      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d0f1      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x242>
 8002df2:	e018      	b.n	8002e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b32      	ldr	r3, [pc, #200]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df8:	4b31      	ldr	r3, [pc, #196]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fc88 	bl	8001714 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fc83 	bl	8001714 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1c6      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	4013      	ands	r3, r2
 8002e24:	d1f1      	bne.n	8002e0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d100      	bne.n	8002e32 <HAL_RCC_OscConfig+0x29e>
 8002e30:	e0b4      	b.n	8002f9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	201f      	movs	r0, #31
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	4013      	ands	r3, r2
 8002e44:	d110      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	0549      	lsls	r1, r1, #21
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	055b      	lsls	r3, r3, #21
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_RCC_OscConfig+0x338>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d11a      	bne.n	8002eaa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e74:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCC_OscConfig+0x338>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_RCC_OscConfig+0x338>)
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	0049      	lsls	r1, r1, #1
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fc47 	bl	8001714 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fe fc42 	bl	8001714 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e185      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x338>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x33c>
 8002eb2:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <HAL_RCC_OscConfig+0x32c>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	621a      	str	r2, [r3, #32]
 8002ebe:	e035      	b.n	8002f2c <HAL_RCC_OscConfig+0x398>
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	fffeffff 	.word	0xfffeffff
 8002ec8:	fffbffff 	.word	0xfffbffff
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x35e>
 8002ed8:	4bb6      	ldr	r3, [pc, #728]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	4bb5      	ldr	r3, [pc, #724]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	621a      	str	r2, [r3, #32]
 8002ee4:	4bb3      	ldr	r3, [pc, #716]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	4bb2      	ldr	r3, [pc, #712]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002eea:	2104      	movs	r1, #4
 8002eec:	438a      	bics	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]
 8002ef0:	e01c      	b.n	8002f2c <HAL_RCC_OscConfig+0x398>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x380>
 8002efa:	4bae      	ldr	r3, [pc, #696]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	4bad      	ldr	r3, [pc, #692]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f00:	2104      	movs	r1, #4
 8002f02:	430a      	orrs	r2, r1
 8002f04:	621a      	str	r2, [r3, #32]
 8002f06:	4bab      	ldr	r3, [pc, #684]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	4baa      	ldr	r3, [pc, #680]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	621a      	str	r2, [r3, #32]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x398>
 8002f14:	4ba7      	ldr	r3, [pc, #668]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	4ba6      	ldr	r3, [pc, #664]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	621a      	str	r2, [r3, #32]
 8002f20:	4ba4      	ldr	r3, [pc, #656]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	4ba3      	ldr	r3, [pc, #652]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f26:	2104      	movs	r1, #4
 8002f28:	438a      	bics	r2, r1
 8002f2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d014      	beq.n	8002f5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fbee 	bl	8001714 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fbe9 	bl	8001714 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	4a9b      	ldr	r2, [pc, #620]	@ (80031b8 <HAL_RCC_OscConfig+0x624>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e12b      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	4b98      	ldr	r3, [pc, #608]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	2202      	movs	r2, #2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
 8002f5c:	e013      	b.n	8002f86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fbd9 	bl	8001714 <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f66:	e009      	b.n	8002f7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fbd4 	bl	8001714 <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	4a91      	ldr	r2, [pc, #580]	@ (80031b8 <HAL_RCC_OscConfig+0x624>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e116      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	4b8d      	ldr	r3, [pc, #564]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	2202      	movs	r2, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f86:	231f      	movs	r3, #31
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	4b87      	ldr	r3, [pc, #540]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002f96:	4989      	ldr	r1, [pc, #548]	@ (80031bc <HAL_RCC_OscConfig+0x628>)
 8002f98:	400a      	ands	r2, r1
 8002f9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12a      	bne.n	8003004 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fae:	4b81      	ldr	r3, [pc, #516]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb2:	4b80      	ldr	r3, [pc, #512]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fba:	4b7e      	ldr	r3, [pc, #504]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fba5 	bl	8001714 <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fd0:	f7fe fba0 	bl	8001714 <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0e3      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fe2:	4b74      	ldr	r3, [pc, #464]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d0f1      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fec:	4b71      	ldr	r3, [pc, #452]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	22f8      	movs	r2, #248	@ 0xf8
 8002ff2:	4393      	bics	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	635a      	str	r2, [r3, #52]	@ 0x34
 8003002:	e034      	b.n	800306e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	3305      	adds	r3, #5
 800300a:	d111      	bne.n	8003030 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800300c:	4b69      	ldr	r3, [pc, #420]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800300e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003010:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003012:	2104      	movs	r1, #4
 8003014:	438a      	bics	r2, r1
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003018:	4b66      	ldr	r3, [pc, #408]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301c:	22f8      	movs	r2, #248	@ 0xf8
 800301e:	4393      	bics	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	00da      	lsls	r2, r3, #3
 8003028:	4b62      	ldr	r3, [pc, #392]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800302a:	430a      	orrs	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
 800302e:	e01e      	b.n	800306e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003030:	4b60      	ldr	r3, [pc, #384]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003034:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003036:	2104      	movs	r1, #4
 8003038:	430a      	orrs	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800303c:	4b5d      	ldr	r3, [pc, #372]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800303e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003040:	4b5c      	ldr	r3, [pc, #368]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003042:	2101      	movs	r1, #1
 8003044:	438a      	bics	r2, r1
 8003046:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe fb64 	bl	8001714 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003052:	f7fe fb5f 	bl	8001714 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0a2      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d1f1      	bne.n	8003052 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d100      	bne.n	8003078 <HAL_RCC_OscConfig+0x4e4>
 8003076:	e097      	b.n	80031a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003078:	4b4e      	ldr	r3, [pc, #312]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	220c      	movs	r2, #12
 800307e:	4013      	ands	r3, r2
 8003080:	2b08      	cmp	r3, #8
 8003082:	d100      	bne.n	8003086 <HAL_RCC_OscConfig+0x4f2>
 8003084:	e06b      	b.n	800315e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d14c      	bne.n	8003128 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b49      	ldr	r3, [pc, #292]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b48      	ldr	r3, [pc, #288]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003094:	494a      	ldr	r1, [pc, #296]	@ (80031c0 <HAL_RCC_OscConfig+0x62c>)
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fb3b 	bl	8001714 <HAL_GetTick>
 800309e:	0003      	movs	r3, r0
 80030a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fb36 	bl	8001714 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e079      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	4b3f      	ldr	r3, [pc, #252]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	@ 0x80
 80030bc:	049b      	lsls	r3, r3, #18
 80030be:	4013      	ands	r3, r2
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c2:	4b3c      	ldr	r3, [pc, #240]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	220f      	movs	r2, #15
 80030c8:	4393      	bics	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	4b38      	ldr	r3, [pc, #224]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030d6:	4b37      	ldr	r3, [pc, #220]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a3a      	ldr	r2, [pc, #232]	@ (80031c4 <HAL_RCC_OscConfig+0x630>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	4b32      	ldr	r3, [pc, #200]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b30      	ldr	r3, [pc, #192]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b2f      	ldr	r3, [pc, #188]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 80030f6:	2180      	movs	r1, #128	@ 0x80
 80030f8:	0449      	lsls	r1, r1, #17
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fb09 	bl	8001714 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe fb04 	bl	8001714 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e047      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311a:	4b26      	ldr	r3, [pc, #152]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	049b      	lsls	r3, r3, #18
 8003122:	4013      	ands	r3, r2
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x574>
 8003126:	e03f      	b.n	80031a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800312e:	4924      	ldr	r1, [pc, #144]	@ (80031c0 <HAL_RCC_OscConfig+0x62c>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe faee 	bl	8001714 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fae9 	bl	8001714 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e02c      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	049b      	lsls	r3, r3, #18
 8003158:	4013      	ands	r3, r2
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x5aa>
 800315c:	e024      	b.n	80031a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01f      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003170:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <HAL_RCC_OscConfig+0x620>)
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	429a      	cmp	r2, r3
 8003184:	d10e      	bne.n	80031a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	220f      	movs	r2, #15
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	23f0      	movs	r3, #240	@ 0xf0
 8003198:	039b      	lsls	r3, r3, #14
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b008      	add	sp, #32
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	40021000 	.word	0x40021000
 80031b8:	00001388 	.word	0x00001388
 80031bc:	efffffff 	.word	0xefffffff
 80031c0:	feffffff 	.word	0xfeffffff
 80031c4:	ffc2ffff 	.word	0xffc2ffff

080031c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b3      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b5b      	ldr	r3, [pc, #364]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d911      	bls.n	800320e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b58      	ldr	r3, [pc, #352]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4393      	bics	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	4b55      	ldr	r3, [pc, #340]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fc:	4b53      	ldr	r3, [pc, #332]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e09a      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2202      	movs	r2, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d015      	beq.n	8003244 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d006      	beq.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003222:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003228:	21e0      	movs	r1, #224	@ 0xe0
 800322a:	00c9      	lsls	r1, r1, #3
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	22f0      	movs	r2, #240	@ 0xf0
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d040      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b3e      	ldr	r3, [pc, #248]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	4013      	ands	r3, r2
 8003260:	d114      	bne.n	800328c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06e      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	049b      	lsls	r3, r3, #18
 8003276:	4013      	ands	r3, r2
 8003278:	d108      	bne.n	800328c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e062      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b34      	ldr	r3, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e05b      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	4393      	bics	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4b2d      	ldr	r3, [pc, #180]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fa38 	bl	8001714 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a8:	e009      	b.n	80032be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032aa:	f7fe fa33 	bl	8001714 <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <HAL_RCC_ClockConfig+0x18c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e042      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	220c      	movs	r2, #12
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1ec      	bne.n	80032aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d211      	bcs.n	8003302 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f0:	4b16      	ldr	r3, [pc, #88]	@ (800334c <HAL_RCC_ClockConfig+0x184>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e020      	b.n	8003344 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2204      	movs	r2, #4
 8003308:	4013      	ands	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_RCC_ClockConfig+0x190>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003320:	f000 f820 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003324:	0001      	movs	r1, r0
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_RCC_ClockConfig+0x188>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	220f      	movs	r2, #15
 800332e:	4013      	ands	r3, r2
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <HAL_RCC_ClockConfig+0x194>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	000a      	movs	r2, r1
 8003336:	40da      	lsrs	r2, r3
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x198>)
 800333a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800333c:	2003      	movs	r0, #3
 800333e:	f7fe f9a3 	bl	8001688 <HAL_InitTick>
  
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	00001388 	.word	0x00001388
 8003358:	fffff8ff 	.word	0xfffff8ff
 800335c:	08003698 	.word	0x08003698
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	220c      	movs	r2, #12
 8003388:	4013      	ands	r3, r2
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x30>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x36>
 8003392:	e02c      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003396:	613b      	str	r3, [r7, #16]
      break;
 8003398:	e02c      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	220f      	movs	r2, #15
 80033a0:	4013      	ands	r3, r2
 80033a2:	4a19      	ldr	r2, [pc, #100]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033a8:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	220f      	movs	r2, #15
 80033ae:	4013      	ands	r3, r2
 80033b0:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_RCC_GetSysClockFreq+0xa8>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	025b      	lsls	r3, r3, #9
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	4810      	ldr	r0, [pc, #64]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	001a      	movs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4353      	muls	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e009      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	000a      	movs	r2, r1
 80033d8:	0152      	lsls	r2, r2, #5
 80033da:	1a52      	subs	r2, r2, r1
 80033dc:	0193      	lsls	r3, r2, #6
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	185b      	adds	r3, r3, r1
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033f0:	613b      	str	r3, [r7, #16]
      break;
 80033f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033f4:	693b      	ldr	r3, [r7, #16]
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	40021000 	.word	0x40021000
 8003404:	007a1200 	.word	0x007a1200
 8003408:	080036a8 	.word	0x080036a8
 800340c:	080036b8 	.word	0x080036b8

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	025b      	lsls	r3, r3, #9
 8003428:	4013      	ands	r3, r2
 800342a:	d100      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800342c:	e08e      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2017      	movs	r0, #23
 8003430:	183b      	adds	r3, r7, r0
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b57      	ldr	r3, [pc, #348]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	055b      	lsls	r3, r3, #21
 800343e:	4013      	ands	r3, r2
 8003440:	d110      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	4b53      	ldr	r3, [pc, #332]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	0549      	lsls	r1, r1, #21
 800344c:	430a      	orrs	r2, r1
 800344e:	61da      	str	r2, [r3, #28]
 8003450:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	055b      	lsls	r3, r3, #21
 8003458:	4013      	ands	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345e:	183b      	adds	r3, r7, r0
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b4c      	ldr	r3, [pc, #304]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4013      	ands	r3, r2
 800346e:	d11a      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003470:	4b49      	ldr	r3, [pc, #292]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b48      	ldr	r3, [pc, #288]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	0049      	lsls	r1, r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fe f949 	bl	8001714 <HAL_GetTick>
 8003482:	0003      	movs	r3, r0
 8003484:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe f944 	bl	8001714 <HAL_GetTick>
 800348c:	0002      	movs	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	@ 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e077      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b3f      	ldr	r3, [pc, #252]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4013      	ands	r3, r2
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	23c0      	movs	r3, #192	@ 0xc0
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d034      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	23c0      	movs	r3, #192	@ 0xc0
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d02c      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a33      	ldr	r2, [pc, #204]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034d8:	2180      	movs	r1, #128	@ 0x80
 80034da:	0249      	lsls	r1, r1, #9
 80034dc:	430a      	orrs	r2, r1
 80034de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034e6:	492e      	ldr	r1, [pc, #184]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ec:	4b29      	ldr	r3, [pc, #164]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe f90b 	bl	8001714 <HAL_GetTick>
 80034fe:	0003      	movs	r3, r0
 8003500:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	e009      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f906 	bl	8001714 <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e038      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	2202      	movs	r2, #2
 800351e:	4013      	ands	r3, r2
 8003520:	d0f0      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003522:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003532:	430a      	orrs	r2, r1
 8003534:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003536:	2317      	movs	r3, #23
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003546:	4918      	ldr	r1, [pc, #96]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003548:	400a      	ands	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d009      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003556:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	2203      	movs	r2, #3
 800355c:	4393      	bics	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003566:	430a      	orrs	r2, r1
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2220      	movs	r2, #32
 8003570:	4013      	ands	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003574:	4b07      	ldr	r3, [pc, #28]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	2210      	movs	r2, #16
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003584:	430a      	orrs	r2, r1
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	40021000 	.word	0x40021000
 8003598:	40007000 	.word	0x40007000
 800359c:	fffffcff 	.word	0xfffffcff
 80035a0:	fffeffff 	.word	0xfffeffff
 80035a4:	00001388 	.word	0x00001388
 80035a8:	efffffff 	.word	0xefffffff

080035ac <memset>:
 80035ac:	0003      	movs	r3, r0
 80035ae:	1882      	adds	r2, r0, r2
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d100      	bne.n	80035b6 <memset+0xa>
 80035b4:	4770      	bx	lr
 80035b6:	7019      	strb	r1, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	e7f9      	b.n	80035b0 <memset+0x4>

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2600      	movs	r6, #0
 80035c0:	4c0c      	ldr	r4, [pc, #48]	@ (80035f4 <__libc_init_array+0x38>)
 80035c2:	4d0d      	ldr	r5, [pc, #52]	@ (80035f8 <__libc_init_array+0x3c>)
 80035c4:	1b64      	subs	r4, r4, r5
 80035c6:	10a4      	asrs	r4, r4, #2
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	2600      	movs	r6, #0
 80035ce:	f000 f819 	bl	8003604 <_init>
 80035d2:	4c0a      	ldr	r4, [pc, #40]	@ (80035fc <__libc_init_array+0x40>)
 80035d4:	4d0a      	ldr	r5, [pc, #40]	@ (8003600 <__libc_init_array+0x44>)
 80035d6:	1b64      	subs	r4, r4, r5
 80035d8:	10a4      	asrs	r4, r4, #2
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	00b3      	lsls	r3, r6, #2
 80035e2:	58eb      	ldr	r3, [r5, r3]
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	00b3      	lsls	r3, r6, #2
 80035ec:	58eb      	ldr	r3, [r5, r3]
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	080036c8 	.word	0x080036c8
 80035f8:	080036c8 	.word	0x080036c8
 80035fc:	080036cc 	.word	0x080036cc
 8003600:	080036c8 	.word	0x080036c8

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
