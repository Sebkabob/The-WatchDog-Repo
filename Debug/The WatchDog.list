
The WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c6c  08003c6c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c6c  08003c6c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c6c  08003c6c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003c80  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003c80  0000509c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2f7  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a69  00000000  00000000  0000f32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00010d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000807  00000000  00000000  00011840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f81c  00000000  00000000  00012047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc9c  00000000  00000000  00021863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a757  00000000  00000000  0002e4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00088c56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002780  00000000  00000000  00088c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0008b41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ba8 	.word	0x08003ba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003ba8 	.word	0x08003ba8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faed 	bl	8000818 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafb 	bl	8000868 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf1 	bl	8000868 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe5f 	bl	8000f68 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcb5 	bl	8000c20 <__aeabi_fsub>
 80002b6:	f000 fe57 	bl	8000f68 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	46ce      	mov	lr, r9
 80002c8:	4647      	mov	r7, r8
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5a      	lsrs	r2, r3, #9
 80002ce:	024e      	lsls	r6, r1, #9
 80002d0:	0045      	lsls	r5, r0, #1
 80002d2:	0fc4      	lsrs	r4, r0, #31
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	4691      	mov	r9, r2
 80002d8:	0e2d      	lsrs	r5, r5, #24
 80002da:	0a72      	lsrs	r2, r6, #9
 80002dc:	0e00      	lsrs	r0, r0, #24
 80002de:	4694      	mov	ip, r2
 80002e0:	b580      	push	{r7, lr}
 80002e2:	099b      	lsrs	r3, r3, #6
 80002e4:	0fc9      	lsrs	r1, r1, #31
 80002e6:	09b6      	lsrs	r6, r6, #6
 80002e8:	1a2a      	subs	r2, r5, r0
 80002ea:	428c      	cmp	r4, r1
 80002ec:	d021      	beq.n	8000332 <__aeabi_fadd+0x6e>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dd0d      	ble.n	800030e <__aeabi_fadd+0x4a>
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d12d      	bne.n	8000352 <__aeabi_fadd+0x8e>
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d100      	bne.n	80002fc <__aeabi_fadd+0x38>
 80002fa:	e08d      	b.n	8000418 <__aeabi_fadd+0x154>
 80002fc:	1e51      	subs	r1, r2, #1
 80002fe:	2a01      	cmp	r2, #1
 8000300:	d100      	bne.n	8000304 <__aeabi_fadd+0x40>
 8000302:	e11d      	b.n	8000540 <__aeabi_fadd+0x27c>
 8000304:	2aff      	cmp	r2, #255	@ 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0x46>
 8000308:	e0ab      	b.n	8000462 <__aeabi_fadd+0x19e>
 800030a:	000a      	movs	r2, r1
 800030c:	e027      	b.n	800035e <__aeabi_fadd+0x9a>
 800030e:	2a00      	cmp	r2, #0
 8000310:	d04d      	beq.n	80003ae <__aeabi_fadd+0xea>
 8000312:	1b42      	subs	r2, r0, r5
 8000314:	2d00      	cmp	r5, #0
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0x56>
 8000318:	e0cc      	b.n	80004b4 <__aeabi_fadd+0x1f0>
 800031a:	2b00      	cmp	r3, #0
 800031c:	d100      	bne.n	8000320 <__aeabi_fadd+0x5c>
 800031e:	e079      	b.n	8000414 <__aeabi_fadd+0x150>
 8000320:	1e54      	subs	r4, r2, #1
 8000322:	2a01      	cmp	r2, #1
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e128      	b.n	800057a <__aeabi_fadd+0x2b6>
 8000328:	2aff      	cmp	r2, #255	@ 0xff
 800032a:	d100      	bne.n	800032e <__aeabi_fadd+0x6a>
 800032c:	e097      	b.n	800045e <__aeabi_fadd+0x19a>
 800032e:	0022      	movs	r2, r4
 8000330:	e0c5      	b.n	80004be <__aeabi_fadd+0x1fa>
 8000332:	2a00      	cmp	r2, #0
 8000334:	dc00      	bgt.n	8000338 <__aeabi_fadd+0x74>
 8000336:	e096      	b.n	8000466 <__aeabi_fadd+0x1a2>
 8000338:	2800      	cmp	r0, #0
 800033a:	d04f      	beq.n	80003dc <__aeabi_fadd+0x118>
 800033c:	2dff      	cmp	r5, #255	@ 0xff
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x7e>
 8000340:	e08f      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	04c9      	lsls	r1, r1, #19
 8000346:	430e      	orrs	r6, r1
 8000348:	2a1b      	cmp	r2, #27
 800034a:	dd51      	ble.n	80003f0 <__aeabi_fadd+0x12c>
 800034c:	002a      	movs	r2, r5
 800034e:	3301      	adds	r3, #1
 8000350:	e018      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000352:	2dff      	cmp	r5, #255	@ 0xff
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x94>
 8000356:	e084      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	04c9      	lsls	r1, r1, #19
 800035c:	430e      	orrs	r6, r1
 800035e:	2101      	movs	r1, #1
 8000360:	2a1b      	cmp	r2, #27
 8000362:	dc08      	bgt.n	8000376 <__aeabi_fadd+0xb2>
 8000364:	0031      	movs	r1, r6
 8000366:	2020      	movs	r0, #32
 8000368:	40d1      	lsrs	r1, r2
 800036a:	1a82      	subs	r2, r0, r2
 800036c:	4096      	lsls	r6, r2
 800036e:	0032      	movs	r2, r6
 8000370:	1e50      	subs	r0, r2, #1
 8000372:	4182      	sbcs	r2, r0
 8000374:	4311      	orrs	r1, r2
 8000376:	1a5b      	subs	r3, r3, r1
 8000378:	015a      	lsls	r2, r3, #5
 800037a:	d459      	bmi.n	8000430 <__aeabi_fadd+0x16c>
 800037c:	2107      	movs	r1, #7
 800037e:	002a      	movs	r2, r5
 8000380:	4019      	ands	r1, r3
 8000382:	d049      	beq.n	8000418 <__aeabi_fadd+0x154>
 8000384:	210f      	movs	r1, #15
 8000386:	4019      	ands	r1, r3
 8000388:	2904      	cmp	r1, #4
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xca>
 800038c:	3304      	adds	r3, #4
 800038e:	0159      	lsls	r1, r3, #5
 8000390:	d542      	bpl.n	8000418 <__aeabi_fadd+0x154>
 8000392:	1c50      	adds	r0, r2, #1
 8000394:	2afe      	cmp	r2, #254	@ 0xfe
 8000396:	d03a      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000398:	019b      	lsls	r3, r3, #6
 800039a:	b2c0      	uxtb	r0, r0
 800039c:	0a5b      	lsrs	r3, r3, #9
 800039e:	05c0      	lsls	r0, r0, #23
 80003a0:	4318      	orrs	r0, r3
 80003a2:	07e4      	lsls	r4, r4, #31
 80003a4:	4320      	orrs	r0, r4
 80003a6:	bcc0      	pop	{r6, r7}
 80003a8:	46b9      	mov	r9, r7
 80003aa:	46b0      	mov	r8, r6
 80003ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003ae:	20fe      	movs	r0, #254	@ 0xfe
 80003b0:	4680      	mov	r8, r0
 80003b2:	1c6f      	adds	r7, r5, #1
 80003b4:	0038      	movs	r0, r7
 80003b6:	4647      	mov	r7, r8
 80003b8:	4207      	tst	r7, r0
 80003ba:	d000      	beq.n	80003be <__aeabi_fadd+0xfa>
 80003bc:	e08e      	b.n	80004dc <__aeabi_fadd+0x218>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0x100>
 80003c2:	e0b4      	b.n	800052e <__aeabi_fadd+0x26a>
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0x106>
 80003c8:	e0db      	b.n	8000582 <__aeabi_fadd+0x2be>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d06c      	beq.n	80004a8 <__aeabi_fadd+0x1e4>
 80003ce:	1b98      	subs	r0, r3, r6
 80003d0:	0145      	lsls	r5, r0, #5
 80003d2:	d400      	bmi.n	80003d6 <__aeabi_fadd+0x112>
 80003d4:	e0f7      	b.n	80005c6 <__aeabi_fadd+0x302>
 80003d6:	000c      	movs	r4, r1
 80003d8:	1af3      	subs	r3, r6, r3
 80003da:	e03d      	b.n	8000458 <__aeabi_fadd+0x194>
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d01b      	beq.n	8000418 <__aeabi_fadd+0x154>
 80003e0:	1e51      	subs	r1, r2, #1
 80003e2:	2a01      	cmp	r2, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_fadd+0x124>
 80003e6:	e082      	b.n	80004ee <__aeabi_fadd+0x22a>
 80003e8:	2aff      	cmp	r2, #255	@ 0xff
 80003ea:	d03a      	beq.n	8000462 <__aeabi_fadd+0x19e>
 80003ec:	000a      	movs	r2, r1
 80003ee:	e7ab      	b.n	8000348 <__aeabi_fadd+0x84>
 80003f0:	0031      	movs	r1, r6
 80003f2:	2020      	movs	r0, #32
 80003f4:	40d1      	lsrs	r1, r2
 80003f6:	1a82      	subs	r2, r0, r2
 80003f8:	4096      	lsls	r6, r2
 80003fa:	0032      	movs	r2, r6
 80003fc:	1e50      	subs	r0, r2, #1
 80003fe:	4182      	sbcs	r2, r0
 8000400:	430a      	orrs	r2, r1
 8000402:	189b      	adds	r3, r3, r2
 8000404:	015a      	lsls	r2, r3, #5
 8000406:	d5b9      	bpl.n	800037c <__aeabi_fadd+0xb8>
 8000408:	1c6a      	adds	r2, r5, #1
 800040a:	2dfe      	cmp	r5, #254	@ 0xfe
 800040c:	d175      	bne.n	80004fa <__aeabi_fadd+0x236>
 800040e:	20ff      	movs	r0, #255	@ 0xff
 8000410:	2300      	movs	r3, #0
 8000412:	e7c4      	b.n	800039e <__aeabi_fadd+0xda>
 8000414:	000c      	movs	r4, r1
 8000416:	0033      	movs	r3, r6
 8000418:	08db      	lsrs	r3, r3, #3
 800041a:	2aff      	cmp	r2, #255	@ 0xff
 800041c:	d146      	bne.n	80004ac <__aeabi_fadd+0x1e8>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f5      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000422:	2280      	movs	r2, #128	@ 0x80
 8000424:	03d2      	lsls	r2, r2, #15
 8000426:	4313      	orrs	r3, r2
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	20ff      	movs	r0, #255	@ 0xff
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	e7b6      	b.n	800039e <__aeabi_fadd+0xda>
 8000430:	019f      	lsls	r7, r3, #6
 8000432:	09bf      	lsrs	r7, r7, #6
 8000434:	0038      	movs	r0, r7
 8000436:	f000 fe03 	bl	8001040 <__clzsi2>
 800043a:	3805      	subs	r0, #5
 800043c:	4087      	lsls	r7, r0
 800043e:	4285      	cmp	r5, r0
 8000440:	dc24      	bgt.n	800048c <__aeabi_fadd+0x1c8>
 8000442:	003b      	movs	r3, r7
 8000444:	2120      	movs	r1, #32
 8000446:	1b42      	subs	r2, r0, r5
 8000448:	3201      	adds	r2, #1
 800044a:	40d3      	lsrs	r3, r2
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	4097      	lsls	r7, r2
 8000450:	1e7a      	subs	r2, r7, #1
 8000452:	4197      	sbcs	r7, r2
 8000454:	2200      	movs	r2, #0
 8000456:	433b      	orrs	r3, r7
 8000458:	0759      	lsls	r1, r3, #29
 800045a:	d193      	bne.n	8000384 <__aeabi_fadd+0xc0>
 800045c:	e797      	b.n	800038e <__aeabi_fadd+0xca>
 800045e:	000c      	movs	r4, r1
 8000460:	0033      	movs	r3, r6
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	e7db      	b.n	800041e <__aeabi_fadd+0x15a>
 8000466:	2a00      	cmp	r2, #0
 8000468:	d014      	beq.n	8000494 <__aeabi_fadd+0x1d0>
 800046a:	1b42      	subs	r2, r0, r5
 800046c:	2d00      	cmp	r5, #0
 800046e:	d14b      	bne.n	8000508 <__aeabi_fadd+0x244>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0d0      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000474:	1e51      	subs	r1, r2, #1
 8000476:	2a01      	cmp	r2, #1
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x1b8>
 800047a:	e09e      	b.n	80005ba <__aeabi_fadd+0x2f6>
 800047c:	2aff      	cmp	r2, #255	@ 0xff
 800047e:	d0ef      	beq.n	8000460 <__aeabi_fadd+0x19c>
 8000480:	000a      	movs	r2, r1
 8000482:	2a1b      	cmp	r2, #27
 8000484:	dd5f      	ble.n	8000546 <__aeabi_fadd+0x282>
 8000486:	0002      	movs	r2, r0
 8000488:	1c73      	adds	r3, r6, #1
 800048a:	e77b      	b.n	8000384 <__aeabi_fadd+0xc0>
 800048c:	4b50      	ldr	r3, [pc, #320]	@ (80005d0 <__aeabi_fadd+0x30c>)
 800048e:	1a2a      	subs	r2, r5, r0
 8000490:	403b      	ands	r3, r7
 8000492:	e7e1      	b.n	8000458 <__aeabi_fadd+0x194>
 8000494:	21fe      	movs	r1, #254	@ 0xfe
 8000496:	1c6a      	adds	r2, r5, #1
 8000498:	4211      	tst	r1, r2
 800049a:	d13b      	bne.n	8000514 <__aeabi_fadd+0x250>
 800049c:	2d00      	cmp	r5, #0
 800049e:	d15d      	bne.n	800055c <__aeabi_fadd+0x298>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d07f      	beq.n	80005a4 <__aeabi_fadd+0x2e0>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d17f      	bne.n	80005a8 <__aeabi_fadd+0x2e4>
 80004a8:	2200      	movs	r2, #0
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	025b      	lsls	r3, r3, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	b2d0      	uxtb	r0, r2
 80004b2:	e774      	b.n	800039e <__aeabi_fadd+0xda>
 80004b4:	28ff      	cmp	r0, #255	@ 0xff
 80004b6:	d0d2      	beq.n	800045e <__aeabi_fadd+0x19a>
 80004b8:	2480      	movs	r4, #128	@ 0x80
 80004ba:	04e4      	lsls	r4, r4, #19
 80004bc:	4323      	orrs	r3, r4
 80004be:	2401      	movs	r4, #1
 80004c0:	2a1b      	cmp	r2, #27
 80004c2:	dc07      	bgt.n	80004d4 <__aeabi_fadd+0x210>
 80004c4:	001c      	movs	r4, r3
 80004c6:	2520      	movs	r5, #32
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	1aaa      	subs	r2, r5, r2
 80004cc:	4093      	lsls	r3, r2
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	4193      	sbcs	r3, r2
 80004d2:	431c      	orrs	r4, r3
 80004d4:	1b33      	subs	r3, r6, r4
 80004d6:	0005      	movs	r5, r0
 80004d8:	000c      	movs	r4, r1
 80004da:	e74d      	b.n	8000378 <__aeabi_fadd+0xb4>
 80004dc:	1b9f      	subs	r7, r3, r6
 80004de:	017a      	lsls	r2, r7, #5
 80004e0:	d422      	bmi.n	8000528 <__aeabi_fadd+0x264>
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d1a6      	bne.n	8000434 <__aeabi_fadd+0x170>
 80004e6:	2400      	movs	r4, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	e757      	b.n	800039e <__aeabi_fadd+0xda>
 80004ee:	199b      	adds	r3, r3, r6
 80004f0:	2501      	movs	r5, #1
 80004f2:	3201      	adds	r2, #1
 80004f4:	0159      	lsls	r1, r3, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80004f8:	e740      	b.n	800037c <__aeabi_fadd+0xb8>
 80004fa:	2101      	movs	r1, #1
 80004fc:	4835      	ldr	r0, [pc, #212]	@ (80005d4 <__aeabi_fadd+0x310>)
 80004fe:	4019      	ands	r1, r3
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	4003      	ands	r3, r0
 8000504:	430b      	orrs	r3, r1
 8000506:	e7a7      	b.n	8000458 <__aeabi_fadd+0x194>
 8000508:	28ff      	cmp	r0, #255	@ 0xff
 800050a:	d0a9      	beq.n	8000460 <__aeabi_fadd+0x19c>
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	04c9      	lsls	r1, r1, #19
 8000510:	430b      	orrs	r3, r1
 8000512:	e7b6      	b.n	8000482 <__aeabi_fadd+0x1be>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x256>
 8000518:	e779      	b.n	800040e <__aeabi_fadd+0x14a>
 800051a:	199b      	adds	r3, r3, r6
 800051c:	085b      	lsrs	r3, r3, #1
 800051e:	0759      	lsls	r1, r3, #29
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x260>
 8000522:	e72f      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	e7c1      	b.n	80004ac <__aeabi_fadd+0x1e8>
 8000528:	000c      	movs	r4, r1
 800052a:	1af7      	subs	r7, r6, r3
 800052c:	e782      	b.n	8000434 <__aeabi_fadd+0x170>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d12c      	bne.n	800058c <__aeabi_fadd+0x2c8>
 8000532:	2e00      	cmp	r6, #0
 8000534:	d193      	bne.n	800045e <__aeabi_fadd+0x19a>
 8000536:	2380      	movs	r3, #128	@ 0x80
 8000538:	2400      	movs	r4, #0
 800053a:	20ff      	movs	r0, #255	@ 0xff
 800053c:	03db      	lsls	r3, r3, #15
 800053e:	e72e      	b.n	800039e <__aeabi_fadd+0xda>
 8000540:	2501      	movs	r5, #1
 8000542:	1b9b      	subs	r3, r3, r6
 8000544:	e718      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000546:	0019      	movs	r1, r3
 8000548:	2520      	movs	r5, #32
 800054a:	40d1      	lsrs	r1, r2
 800054c:	1aaa      	subs	r2, r5, r2
 800054e:	4093      	lsls	r3, r2
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4193      	sbcs	r3, r2
 8000554:	430b      	orrs	r3, r1
 8000556:	0005      	movs	r5, r0
 8000558:	199b      	adds	r3, r3, r6
 800055a:	e753      	b.n	8000404 <__aeabi_fadd+0x140>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x29e>
 8000560:	e77e      	b.n	8000460 <__aeabi_fadd+0x19c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x2a4>
 8000566:	e77c      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	4591      	cmp	r9, r2
 800056e:	d302      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 8000570:	4594      	cmp	ip, r2
 8000572:	d200      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 8000574:	0033      	movs	r3, r6
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	e753      	b.n	8000422 <__aeabi_fadd+0x15e>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	3501      	adds	r5, #1
 8000580:	e6fa      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d0af      	beq.n	80004e6 <__aeabi_fadd+0x222>
 8000586:	000c      	movs	r4, r1
 8000588:	0033      	movs	r3, r6
 800058a:	e78d      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x2ce>
 8000590:	e767      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	03d2      	lsls	r2, r2, #15
 8000596:	4591      	cmp	r9, r2
 8000598:	d3ed      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 800059a:	4594      	cmp	ip, r2
 800059c:	d2eb      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 800059e:	000c      	movs	r4, r1
 80005a0:	0033      	movs	r3, r6
 80005a2:	e7e8      	b.n	8000576 <__aeabi_fadd+0x2b2>
 80005a4:	0033      	movs	r3, r6
 80005a6:	e77f      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 80005a8:	199b      	adds	r3, r3, r6
 80005aa:	2200      	movs	r2, #0
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d5b9      	bpl.n	8000524 <__aeabi_fadd+0x260>
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <__aeabi_fadd+0x30c>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	2201      	movs	r2, #1
 80005b8:	e778      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ba:	199b      	adds	r3, r3, r6
 80005bc:	3201      	adds	r2, #1
 80005be:	3501      	adds	r5, #1
 80005c0:	0159      	lsls	r1, r3, #5
 80005c2:	d49a      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80005c4:	e6da      	b.n	800037c <__aeabi_fadd+0xb8>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d08d      	beq.n	80004e6 <__aeabi_fadd+0x222>
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	e76e      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	fbffffff 	.word	0xfbffffff
 80005d4:	7dffffff 	.word	0x7dffffff

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0244      	lsls	r4, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0e      	adds	r6, r1, #0
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc5      	lsrs	r5, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03c      	beq.n	800066c <__aeabi_fdiv+0x94>
 80005f2:	2fff      	cmp	r7, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fdiv+0xa4>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	4699      	mov	r9, r3
 80005fc:	469a      	mov	sl, r3
 80005fe:	00e4      	lsls	r4, r4, #3
 8000600:	04d2      	lsls	r2, r2, #19
 8000602:	4314      	orrs	r4, r2
 8000604:	3f7f      	subs	r7, #127	@ 0x7f
 8000606:	0273      	lsls	r3, r6, #9
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0073      	lsls	r3, r6, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0ff6      	lsrs	r6, r6, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01b      	beq.n	800064e <__aeabi_fdiv+0x76>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d013      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 800061a:	4642      	mov	r2, r8
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	04c9      	lsls	r1, r1, #19
 8000622:	4311      	orrs	r1, r2
 8000624:	4688      	mov	r8, r1
 8000626:	2000      	movs	r0, #0
 8000628:	3b7f      	subs	r3, #127	@ 0x7f
 800062a:	0029      	movs	r1, r5
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4071      	eors	r1, r6
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e0b5      	b.n	80007a6 <__aeabi_fdiv+0x1ce>
 800063a:	4a74      	ldr	r2, [pc, #464]	@ (800080c <__aeabi_fdiv+0x234>)
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	58d3      	ldr	r3, [r2, r3]
 8000640:	469f      	mov	pc, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <__aeabi_fdiv+0xf0>
 8000648:	3fff      	subs	r7, #255	@ 0xff
 800064a:	3302      	adds	r3, #2
 800064c:	e003      	b.n	8000656 <__aeabi_fdiv+0x7e>
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12d      	bne.n	80006b0 <__aeabi_fdiv+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	0029      	movs	r1, r5
 8000658:	464a      	mov	r2, r9
 800065a:	4071      	eors	r1, r6
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	2a0e      	cmp	r2, #14
 8000662:	d838      	bhi.n	80006d6 <__aeabi_fdiv+0xfe>
 8000664:	486a      	ldr	r0, [pc, #424]	@ (8000810 <__aeabi_fdiv+0x238>)
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	5882      	ldr	r2, [r0, r2]
 800066a:	4697      	mov	pc, r2
 800066c:	2c00      	cmp	r4, #0
 800066e:	d113      	bne.n	8000698 <__aeabi_fdiv+0xc0>
 8000670:	2304      	movs	r3, #4
 8000672:	4699      	mov	r9, r3
 8000674:	3b03      	subs	r3, #3
 8000676:	2700      	movs	r7, #0
 8000678:	469a      	mov	sl, r3
 800067a:	e7c4      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800067c:	2c00      	cmp	r4, #0
 800067e:	d105      	bne.n	800068c <__aeabi_fdiv+0xb4>
 8000680:	2308      	movs	r3, #8
 8000682:	4699      	mov	r9, r3
 8000684:	3b06      	subs	r3, #6
 8000686:	27ff      	movs	r7, #255	@ 0xff
 8000688:	469a      	mov	sl, r3
 800068a:	e7bc      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800068c:	230c      	movs	r3, #12
 800068e:	4699      	mov	r9, r3
 8000690:	3b09      	subs	r3, #9
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	469a      	mov	sl, r3
 8000696:	e7b6      	b.n	8000606 <__aeabi_fdiv+0x2e>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 fcd1 	bl	8001040 <__clzsi2>
 800069e:	2776      	movs	r7, #118	@ 0x76
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409c      	lsls	r4, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	427f      	negs	r7, r7
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	1a3f      	subs	r7, r7, r0
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x2e>
 80006b0:	4640      	mov	r0, r8
 80006b2:	f000 fcc5 	bl	8001040 <__clzsi2>
 80006b6:	4642      	mov	r2, r8
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409a      	lsls	r2, r3
 80006bc:	2376      	movs	r3, #118	@ 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7b0      	b.n	800062a <__aeabi_fdiv+0x52>
 80006c8:	2303      	movs	r3, #3
 80006ca:	464a      	mov	r2, r9
 80006cc:	431a      	orrs	r2, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	2003      	movs	r0, #3
 80006d2:	33fc      	adds	r3, #252	@ 0xfc
 80006d4:	e7a9      	b.n	800062a <__aeabi_fdiv+0x52>
 80006d6:	000d      	movs	r5, r1
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	07ed      	lsls	r5, r5, #31
 80006e0:	4310      	orrs	r0, r2
 80006e2:	4328      	orrs	r0, r5
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	000d      	movs	r5, r1
 80006f0:	2000      	movs	r0, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7f2      	b.n	80006dc <__aeabi_fdiv+0x104>
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d0ed      	beq.n	80006d8 <__aeabi_fdiv+0x100>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d033      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000700:	46a0      	mov	r8, r4
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <__aeabi_fdiv+0x13a>
 8000706:	2000      	movs	r0, #0
 8000708:	2200      	movs	r2, #0
 800070a:	e7e7      	b.n	80006dc <__aeabi_fdiv+0x104>
 800070c:	0035      	movs	r5, r6
 800070e:	2803      	cmp	r0, #3
 8000710:	d07a      	beq.n	8000808 <__aeabi_fdiv+0x230>
 8000712:	003b      	movs	r3, r7
 8000714:	337f      	adds	r3, #127	@ 0x7f
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd2d      	ble.n	8000776 <__aeabi_fdiv+0x19e>
 800071a:	4642      	mov	r2, r8
 800071c:	0752      	lsls	r2, r2, #29
 800071e:	d007      	beq.n	8000730 <__aeabi_fdiv+0x158>
 8000720:	220f      	movs	r2, #15
 8000722:	4641      	mov	r1, r8
 8000724:	400a      	ands	r2, r1
 8000726:	2a04      	cmp	r2, #4
 8000728:	d002      	beq.n	8000730 <__aeabi_fdiv+0x158>
 800072a:	2204      	movs	r2, #4
 800072c:	4694      	mov	ip, r2
 800072e:	44e0      	add	r8, ip
 8000730:	4642      	mov	r2, r8
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	d505      	bpl.n	8000742 <__aeabi_fdiv+0x16a>
 8000736:	4642      	mov	r2, r8
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <__aeabi_fdiv+0x23c>)
 800073a:	401a      	ands	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4690      	mov	r8, r2
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	2bfe      	cmp	r3, #254	@ 0xfe
 8000744:	dcc8      	bgt.n	80006d8 <__aeabi_fdiv+0x100>
 8000746:	4642      	mov	r2, r8
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e7c5      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	2500      	movs	r5, #0
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	03d2      	lsls	r2, r2, #15
 8000758:	e7c0      	b.n	80006dc <__aeabi_fdiv+0x104>
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	4214      	tst	r4, r2
 8000760:	d002      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000762:	4643      	mov	r3, r8
 8000764:	4213      	tst	r3, r2
 8000766:	d049      	beq.n	80007fc <__aeabi_fdiv+0x224>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	4322      	orrs	r2, r4
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	20ff      	movs	r0, #255	@ 0xff
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e7b2      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000776:	2201      	movs	r2, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dcc3      	bgt.n	8000706 <__aeabi_fdiv+0x12e>
 800077e:	4642      	mov	r2, r8
 8000780:	40da      	lsrs	r2, r3
 8000782:	4643      	mov	r3, r8
 8000784:	379e      	adds	r7, #158	@ 0x9e
 8000786:	40bb      	lsls	r3, r7
 8000788:	1e59      	subs	r1, r3, #1
 800078a:	418b      	sbcs	r3, r1
 800078c:	431a      	orrs	r2, r3
 800078e:	0753      	lsls	r3, r2, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 8000792:	230f      	movs	r3, #15
 8000794:	4013      	ands	r3, r2
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 800079a:	3204      	adds	r2, #4
 800079c:	0153      	lsls	r3, r2, #5
 800079e:	d529      	bpl.n	80007f4 <__aeabi_fdiv+0x21c>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2200      	movs	r2, #0
 80007a4:	e79a      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007a6:	4642      	mov	r2, r8
 80007a8:	0163      	lsls	r3, r4, #5
 80007aa:	0155      	lsls	r5, r2, #5
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d215      	bcs.n	80007dc <__aeabi_fdiv+0x204>
 80007b0:	201b      	movs	r0, #27
 80007b2:	2200      	movs	r2, #0
 80007b4:	3f01      	subs	r7, #1
 80007b6:	2601      	movs	r6, #1
 80007b8:	001c      	movs	r4, r3
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2c00      	cmp	r4, #0
 80007c0:	db01      	blt.n	80007c6 <__aeabi_fdiv+0x1ee>
 80007c2:	429d      	cmp	r5, r3
 80007c4:	d801      	bhi.n	80007ca <__aeabi_fdiv+0x1f2>
 80007c6:	1b5b      	subs	r3, r3, r5
 80007c8:	4332      	orrs	r2, r6
 80007ca:	3801      	subs	r0, #1
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f3      	bne.n	80007b8 <__aeabi_fdiv+0x1e0>
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4183      	sbcs	r3, r0
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e79a      	b.n	8000712 <__aeabi_fdiv+0x13a>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e8      	b.n	80007b6 <__aeabi_fdiv+0x1de>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	425a      	negs	r2, r3
 80007e8:	4153      	adcs	r3, r2
 80007ea:	425b      	negs	r3, r3
 80007ec:	0035      	movs	r5, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	b2d8      	uxtb	r0, r3
 80007f2:	e773      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e76f      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	0035      	movs	r5, r6
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	e769      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000808:	4644      	mov	r4, r8
 800080a:	e7ad      	b.n	8000768 <__aeabi_fdiv+0x190>
 800080c:	08003bc0 	.word	0x08003bc0
 8000810:	08003c00 	.word	0x08003c00
 8000814:	f7ffffff 	.word	0xf7ffffff

08000818 <__eqsf2>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	0042      	lsls	r2, r0, #1
 800081c:	024e      	lsls	r6, r1, #9
 800081e:	004c      	lsls	r4, r1, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e12      	lsrs	r2, r2, #24
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	0e24      	lsrs	r4, r4, #24
 800082c:	0fc9      	lsrs	r1, r1, #31
 800082e:	2aff      	cmp	r2, #255	@ 0xff
 8000830:	d010      	beq.n	8000854 <__eqsf2+0x3c>
 8000832:	2cff      	cmp	r4, #255	@ 0xff
 8000834:	d00c      	beq.n	8000850 <__eqsf2+0x38>
 8000836:	2001      	movs	r0, #1
 8000838:	42a2      	cmp	r2, r4
 800083a:	d10a      	bne.n	8000852 <__eqsf2+0x3a>
 800083c:	42b5      	cmp	r5, r6
 800083e:	d108      	bne.n	8000852 <__eqsf2+0x3a>
 8000840:	428b      	cmp	r3, r1
 8000842:	d00f      	beq.n	8000864 <__eqsf2+0x4c>
 8000844:	2a00      	cmp	r2, #0
 8000846:	d104      	bne.n	8000852 <__eqsf2+0x3a>
 8000848:	0028      	movs	r0, r5
 800084a:	1e43      	subs	r3, r0, #1
 800084c:	4198      	sbcs	r0, r3
 800084e:	e000      	b.n	8000852 <__eqsf2+0x3a>
 8000850:	2001      	movs	r0, #1
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2001      	movs	r0, #1
 8000856:	2cff      	cmp	r4, #255	@ 0xff
 8000858:	d1fb      	bne.n	8000852 <__eqsf2+0x3a>
 800085a:	4335      	orrs	r5, r6
 800085c:	d1f9      	bne.n	8000852 <__eqsf2+0x3a>
 800085e:	404b      	eors	r3, r1
 8000860:	0018      	movs	r0, r3
 8000862:	e7f6      	b.n	8000852 <__eqsf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	e7f4      	b.n	8000852 <__eqsf2+0x3a>

08000868 <__gesf2>:
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	0042      	lsls	r2, r0, #1
 800086c:	0244      	lsls	r4, r0, #9
 800086e:	024d      	lsls	r5, r1, #9
 8000870:	0fc3      	lsrs	r3, r0, #31
 8000872:	0048      	lsls	r0, r1, #1
 8000874:	0a64      	lsrs	r4, r4, #9
 8000876:	0e12      	lsrs	r2, r2, #24
 8000878:	0a6d      	lsrs	r5, r5, #9
 800087a:	0e00      	lsrs	r0, r0, #24
 800087c:	0fc9      	lsrs	r1, r1, #31
 800087e:	2aff      	cmp	r2, #255	@ 0xff
 8000880:	d019      	beq.n	80008b6 <__gesf2+0x4e>
 8000882:	28ff      	cmp	r0, #255	@ 0xff
 8000884:	d00b      	beq.n	800089e <__gesf2+0x36>
 8000886:	2a00      	cmp	r2, #0
 8000888:	d11e      	bne.n	80008c8 <__gesf2+0x60>
 800088a:	2800      	cmp	r0, #0
 800088c:	d10b      	bne.n	80008a6 <__gesf2+0x3e>
 800088e:	2d00      	cmp	r5, #0
 8000890:	d027      	beq.n	80008e2 <__gesf2+0x7a>
 8000892:	2c00      	cmp	r4, #0
 8000894:	d134      	bne.n	8000900 <__gesf2+0x98>
 8000896:	2900      	cmp	r1, #0
 8000898:	d02f      	beq.n	80008fa <__gesf2+0x92>
 800089a:	0008      	movs	r0, r1
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d128      	bne.n	80008f4 <__gesf2+0x8c>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d101      	bne.n	80008aa <__gesf2+0x42>
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d0f5      	beq.n	8000896 <__gesf2+0x2e>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d107      	bne.n	80008be <__gesf2+0x56>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d023      	beq.n	80008fa <__gesf2+0x92>
 80008b2:	0018      	movs	r0, r3
 80008b4:	e7f2      	b.n	800089c <__gesf2+0x34>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d11c      	bne.n	80008f4 <__gesf2+0x8c>
 80008ba:	28ff      	cmp	r0, #255	@ 0xff
 80008bc:	d014      	beq.n	80008e8 <__gesf2+0x80>
 80008be:	1e58      	subs	r0, r3, #1
 80008c0:	2302      	movs	r3, #2
 80008c2:	4018      	ands	r0, r3
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7e9      	b.n	800089c <__gesf2+0x34>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d0f8      	beq.n	80008be <__gesf2+0x56>
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d1f6      	bne.n	80008be <__gesf2+0x56>
 80008d0:	4282      	cmp	r2, r0
 80008d2:	dcf4      	bgt.n	80008be <__gesf2+0x56>
 80008d4:	dbeb      	blt.n	80008ae <__gesf2+0x46>
 80008d6:	42ac      	cmp	r4, r5
 80008d8:	d8f1      	bhi.n	80008be <__gesf2+0x56>
 80008da:	2000      	movs	r0, #0
 80008dc:	42ac      	cmp	r4, r5
 80008de:	d2dd      	bcs.n	800089c <__gesf2+0x34>
 80008e0:	e7e5      	b.n	80008ae <__gesf2+0x46>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d0da      	beq.n	800089c <__gesf2+0x34>
 80008e6:	e7ea      	b.n	80008be <__gesf2+0x56>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d103      	bne.n	80008f4 <__gesf2+0x8c>
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d1e6      	bne.n	80008be <__gesf2+0x56>
 80008f0:	2000      	movs	r0, #0
 80008f2:	e7d3      	b.n	800089c <__gesf2+0x34>
 80008f4:	2002      	movs	r0, #2
 80008f6:	4240      	negs	r0, r0
 80008f8:	e7d0      	b.n	800089c <__gesf2+0x34>
 80008fa:	2001      	movs	r0, #1
 80008fc:	4240      	negs	r0, r0
 80008fe:	e7cd      	b.n	800089c <__gesf2+0x34>
 8000900:	428b      	cmp	r3, r1
 8000902:	d0e8      	beq.n	80008d6 <__gesf2+0x6e>
 8000904:	e7db      	b.n	80008be <__gesf2+0x56>
 8000906:	46c0      	nop			@ (mov r8, r8)

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	@ 0xff
 8000920:	d01a      	beq.n	8000958 <__lesf2+0x50>
 8000922:	28ff      	cmp	r0, #255	@ 0xff
 8000924:	d00e      	beq.n	8000944 <__lesf2+0x3c>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d11e      	bne.n	8000968 <__lesf2+0x60>
 800092a:	2800      	cmp	r0, #0
 800092c:	d10e      	bne.n	800094c <__lesf2+0x44>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d02a      	beq.n	8000988 <__lesf2+0x80>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d00c      	beq.n	8000950 <__lesf2+0x48>
 8000936:	428b      	cmp	r3, r1
 8000938:	d01d      	beq.n	8000976 <__lesf2+0x6e>
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	2302      	movs	r3, #2
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	e010      	b.n	8000966 <__lesf2+0x5e>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d10d      	bne.n	8000964 <__lesf2+0x5c>
 8000948:	2a00      	cmp	r2, #0
 800094a:	d120      	bne.n	800098e <__lesf2+0x86>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d11e      	bne.n	800098e <__lesf2+0x86>
 8000950:	2900      	cmp	r1, #0
 8000952:	d023      	beq.n	800099c <__lesf2+0x94>
 8000954:	0008      	movs	r0, r1
 8000956:	e006      	b.n	8000966 <__lesf2+0x5e>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d103      	bne.n	8000964 <__lesf2+0x5c>
 800095c:	28ff      	cmp	r0, #255	@ 0xff
 800095e:	d1ec      	bne.n	800093a <__lesf2+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d017      	beq.n	8000994 <__lesf2+0x8c>
 8000964:	2002      	movs	r0, #2
 8000966:	bd30      	pop	{r4, r5, pc}
 8000968:	2800      	cmp	r0, #0
 800096a:	d0e6      	beq.n	800093a <__lesf2+0x32>
 800096c:	428b      	cmp	r3, r1
 800096e:	d1e4      	bne.n	800093a <__lesf2+0x32>
 8000970:	4282      	cmp	r2, r0
 8000972:	dce2      	bgt.n	800093a <__lesf2+0x32>
 8000974:	db04      	blt.n	8000980 <__lesf2+0x78>
 8000976:	42ac      	cmp	r4, r5
 8000978:	d8df      	bhi.n	800093a <__lesf2+0x32>
 800097a:	2000      	movs	r0, #0
 800097c:	42ac      	cmp	r4, r5
 800097e:	d2f2      	bcs.n	8000966 <__lesf2+0x5e>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00b      	beq.n	800099c <__lesf2+0x94>
 8000984:	0018      	movs	r0, r3
 8000986:	e7ee      	b.n	8000966 <__lesf2+0x5e>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d0ec      	beq.n	8000966 <__lesf2+0x5e>
 800098c:	e7d5      	b.n	800093a <__lesf2+0x32>
 800098e:	428b      	cmp	r3, r1
 8000990:	d1d3      	bne.n	800093a <__lesf2+0x32>
 8000992:	e7f5      	b.n	8000980 <__lesf2+0x78>
 8000994:	2000      	movs	r0, #0
 8000996:	428b      	cmp	r3, r1
 8000998:	d0e5      	beq.n	8000966 <__lesf2+0x5e>
 800099a:	e7ce      	b.n	800093a <__lesf2+0x32>
 800099c:	2001      	movs	r0, #1
 800099e:	4240      	negs	r0, r0
 80009a0:	e7e1      	b.n	8000966 <__lesf2+0x5e>
 80009a2:	46c0      	nop			@ (mov r8, r8)

080009a4 <__aeabi_fmul>:
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	464f      	mov	r7, r9
 80009a8:	4646      	mov	r6, r8
 80009aa:	46d6      	mov	lr, sl
 80009ac:	0243      	lsls	r3, r0, #9
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	0045      	lsls	r5, r0, #1
 80009b2:	b5c0      	push	{r6, r7, lr}
 80009b4:	4699      	mov	r9, r3
 80009b6:	1c0f      	adds	r7, r1, #0
 80009b8:	0e2d      	lsrs	r5, r5, #24
 80009ba:	0fc6      	lsrs	r6, r0, #31
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fmul+0x1e>
 80009c0:	e088      	b.n	8000ad4 <__aeabi_fmul+0x130>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x24>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fmul+0x140>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	04d2      	lsls	r2, r2, #19
 80009ce:	431a      	orrs	r2, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	4691      	mov	r9, r2
 80009d4:	4698      	mov	r8, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	3d7f      	subs	r5, #127	@ 0x7f
 80009da:	027c      	lsls	r4, r7, #9
 80009dc:	007b      	lsls	r3, r7, #1
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	0e1b      	lsrs	r3, r3, #24
 80009e2:	0fff      	lsrs	r7, r7, #31
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d068      	beq.n	8000aba <__aeabi_fmul+0x116>
 80009e8:	2bff      	cmp	r3, #255	@ 0xff
 80009ea:	d021      	beq.n	8000a30 <__aeabi_fmul+0x8c>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	00e4      	lsls	r4, r4, #3
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4314      	orrs	r4, r2
 80009f4:	4642      	mov	r2, r8
 80009f6:	3b7f      	subs	r3, #127	@ 0x7f
 80009f8:	195b      	adds	r3, r3, r5
 80009fa:	2100      	movs	r1, #0
 80009fc:	1c5d      	adds	r5, r3, #1
 80009fe:	2a0a      	cmp	r2, #10
 8000a00:	dc2e      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000a02:	407e      	eors	r6, r7
 8000a04:	4642      	mov	r2, r8
 8000a06:	2a02      	cmp	r2, #2
 8000a08:	dc23      	bgt.n	8000a52 <__aeabi_fmul+0xae>
 8000a0a:	3a01      	subs	r2, #1
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d900      	bls.n	8000a12 <__aeabi_fmul+0x6e>
 8000a10:	e0bd      	b.n	8000b8e <__aeabi_fmul+0x1ea>
 8000a12:	2902      	cmp	r1, #2
 8000a14:	d06e      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a16:	2901      	cmp	r1, #1
 8000a18:	d12c      	bne.n	8000a74 <__aeabi_fmul+0xd0>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	05c0      	lsls	r0, r0, #23
 8000a20:	07f6      	lsls	r6, r6, #31
 8000a22:	4310      	orrs	r0, r2
 8000a24:	4330      	orrs	r0, r6
 8000a26:	bce0      	pop	{r5, r6, r7}
 8000a28:	46ba      	mov	sl, r7
 8000a2a:	46b1      	mov	r9, r6
 8000a2c:	46a8      	mov	r8, r5
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	002b      	movs	r3, r5
 8000a32:	33ff      	adds	r3, #255	@ 0xff
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d065      	beq.n	8000b04 <__aeabi_fmul+0x160>
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	0032      	movs	r2, r6
 8000a40:	3501      	adds	r5, #1
 8000a42:	4688      	mov	r8, r1
 8000a44:	407a      	eors	r2, r7
 8000a46:	35ff      	adds	r5, #255	@ 0xff
 8000a48:	290a      	cmp	r1, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_fmul+0xaa>
 8000a4c:	e0d8      	b.n	8000c00 <__aeabi_fmul+0x25c>
 8000a4e:	0016      	movs	r6, r2
 8000a50:	2103      	movs	r1, #3
 8000a52:	4640      	mov	r0, r8
 8000a54:	2201      	movs	r2, #1
 8000a56:	4082      	lsls	r2, r0
 8000a58:	20a6      	movs	r0, #166	@ 0xa6
 8000a5a:	00c0      	lsls	r0, r0, #3
 8000a5c:	4202      	tst	r2, r0
 8000a5e:	d020      	beq.n	8000aa2 <__aeabi_fmul+0xfe>
 8000a60:	4653      	mov	r3, sl
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d046      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0xc8>
 8000a6a:	e0bb      	b.n	8000be4 <__aeabi_fmul+0x240>
 8000a6c:	4651      	mov	r1, sl
 8000a6e:	464c      	mov	r4, r9
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d0d2      	beq.n	8000a1a <__aeabi_fmul+0x76>
 8000a74:	002b      	movs	r3, r5
 8000a76:	337f      	adds	r3, #127	@ 0x7f
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dd70      	ble.n	8000b5e <__aeabi_fmul+0x1ba>
 8000a7c:	0762      	lsls	r2, r4, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a80:	220f      	movs	r2, #15
 8000a82:	4022      	ands	r2, r4
 8000a84:	2a04      	cmp	r2, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a88:	3404      	adds	r4, #4
 8000a8a:	0122      	lsls	r2, r4, #4
 8000a8c:	d503      	bpl.n	8000a96 <__aeabi_fmul+0xf2>
 8000a8e:	4b63      	ldr	r3, [pc, #396]	@ (8000c1c <__aeabi_fmul+0x278>)
 8000a90:	401c      	ands	r4, r3
 8000a92:	002b      	movs	r3, r5
 8000a94:	3380      	adds	r3, #128	@ 0x80
 8000a96:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a98:	dc2c      	bgt.n	8000af4 <__aeabi_fmul+0x150>
 8000a9a:	01a2      	lsls	r2, r4, #6
 8000a9c:	0a52      	lsrs	r2, r2, #9
 8000a9e:	b2d8      	uxtb	r0, r3
 8000aa0:	e7bd      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000aa2:	2090      	movs	r0, #144	@ 0x90
 8000aa4:	0080      	lsls	r0, r0, #2
 8000aa6:	4202      	tst	r2, r0
 8000aa8:	d127      	bne.n	8000afa <__aeabi_fmul+0x156>
 8000aaa:	38b9      	subs	r0, #185	@ 0xb9
 8000aac:	38ff      	subs	r0, #255	@ 0xff
 8000aae:	4210      	tst	r0, r2
 8000ab0:	d06d      	beq.n	8000b8e <__aeabi_fmul+0x1ea>
 8000ab2:	003e      	movs	r6, r7
 8000ab4:	46a1      	mov	r9, r4
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	e7d2      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d141      	bne.n	8000b42 <__aeabi_fmul+0x19e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	002b      	movs	r3, r5
 8000ac8:	4642      	mov	r2, r8
 8000aca:	2101      	movs	r1, #1
 8000acc:	1c5d      	adds	r5, r3, #1
 8000ace:	2a0a      	cmp	r2, #10
 8000ad0:	dd97      	ble.n	8000a02 <__aeabi_fmul+0x5e>
 8000ad2:	e7c5      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d126      	bne.n	8000b26 <__aeabi_fmul+0x182>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	4698      	mov	r8, r3
 8000adc:	3b03      	subs	r3, #3
 8000ade:	2500      	movs	r5, #0
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e77a      	b.n	80009da <__aeabi_fmul+0x36>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d118      	bne.n	8000b1a <__aeabi_fmul+0x176>
 8000ae8:	2308      	movs	r3, #8
 8000aea:	4698      	mov	r8, r3
 8000aec:	3b06      	subs	r3, #6
 8000aee:	25ff      	movs	r5, #255	@ 0xff
 8000af0:	469a      	mov	sl, r3
 8000af2:	e772      	b.n	80009da <__aeabi_fmul+0x36>
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	2200      	movs	r2, #0
 8000af8:	e791      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	2600      	movs	r6, #0
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	03d2      	lsls	r2, r2, #15
 8000b02:	e78c      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b04:	4641      	mov	r1, r8
 8000b06:	2202      	movs	r2, #2
 8000b08:	3501      	adds	r5, #1
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	35ff      	adds	r5, #255	@ 0xff
 8000b10:	290a      	cmp	r1, #10
 8000b12:	dca5      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000b14:	2102      	movs	r1, #2
 8000b16:	407e      	eors	r6, r7
 8000b18:	e774      	b.n	8000a04 <__aeabi_fmul+0x60>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	3b09      	subs	r3, #9
 8000b20:	25ff      	movs	r5, #255	@ 0xff
 8000b22:	469a      	mov	sl, r3
 8000b24:	e759      	b.n	80009da <__aeabi_fmul+0x36>
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fa8a 	bl	8001040 <__clzsi2>
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	1f43      	subs	r3, r0, #5
 8000b30:	2576      	movs	r5, #118	@ 0x76
 8000b32:	409a      	lsls	r2, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	426d      	negs	r5, r5
 8000b38:	4691      	mov	r9, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	e74b      	b.n	80009da <__aeabi_fmul+0x36>
 8000b42:	0020      	movs	r0, r4
 8000b44:	f000 fa7c 	bl	8001040 <__clzsi2>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	1f43      	subs	r3, r0, #5
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	1a2b      	subs	r3, r5, r0
 8000b50:	3b76      	subs	r3, #118	@ 0x76
 8000b52:	2100      	movs	r1, #0
 8000b54:	1c5d      	adds	r5, r3, #1
 8000b56:	2a0a      	cmp	r2, #10
 8000b58:	dc00      	bgt.n	8000b5c <__aeabi_fmul+0x1b8>
 8000b5a:	e752      	b.n	8000a02 <__aeabi_fmul+0x5e>
 8000b5c:	e780      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b1b      	cmp	r3, #27
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_fmul+0x1c4>
 8000b66:	e758      	b.n	8000a1a <__aeabi_fmul+0x76>
 8000b68:	359e      	adds	r5, #158	@ 0x9e
 8000b6a:	0022      	movs	r2, r4
 8000b6c:	40ac      	lsls	r4, r5
 8000b6e:	40da      	lsrs	r2, r3
 8000b70:	1e63      	subs	r3, r4, #1
 8000b72:	419c      	sbcs	r4, r3
 8000b74:	4322      	orrs	r2, r4
 8000b76:	0753      	lsls	r3, r2, #29
 8000b78:	d004      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d000      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b82:	3204      	adds	r2, #4
 8000b84:	0153      	lsls	r3, r2, #5
 8000b86:	d537      	bpl.n	8000bf8 <__aeabi_fmul+0x254>
 8000b88:	2001      	movs	r0, #1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e747      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	464a      	mov	r2, r9
 8000b92:	0424      	lsls	r4, r4, #16
 8000b94:	0c24      	lsrs	r4, r4, #16
 8000b96:	0027      	movs	r7, r4
 8000b98:	0c10      	lsrs	r0, r2, #16
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	0c12      	lsrs	r2, r2, #16
 8000b9e:	4344      	muls	r4, r0
 8000ba0:	4357      	muls	r7, r2
 8000ba2:	4348      	muls	r0, r1
 8000ba4:	4351      	muls	r1, r2
 8000ba6:	0c3a      	lsrs	r2, r7, #16
 8000ba8:	1909      	adds	r1, r1, r4
 8000baa:	1852      	adds	r2, r2, r1
 8000bac:	4294      	cmp	r4, r2
 8000bae:	d903      	bls.n	8000bb8 <__aeabi_fmul+0x214>
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0249      	lsls	r1, r1, #9
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	4460      	add	r0, ip
 8000bb8:	043f      	lsls	r7, r7, #16
 8000bba:	0411      	lsls	r1, r2, #16
 8000bbc:	0c3f      	lsrs	r7, r7, #16
 8000bbe:	19c9      	adds	r1, r1, r7
 8000bc0:	018c      	lsls	r4, r1, #6
 8000bc2:	1e67      	subs	r7, r4, #1
 8000bc4:	41bc      	sbcs	r4, r7
 8000bc6:	0c12      	lsrs	r2, r2, #16
 8000bc8:	0e89      	lsrs	r1, r1, #26
 8000bca:	1812      	adds	r2, r2, r0
 8000bcc:	430c      	orrs	r4, r1
 8000bce:	0192      	lsls	r2, r2, #6
 8000bd0:	4314      	orrs	r4, r2
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	d50e      	bpl.n	8000bf4 <__aeabi_fmul+0x250>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	0862      	lsrs	r2, r4, #1
 8000bda:	401c      	ands	r4, r3
 8000bdc:	4314      	orrs	r4, r2
 8000bde:	e749      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000be0:	003e      	movs	r6, r7
 8000be2:	46a1      	mov	r9, r4
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	464b      	mov	r3, r9
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	431a      	orrs	r2, r3
 8000bec:	0252      	lsls	r2, r2, #9
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	0a52      	lsrs	r2, r2, #9
 8000bf2:	e714      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000bf4:	001d      	movs	r5, r3
 8000bf6:	e73d      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000bf8:	0192      	lsls	r2, r2, #6
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	0a52      	lsrs	r2, r2, #9
 8000bfe:	e70e      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c00:	290f      	cmp	r1, #15
 8000c02:	d1ed      	bne.n	8000be0 <__aeabi_fmul+0x23c>
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	464b      	mov	r3, r9
 8000c08:	03d2      	lsls	r2, r2, #15
 8000c0a:	4213      	tst	r3, r2
 8000c0c:	d0ea      	beq.n	8000be4 <__aeabi_fmul+0x240>
 8000c0e:	4214      	tst	r4, r2
 8000c10:	d1e8      	bne.n	8000be4 <__aeabi_fmul+0x240>
 8000c12:	003e      	movs	r6, r7
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	4322      	orrs	r2, r4
 8000c18:	e701      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	f7ffffff 	.word	0xf7ffffff

08000c20 <__aeabi_fsub>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4647      	mov	r7, r8
 8000c24:	46ce      	mov	lr, r9
 8000c26:	024e      	lsls	r6, r1, #9
 8000c28:	0243      	lsls	r3, r0, #9
 8000c2a:	0045      	lsls	r5, r0, #1
 8000c2c:	0a72      	lsrs	r2, r6, #9
 8000c2e:	0fc4      	lsrs	r4, r0, #31
 8000c30:	0048      	lsls	r0, r1, #1
 8000c32:	b580      	push	{r7, lr}
 8000c34:	4694      	mov	ip, r2
 8000c36:	0a5f      	lsrs	r7, r3, #9
 8000c38:	0e2d      	lsrs	r5, r5, #24
 8000c3a:	099b      	lsrs	r3, r3, #6
 8000c3c:	0e00      	lsrs	r0, r0, #24
 8000c3e:	0fc9      	lsrs	r1, r1, #31
 8000c40:	09b6      	lsrs	r6, r6, #6
 8000c42:	28ff      	cmp	r0, #255	@ 0xff
 8000c44:	d024      	beq.n	8000c90 <__aeabi_fsub+0x70>
 8000c46:	2201      	movs	r2, #1
 8000c48:	4051      	eors	r1, r2
 8000c4a:	1a2a      	subs	r2, r5, r0
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d00f      	beq.n	8000c70 <__aeabi_fsub+0x50>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_fsub+0x36>
 8000c54:	e16a      	b.n	8000f2c <__aeabi_fsub+0x30c>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d135      	bne.n	8000cc6 <__aeabi_fsub+0xa6>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x40>
 8000c5e:	e0a2      	b.n	8000da6 <__aeabi_fsub+0x186>
 8000c60:	1e51      	subs	r1, r2, #1
 8000c62:	2a01      	cmp	r2, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x48>
 8000c66:	e124      	b.n	8000eb2 <__aeabi_fsub+0x292>
 8000c68:	2aff      	cmp	r2, #255	@ 0xff
 8000c6a:	d021      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	e02f      	b.n	8000cd0 <__aeabi_fsub+0xb0>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_fsub+0x56>
 8000c74:	e167      	b.n	8000f46 <__aeabi_fsub+0x326>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d05e      	beq.n	8000d38 <__aeabi_fsub+0x118>
 8000c7a:	2dff      	cmp	r5, #255	@ 0xff
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	04c9      	lsls	r1, r1, #19
 8000c82:	430e      	orrs	r6, r1
 8000c84:	2a1b      	cmp	r2, #27
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_fsub+0x6a>
 8000c88:	e076      	b.n	8000d78 <__aeabi_fsub+0x158>
 8000c8a:	002a      	movs	r2, r5
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	e032      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000c90:	002a      	movs	r2, r5
 8000c92:	3aff      	subs	r2, #255	@ 0xff
 8000c94:	4691      	mov	r9, r2
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d042      	beq.n	8000d20 <__aeabi_fsub+0x100>
 8000c9a:	428c      	cmp	r4, r1
 8000c9c:	d055      	beq.n	8000d4a <__aeabi_fsub+0x12a>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x86>
 8000ca4:	e09c      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x8c>
 8000caa:	e077      	b.n	8000d9c <__aeabi_fsub+0x17c>
 8000cac:	000c      	movs	r4, r1
 8000cae:	0033      	movs	r3, r6
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x98>
 8000cb6:	e06e      	b.n	8000d96 <__aeabi_fsub+0x176>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	03d2      	lsls	r2, r2, #15
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a5b      	lsrs	r3, r3, #9
 8000cc4:	e024      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000cc6:	2dff      	cmp	r5, #255	@ 0xff
 8000cc8:	d0f2      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	04c9      	lsls	r1, r1, #19
 8000cce:	430e      	orrs	r6, r1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc08      	bgt.n	8000ce8 <__aeabi_fsub+0xc8>
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	2020      	movs	r0, #32
 8000cda:	40d1      	lsrs	r1, r2
 8000cdc:	1a82      	subs	r2, r0, r2
 8000cde:	4096      	lsls	r6, r2
 8000ce0:	0032      	movs	r2, r6
 8000ce2:	1e50      	subs	r0, r2, #1
 8000ce4:	4182      	sbcs	r2, r0
 8000ce6:	4311      	orrs	r1, r2
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	015a      	lsls	r2, r3, #5
 8000cec:	d460      	bmi.n	8000db0 <__aeabi_fsub+0x190>
 8000cee:	2107      	movs	r1, #7
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	d057      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	4019      	ands	r1, r3
 8000cfa:	2904      	cmp	r1, #4
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_fsub+0xe0>
 8000cfe:	3304      	adds	r3, #4
 8000d00:	0159      	lsls	r1, r3, #5
 8000d02:	d550      	bpl.n	8000da6 <__aeabi_fsub+0x186>
 8000d04:	1c50      	adds	r0, r2, #1
 8000d06:	2afe      	cmp	r2, #254	@ 0xfe
 8000d08:	d045      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	b2c0      	uxtb	r0, r0
 8000d0e:	0a5b      	lsrs	r3, r3, #9
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4318      	orrs	r0, r3
 8000d14:	07e4      	lsls	r4, r4, #31
 8000d16:	4320      	orrs	r0, r4
 8000d18:	bcc0      	pop	{r6, r7}
 8000d1a:	46b9      	mov	r9, r7
 8000d1c:	46b0      	mov	r8, r6
 8000d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d20:	2201      	movs	r2, #1
 8000d22:	4051      	eors	r1, r2
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d1ba      	bne.n	8000c9e <__aeabi_fsub+0x7e>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d010      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x114>
 8000d32:	e098      	b.n	8000e66 <__aeabi_fsub+0x246>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e7bb      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d034      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000d3c:	1e51      	subs	r1, r2, #1
 8000d3e:	2a01      	cmp	r2, #1
 8000d40:	d06e      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000d42:	2aff      	cmp	r2, #255	@ 0xff
 8000d44:	d0b4      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000d46:	000a      	movs	r2, r1
 8000d48:	e79c      	b.n	8000c84 <__aeabi_fsub+0x64>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d4e:	e088      	b.n	8000e62 <__aeabi_fsub+0x242>
 8000d50:	20fe      	movs	r0, #254	@ 0xfe
 8000d52:	1c6a      	adds	r2, r5, #1
 8000d54:	4210      	tst	r0, r2
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fsub+0x13a>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fsub+0x260>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x140>
 8000d5e:	e0a4      	b.n	8000eaa <__aeabi_fsub+0x28a>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x146>
 8000d64:	e0cb      	b.n	8000efe <__aeabi_fsub+0x2de>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000d6a:	e0ca      	b.n	8000f02 <__aeabi_fsub+0x2e2>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	b2d0      	uxtb	r0, r2
 8000d76:	e7cb      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d78:	0031      	movs	r1, r6
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	40d1      	lsrs	r1, r2
 8000d7e:	1a82      	subs	r2, r0, r2
 8000d80:	4096      	lsls	r6, r2
 8000d82:	0032      	movs	r2, r6
 8000d84:	1e50      	subs	r0, r2, #1
 8000d86:	4182      	sbcs	r2, r0
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	189b      	adds	r3, r3, r2
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	d5ae      	bpl.n	8000cee <__aeabi_fsub+0xce>
 8000d90:	1c6a      	adds	r2, r5, #1
 8000d92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000d94:	d14a      	bne.n	8000e2c <__aeabi_fsub+0x20c>
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e7b9      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d9c:	22ff      	movs	r2, #255	@ 0xff
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14b      	bne.n	8000e3a <__aeabi_fsub+0x21a>
 8000da2:	000c      	movs	r4, r1
 8000da4:	0033      	movs	r3, r6
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2aff      	cmp	r2, #255	@ 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x18e>
 8000dac:	e781      	b.n	8000cb2 <__aeabi_fsub+0x92>
 8000dae:	e7df      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000db0:	019f      	lsls	r7, r3, #6
 8000db2:	09bf      	lsrs	r7, r7, #6
 8000db4:	0038      	movs	r0, r7
 8000db6:	f000 f943 	bl	8001040 <__clzsi2>
 8000dba:	3805      	subs	r0, #5
 8000dbc:	4087      	lsls	r7, r0
 8000dbe:	4285      	cmp	r5, r0
 8000dc0:	dc21      	bgt.n	8000e06 <__aeabi_fsub+0x1e6>
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	1b42      	subs	r2, r0, r5
 8000dc8:	3201      	adds	r2, #1
 8000dca:	40d3      	lsrs	r3, r2
 8000dcc:	1a8a      	subs	r2, r1, r2
 8000dce:	4097      	lsls	r7, r2
 8000dd0:	1e7a      	subs	r2, r7, #1
 8000dd2:	4197      	sbcs	r7, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	433b      	orrs	r3, r7
 8000dd8:	0759      	lsls	r1, r3, #29
 8000dda:	d000      	beq.n	8000dde <__aeabi_fsub+0x1be>
 8000ddc:	e78b      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000dde:	e78f      	b.n	8000d00 <__aeabi_fsub+0xe0>
 8000de0:	20fe      	movs	r0, #254	@ 0xfe
 8000de2:	1c6a      	adds	r2, r5, #1
 8000de4:	4210      	tst	r0, r2
 8000de6:	d112      	bne.n	8000e0e <__aeabi_fsub+0x1ee>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d152      	bne.n	8000e92 <__aeabi_fsub+0x272>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d07c      	beq.n	8000eea <__aeabi_fsub+0x2ca>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0bb      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000df4:	1b9a      	subs	r2, r3, r6
 8000df6:	0150      	lsls	r0, r2, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x1dc>
 8000dfa:	e08b      	b.n	8000f14 <__aeabi_fsub+0x2f4>
 8000dfc:	2401      	movs	r4, #1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	1af3      	subs	r3, r6, r3
 8000e02:	400c      	ands	r4, r1
 8000e04:	e7e8      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e06:	4b56      	ldr	r3, [pc, #344]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000e08:	1a2a      	subs	r2, r5, r0
 8000e0a:	403b      	ands	r3, r7
 8000e0c:	e7e4      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e0e:	1b9f      	subs	r7, r3, r6
 8000e10:	017a      	lsls	r2, r7, #5
 8000e12:	d446      	bmi.n	8000ea2 <__aeabi_fsub+0x282>
 8000e14:	2f00      	cmp	r7, #0
 8000e16:	d1cd      	bne.n	8000db4 <__aeabi_fsub+0x194>
 8000e18:	2400      	movs	r4, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e777      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000e20:	199b      	adds	r3, r3, r6
 8000e22:	2501      	movs	r5, #1
 8000e24:	3201      	adds	r2, #1
 8000e26:	0159      	lsls	r1, r3, #5
 8000e28:	d400      	bmi.n	8000e2c <__aeabi_fsub+0x20c>
 8000e2a:	e760      	b.n	8000cee <__aeabi_fsub+0xce>
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	484d      	ldr	r0, [pc, #308]	@ (8000f64 <__aeabi_fsub+0x344>)
 8000e30:	4019      	ands	r1, r3
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4003      	ands	r3, r0
 8000e36:	430b      	orrs	r3, r1
 8000e38:	e7ce      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e3a:	1e57      	subs	r7, r2, #1
 8000e3c:	2a01      	cmp	r2, #1
 8000e3e:	d05a      	beq.n	8000ef6 <__aeabi_fsub+0x2d6>
 8000e40:	000c      	movs	r4, r1
 8000e42:	2aff      	cmp	r2, #255	@ 0xff
 8000e44:	d033      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e46:	2201      	movs	r2, #1
 8000e48:	2f1b      	cmp	r7, #27
 8000e4a:	dc07      	bgt.n	8000e5c <__aeabi_fsub+0x23c>
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	1bc9      	subs	r1, r1, r7
 8000e50:	001a      	movs	r2, r3
 8000e52:	408b      	lsls	r3, r1
 8000e54:	40fa      	lsrs	r2, r7
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	418b      	sbcs	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	0005      	movs	r5, r0
 8000e5e:	1ab3      	subs	r3, r6, r2
 8000e60:	e743      	b.n	8000cea <__aeabi_fsub+0xca>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d123      	bne.n	8000eae <__aeabi_fsub+0x28e>
 8000e66:	22ff      	movs	r2, #255	@ 0xff
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d09b      	beq.n	8000da4 <__aeabi_fsub+0x184>
 8000e6c:	1e51      	subs	r1, r2, #1
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d0d6      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000e72:	2aff      	cmp	r2, #255	@ 0xff
 8000e74:	d01b      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e76:	291b      	cmp	r1, #27
 8000e78:	dd2c      	ble.n	8000ed4 <__aeabi_fsub+0x2b4>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	1c73      	adds	r3, r6, #1
 8000e7e:	e73a      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e80:	2aff      	cmp	r2, #255	@ 0xff
 8000e82:	d088      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000e84:	199b      	adds	r3, r3, r6
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	0759      	lsls	r1, r3, #29
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x26e>
 8000e8c:	e733      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	e76e      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d110      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d043      	beq.n	8000f22 <__aeabi_fsub+0x302>
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	400c      	ands	r4, r1
 8000ea0:	e706      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ea2:	2401      	movs	r4, #1
 8000ea4:	1af7      	subs	r7, r6, r3
 8000ea6:	400c      	ands	r4, r1
 8000ea8:	e784      	b.n	8000db4 <__aeabi_fsub+0x194>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000eae:	0033      	movs	r3, r6
 8000eb0:	e6fe      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	1b9b      	subs	r3, r3, r6
 8000eb6:	e718      	b.n	8000cea <__aeabi_fsub+0xca>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x29e>
 8000ebc:	e6f8      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	03d2      	lsls	r2, r2, #15
 8000ec2:	4297      	cmp	r7, r2
 8000ec4:	d304      	bcc.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000ec6:	4594      	cmp	ip, r2
 8000ec8:	d202      	bcs.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000eca:	2401      	movs	r4, #1
 8000ecc:	0033      	movs	r3, r6
 8000ece:	400c      	ands	r4, r1
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	e6f1      	b.n	8000cb8 <__aeabi_fsub+0x98>
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2520      	movs	r5, #32
 8000ed8:	40ca      	lsrs	r2, r1
 8000eda:	1a69      	subs	r1, r5, r1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	418b      	sbcs	r3, r1
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	199b      	adds	r3, r3, r6
 8000ee8:	e750      	b.n	8000d8c <__aeabi_fsub+0x16c>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d094      	beq.n	8000e18 <__aeabi_fsub+0x1f8>
 8000eee:	2401      	movs	r4, #1
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	400c      	ands	r4, r1
 8000ef4:	e73a      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000ef6:	000c      	movs	r4, r1
 8000ef8:	2501      	movs	r5, #1
 8000efa:	1af3      	subs	r3, r6, r3
 8000efc:	e6f5      	b.n	8000cea <__aeabi_fsub+0xca>
 8000efe:	0033      	movs	r3, r6
 8000f00:	e734      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000f02:	199b      	adds	r3, r3, r6
 8000f04:	2200      	movs	r2, #0
 8000f06:	0159      	lsls	r1, r3, #5
 8000f08:	d5c1      	bpl.n	8000e8e <__aeabi_fsub+0x26e>
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	2201      	movs	r2, #1
 8000f12:	e72d      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x2fa>
 8000f18:	e77e      	b.n	8000e18 <__aeabi_fsub+0x1f8>
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	e726      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	2400      	movs	r4, #0
 8000f26:	20ff      	movs	r0, #255	@ 0xff
 8000f28:	03db      	lsls	r3, r3, #15
 8000f2a:	e6f1      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x312>
 8000f30:	e756      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000f32:	1b47      	subs	r7, r0, r5
 8000f34:	003a      	movs	r2, r7
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x31c>
 8000f3a:	e730      	b.n	8000d9e <__aeabi_fsub+0x17e>
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	04d2      	lsls	r2, r2, #19
 8000f40:	000c      	movs	r4, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	e77f      	b.n	8000e46 <__aeabi_fsub+0x226>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x32c>
 8000f4a:	e701      	b.n	8000d50 <__aeabi_fsub+0x130>
 8000f4c:	1b41      	subs	r1, r0, r5
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d101      	bne.n	8000f56 <__aeabi_fsub+0x336>
 8000f52:	000a      	movs	r2, r1
 8000f54:	e788      	b.n	8000e68 <__aeabi_fsub+0x248>
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e78b      	b.n	8000e76 <__aeabi_fsub+0x256>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	fbffffff 	.word	0xfbffffff
 8000f64:	7dffffff 	.word	0x7dffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f76:	dd03      	ble.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f7a:	dd02      	ble.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	@ 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	@ 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	@ 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	@ 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d013      	beq.n	8000fd6 <__aeabi_i2f+0x2e>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f842 	bl	8001040 <__clzsi2>
 8000fbc:	239e      	movs	r3, #158	@ 0x9e
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	2b96      	cmp	r3, #150	@ 0x96
 8000fc4:	dc0f      	bgt.n	8000fe6 <__aeabi_i2f+0x3e>
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	d034      	beq.n	8001034 <__aeabi_i2f+0x8c>
 8000fca:	3908      	subs	r1, #8
 8000fcc:	408d      	lsls	r5, r1
 8000fce:	026d      	lsls	r5, r5, #9
 8000fd0:	0a6d      	lsrs	r5, r5, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e002      	b.n	8000fdc <__aeabi_i2f+0x34>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4328      	orrs	r0, r5
 8000fe0:	07e4      	lsls	r4, r4, #31
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	@ 0x99
 8000fe8:	dc16      	bgt.n	8001018 <__aeabi_i2f+0x70>
 8000fea:	1f42      	subs	r2, r0, #5
 8000fec:	2805      	cmp	r0, #5
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_i2f+0x4a>
 8000ff0:	4095      	lsls	r5, r2
 8000ff2:	002a      	movs	r2, r5
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <__aeabi_i2f+0x94>)
 8000ff6:	4002      	ands	r2, r0
 8000ff8:	076e      	lsls	r6, r5, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_i2f+0x68>
 8000ffc:	260f      	movs	r6, #15
 8000ffe:	4035      	ands	r5, r6
 8001000:	2d04      	cmp	r5, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_i2f+0x68>
 8001004:	3204      	adds	r2, #4
 8001006:	0155      	lsls	r5, r2, #5
 8001008:	d502      	bpl.n	8001010 <__aeabi_i2f+0x68>
 800100a:	239f      	movs	r3, #159	@ 0x9f
 800100c:	4002      	ands	r2, r0
 800100e:	1a5b      	subs	r3, r3, r1
 8001010:	0192      	lsls	r2, r2, #6
 8001012:	0a55      	lsrs	r5, r2, #9
 8001014:	b2d8      	uxtb	r0, r3
 8001016:	e7e1      	b.n	8000fdc <__aeabi_i2f+0x34>
 8001018:	2205      	movs	r2, #5
 800101a:	1a12      	subs	r2, r2, r0
 800101c:	0028      	movs	r0, r5
 800101e:	40d0      	lsrs	r0, r2
 8001020:	0002      	movs	r2, r0
 8001022:	0008      	movs	r0, r1
 8001024:	301b      	adds	r0, #27
 8001026:	4085      	lsls	r5, r0
 8001028:	0028      	movs	r0, r5
 800102a:	1e45      	subs	r5, r0, #1
 800102c:	41a8      	sbcs	r0, r5
 800102e:	4302      	orrs	r2, r0
 8001030:	0015      	movs	r5, r2
 8001032:	e7de      	b.n	8000ff2 <__aeabi_i2f+0x4a>
 8001034:	026d      	lsls	r5, r5, #9
 8001036:	2096      	movs	r0, #150	@ 0x96
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	e7cf      	b.n	8000fdc <__aeabi_i2f+0x34>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__clzsi2>:
 8001040:	211c      	movs	r1, #28
 8001042:	2301      	movs	r3, #1
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	4298      	cmp	r0, r3
 8001048:	d301      	bcc.n	800104e <__clzsi2+0xe>
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	3910      	subs	r1, #16
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	4298      	cmp	r0, r3
 8001052:	d301      	bcc.n	8001058 <__clzsi2+0x18>
 8001054:	0a00      	lsrs	r0, r0, #8
 8001056:	3908      	subs	r1, #8
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	4298      	cmp	r0, r3
 800105c:	d301      	bcc.n	8001062 <__clzsi2+0x22>
 800105e:	0900      	lsrs	r0, r0, #4
 8001060:	3904      	subs	r1, #4
 8001062:	a202      	add	r2, pc, #8	@ (adr r2, 800106c <__clzsi2+0x2c>)
 8001064:	5c10      	ldrb	r0, [r2, r0]
 8001066:	1840      	adds	r0, r0, r1
 8001068:	4770      	bx	lr
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	02020304 	.word	0x02020304
 8001070:	01010101 	.word	0x01010101
	...

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	240c      	movs	r4, #12
 8001084:	193b      	adds	r3, r7, r4
 8001086:	0018      	movs	r0, r3
 8001088:	2314      	movs	r3, #20
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f002 fd5f 	bl	8003b50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001098:	2180      	movs	r1, #128	@ 0x80
 800109a:	0289      	lsls	r1, r1, #10
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	02c9      	lsls	r1, r1, #11
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	4013      	ands	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 80010ca:	4934      	ldr	r1, [pc, #208]	@ (800119c <MX_GPIO_Init+0x120>)
 80010cc:	2390      	movs	r3, #144	@ 0x90
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	2200      	movs	r2, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 f976 	bl	80023c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80010d8:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <MX_GPIO_Init+0x124>)
 80010da:	2200      	movs	r2, #0
 80010dc:	214a      	movs	r1, #74	@ 0x4a
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 f970 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2212      	movs	r2, #18
 80010e8:	32ff      	adds	r2, #255	@ 0xff
 80010ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2201      	movs	r2, #1
 80010f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	193a      	adds	r2, r7, r4
 80010fa:	2390      	movs	r3, #144	@ 0x90
 80010fc:	05db      	lsls	r3, r3, #23
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f000 ffef 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <MX_GPIO_Init+0x128>)
 800110a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2203      	movs	r2, #3
 8001110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	193a      	adds	r2, r7, r4
 800111a:	2390      	movs	r3, #144	@ 0x90
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f000 ffdf 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 8001126:	193b      	adds	r3, r7, r4
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_GPIO_Init+0x120>)
 800112a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2201      	movs	r2, #1
 8001130:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	193a      	adds	r2, r7, r4
 8001140:	2390      	movs	r3, #144	@ 0x90
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f000 ffcc 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2211      	movs	r2, #17
 8001150:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2201      	movs	r2, #1
 800115c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	193b      	adds	r3, r7, r4
 8001160:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <MX_GPIO_Init+0x124>)
 8001162:	0019      	movs	r1, r3
 8001164:	0010      	movs	r0, r2
 8001166:	f000 ffbd 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
 800116a:	0021      	movs	r1, r4
 800116c:	187b      	adds	r3, r7, r1
 800116e:	224a      	movs	r2, #74	@ 0x4a
 8001170:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2201      	movs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	187b      	adds	r3, r7, r1
 8001186:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <MX_GPIO_Init+0x124>)
 8001188:	0019      	movs	r1, r3
 800118a:	0010      	movs	r0, r2
 800118c:	f000 ffaa 	bl	80020e4 <HAL_GPIO_Init>

}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b009      	add	sp, #36	@ 0x24
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	000018cc 	.word	0x000018cc
 80011a0:	48000400 	.word	0x48000400
 80011a4:	00008002 	.word	0x00008002

080011a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_I2C1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C1_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_I2C1_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x74>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 f90b 	bl	8002400 <HAL_I2C_Init>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ee:	f000 fdca 	bl	8001d86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x74>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 ff06 	bl	8003008 <HAL_I2CEx_ConfigAnalogFilter>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 fdc1 	bl	8001d86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <MX_I2C1_Init+0x74>)
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f001 ff49 	bl	80030a0 <HAL_I2CEx_ConfigDigitalFilter>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fdb8 	bl	8001d86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000028 	.word	0x20000028
 8001220:	40005400 	.word	0x40005400
 8001224:	2000090e 	.word	0x2000090e

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b08b      	sub	sp, #44	@ 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	2414      	movs	r4, #20
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f002 fc88 	bl	8003b50 <memset>
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <HAL_I2C_MspInit+0x94>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d133      	bne.n	80012b2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	0289      	lsls	r1, r1, #10
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001266:	193b      	adds	r3, r7, r4
 8001268:	22c0      	movs	r2, #192	@ 0xc0
 800126a:	00d2      	lsls	r2, r2, #3
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2212      	movs	r2, #18
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2203      	movs	r2, #3
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2204      	movs	r2, #4
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	187a      	adds	r2, r7, r1
 800128a:	2390      	movs	r3, #144	@ 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f000 ff27 	bl	80020e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	0389      	lsls	r1, r1, #14
 80012a0:	430a      	orrs	r2, r1
 80012a2:	61da      	str	r2, [r3, #28]
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	039b      	lsls	r3, r3, #14
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b00b      	add	sp, #44	@ 0x2c
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40021000 	.word	0x40021000

080012c4 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	0008      	movs	r0, r1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	0019      	movs	r1, r3
 80012d2:	230b      	movs	r3, #11
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	1c02      	adds	r2, r0, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	2308      	movs	r3, #8
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	1c0a      	adds	r2, r1, #0
 80012e0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <lis3dh_read_reg+0x2a>
  {
    return -1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	e00f      	b.n	800130e <lis3dh_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685c      	ldr	r4, [r3, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68d8      	ldr	r0, [r3, #12]
 80012f6:	2308      	movs	r3, #8
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	881d      	ldrh	r5, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	230b      	movs	r3, #11
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	002b      	movs	r3, r5
 8001306:	47a0      	blx	r4
 8001308:	0003      	movs	r3, r0
 800130a:	617b      	str	r3, [r7, #20]

  return ret;
 800130c:	697b      	ldr	r3, [r7, #20]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b006      	add	sp, #24
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001316:	b5b0      	push	{r4, r5, r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	0008      	movs	r0, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	0019      	movs	r1, r3
 8001324:	230b      	movs	r3, #11
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	1c02      	adds	r2, r0, #0
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	2308      	movs	r3, #8
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <lis3dh_write_reg+0x2a>
  {
    return -1;
 800133a:	2301      	movs	r3, #1
 800133c:	425b      	negs	r3, r3
 800133e:	e00f      	b.n	8001360 <lis3dh_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68d8      	ldr	r0, [r3, #12]
 8001348:	2308      	movs	r3, #8
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	881d      	ldrh	r5, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	230b      	movs	r3, #11
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	002b      	movs	r3, r5
 8001358:	47a0      	blx	r4
 800135a:	0003      	movs	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

  return ret;
 800135e:	697b      	ldr	r3, [r7, #20]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bdb0      	pop	{r4, r5, r7, pc}

08001368 <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	2200      	movs	r2, #0
 8001378:	5e9b      	ldrsh	r3, [r3, r2]
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fe14 	bl	8000fa8 <__aeabi_i2f>
 8001380:	1c03      	adds	r3, r0, #0
 8001382:	2183      	movs	r1, #131	@ 0x83
 8001384:	05c9      	lsls	r1, r1, #23
 8001386:	1c18      	adds	r0, r3, #0
 8001388:	f7ff f926 	bl	80005d8 <__aeabi_fdiv>
 800138c:	1c03      	adds	r3, r0, #0
}
 800138e:	1c18      	adds	r0, r3, #0
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <lis3dh_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis3dh_from_lsb_hr_to_celsius(int16_t lsb)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	2200      	movs	r2, #0
 80013a8:	5e9b      	ldrsh	r3, [r3, r2]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff fdfc 	bl	8000fa8 <__aeabi_i2f>
 80013b0:	1c03      	adds	r3, r0, #0
 80013b2:	2185      	movs	r1, #133	@ 0x85
 80013b4:	05c9      	lsls	r1, r1, #23
 80013b6:	1c18      	adds	r0, r3, #0
 80013b8:	f7ff f90e 	bl	80005d8 <__aeabi_fdiv>
 80013bc:	1c03      	adds	r3, r0, #0
 80013be:	2181      	movs	r1, #129	@ 0x81
 80013c0:	05c9      	lsls	r1, r1, #23
 80013c2:	1c18      	adds	r0, r3, #0
 80013c4:	f7ff f908 	bl	80005d8 <__aeabi_fdiv>
 80013c8:	1c03      	adds	r3, r0, #0
 80013ca:	4904      	ldr	r1, [pc, #16]	@ (80013dc <lis3dh_from_lsb_hr_to_celsius+0x44>)
 80013cc:	1c18      	adds	r0, r3, #0
 80013ce:	f7fe ff79 	bl	80002c4 <__aeabi_fadd>
 80013d2:	1c03      	adds	r3, r0, #0
}
 80013d4:	1c18      	adds	r0, r3, #0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	41c80000 	.word	0x41c80000

080013e0 <lis3dh_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temp_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG_AUX,
 80013ea:	2408      	movs	r4, #8
 80013ec:	193a      	adds	r2, r7, r4
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2107      	movs	r1, #7
 80013f4:	f7ff ff66 	bl	80012c4 <lis3dh_read_reg>
 80013f8:	0003      	movs	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux._3da;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	0fdb      	lsrs	r3, r3, #31
 8001404:	b2db      	uxtb	r3, r3
 8001406:	001a      	movs	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	701a      	strb	r2, [r3, #0]

  return ret;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b005      	add	sp, #20
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <lis3dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_ADC3_L, buff, 2);
 8001420:	2408      	movs	r4, #8
 8001422:	193a      	adds	r2, r7, r4
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	2302      	movs	r3, #2
 8001428:	210c      	movs	r1, #12
 800142a:	f7ff ff4b 	bl	80012c4 <lis3dh_read_reg>
 800142e:	0003      	movs	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 8001432:	0021      	movs	r1, r4
 8001434:	187b      	adds	r3, r7, r1
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	b21a      	sxth	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	5e9b      	ldrsh	r3, [r3, r2]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	187a      	adds	r2, r7, r1
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	189b      	adds	r3, r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	801a      	strh	r2, [r3, #0]

  return ret;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b005      	add	sp, #20
 8001460:	bd90      	pop	{r4, r7, pc}

08001462 <lis3dh_aux_adc_set>:
  * @param  val      configure the auxiliary ADC
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_aux_adc_set(const stmdev_ctx_t *ctx, lis3dh_temp_en_t val)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	000a      	movs	r2, r1
 800146c:	1cfb      	adds	r3, r7, #3
 800146e:	701a      	strb	r2, [r3, #0]
  lis3dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_TEMP_CFG_REG,
 8001470:	2308      	movs	r3, #8
 8001472:	18fa      	adds	r2, r7, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	2301      	movs	r3, #1
 8001478:	211f      	movs	r1, #31
 800147a:	f7ff ff23 	bl	80012c4 <lis3dh_read_reg>
 800147e:	0003      	movs	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10a      	bne.n	800149e <lis3dh_aux_adc_set+0x3c>
  {
    if (val != LIS3DH_AUX_DISABLE)
 8001488:	1cfb      	adds	r3, r7, #3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <lis3dh_aux_adc_set+0x3c>
    {
      /* Required in order to use auxiliary adc */
      ret = lis3dh_block_data_update_set(ctx, PROPERTY_ENABLE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2101      	movs	r1, #1
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f8fa 	bl	800168e <lis3dh_block_data_update_set>
 800149a:	0003      	movs	r3, r0
 800149c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d128      	bne.n	80014f6 <lis3dh_aux_adc_set+0x94>
  {
    temp_cfg_reg.temp_en = ((uint8_t) val & 0x02U) >> 1;
 80014a4:	1cfb      	adds	r3, r7, #3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	1c1a      	adds	r2, r3, #0
 80014ac:	2301      	movs	r3, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	2408      	movs	r4, #8
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2101      	movs	r1, #1
 80014b8:	400a      	ands	r2, r1
 80014ba:	0190      	lsls	r0, r2, #6
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	2140      	movs	r1, #64	@ 0x40
 80014c0:	438a      	bics	r2, r1
 80014c2:	1c11      	adds	r1, r2, #0
 80014c4:	1c02      	adds	r2, r0, #0
 80014c6:	430a      	orrs	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
    temp_cfg_reg.adc_pd  = (uint8_t) val &  0x01U;
 80014ca:	1cfb      	adds	r3, r7, #3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	01d0      	lsls	r0, r2, #7
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	217f      	movs	r1, #127	@ 0x7f
 80014dc:	400a      	ands	r2, r1
 80014de:	1c11      	adds	r1, r2, #0
 80014e0:	1c02      	adds	r2, r0, #0
 80014e2:	430a      	orrs	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_TEMP_CFG_REG,
 80014e6:	193a      	adds	r2, r7, r4
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	2301      	movs	r3, #1
 80014ec:	211f      	movs	r1, #31
 80014ee:	f7ff ff12 	bl	8001316 <lis3dh_write_reg>
 80014f2:	0003      	movs	r3, r0
 80014f4:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b005      	add	sp, #20
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	000a      	movs	r2, r1
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 800150e:	2310      	movs	r3, #16
 8001510:	18fa      	adds	r2, r7, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	2120      	movs	r1, #32
 8001518:	f7ff fed4 	bl	80012c4 <lis3dh_read_reg>
 800151c:	0003      	movs	r3, r0
 800151e:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8001526:	230c      	movs	r3, #12
 8001528:	18fa      	adds	r2, r7, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	2301      	movs	r3, #1
 800152e:	2123      	movs	r1, #35	@ 0x23
 8001530:	f7ff fec8 	bl	80012c4 <lis3dh_read_reg>
 8001534:	0003      	movs	r3, r0
 8001536:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d138      	bne.n	80015b0 <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 800153e:	1cfb      	adds	r3, r7, #3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8001546:	2310      	movs	r3, #16
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	2108      	movs	r1, #8
 800154e:	438a      	bics	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8001552:	230c      	movs	r3, #12
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	2108      	movs	r1, #8
 800155a:	430a      	orrs	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10b      	bne.n	800157e <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8001566:	2310      	movs	r3, #16
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	2108      	movs	r1, #8
 800156e:	438a      	bics	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001572:	230c      	movs	r3, #12
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	2108      	movs	r1, #8
 800157a:	438a      	bics	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 800157e:	1cfb      	adds	r3, r7, #3
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d10b      	bne.n	800159e <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8001586:	2310      	movs	r3, #16
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	2108      	movs	r1, #8
 800158e:	430a      	orrs	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001592:	230c      	movs	r3, #12
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	2108      	movs	r1, #8
 800159a:	438a      	bics	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800159e:	2310      	movs	r3, #16
 80015a0:	18fa      	adds	r2, r7, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	2301      	movs	r3, #1
 80015a6:	2120      	movs	r1, #32
 80015a8:	f7ff feb5 	bl	8001316 <lis3dh_write_reg>
 80015ac:	0003      	movs	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80015b6:	230c      	movs	r3, #12
 80015b8:	18fa      	adds	r2, r7, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	2301      	movs	r3, #1
 80015be:	2123      	movs	r1, #35	@ 0x23
 80015c0:	f7ff fea9 	bl	8001316 <lis3dh_write_reg>
 80015c4:	0003      	movs	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b006      	add	sp, #24
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(const stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	000a      	movs	r2, r1
 80015dc:	1cfb      	adds	r3, r7, #3
 80015de:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80015e0:	2408      	movs	r4, #8
 80015e2:	193a      	adds	r2, r7, r4
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	2301      	movs	r3, #1
 80015e8:	2120      	movs	r1, #32
 80015ea:	f7ff fe6b 	bl	80012c4 <lis3dh_read_reg>
 80015ee:	0003      	movs	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d115      	bne.n	8001624 <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80015f8:	1cfb      	adds	r3, r7, #3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	220f      	movs	r2, #15
 80015fe:	4013      	ands	r3, r2
 8001600:	b2da      	uxtb	r2, r3
 8001602:	193b      	adds	r3, r7, r4
 8001604:	0110      	lsls	r0, r2, #4
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	210f      	movs	r1, #15
 800160a:	400a      	ands	r2, r1
 800160c:	1c11      	adds	r1, r2, #0
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	430a      	orrs	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001614:	193a      	adds	r2, r7, r4
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	2301      	movs	r3, #1
 800161a:	2120      	movs	r1, #32
 800161c:	f7ff fe7b 	bl	8001316 <lis3dh_write_reg>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b005      	add	sp, #20
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(const stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	000a      	movs	r2, r1
 8001638:	1cfb      	adds	r3, r7, #3
 800163a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800163c:	2408      	movs	r4, #8
 800163e:	193a      	adds	r2, r7, r4
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	2301      	movs	r3, #1
 8001644:	2123      	movs	r1, #35	@ 0x23
 8001646:	f7ff fe3d 	bl	80012c4 <lis3dh_read_reg>
 800164a:	0003      	movs	r3, r0
 800164c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d117      	bne.n	8001684 <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001654:	1cfb      	adds	r3, r7, #3
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	b2da      	uxtb	r2, r3
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2103      	movs	r1, #3
 8001662:	400a      	ands	r2, r1
 8001664:	0110      	lsls	r0, r2, #4
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	2130      	movs	r1, #48	@ 0x30
 800166a:	438a      	bics	r2, r1
 800166c:	1c11      	adds	r1, r2, #0
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	430a      	orrs	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001674:	193a      	adds	r2, r7, r4
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	2123      	movs	r1, #35	@ 0x23
 800167c:	f7ff fe4b 	bl	8001316 <lis3dh_write_reg>
 8001680:	0003      	movs	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b005      	add	sp, #20
 800168c:	bd90      	pop	{r4, r7, pc}

0800168e <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800168e:	b590      	push	{r4, r7, lr}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	000a      	movs	r2, r1
 8001698:	1cfb      	adds	r3, r7, #3
 800169a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800169c:	2408      	movs	r4, #8
 800169e:	193a      	adds	r2, r7, r4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2123      	movs	r1, #35	@ 0x23
 80016a6:	f7ff fe0d 	bl	80012c4 <lis3dh_read_reg>
 80016aa:	0003      	movs	r3, r0
 80016ac:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d115      	bne.n	80016e0 <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	01d0      	lsls	r0, r2, #7
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	217f      	movs	r1, #127	@ 0x7f
 80016c6:	400a      	ands	r2, r1
 80016c8:	1c11      	adds	r1, r2, #0
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	430a      	orrs	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2123      	movs	r1, #35	@ 0x23
 80016d8:	f7ff fe1d 	bl	8001316 <lis3dh_write_reg>
 80016dc:	0003      	movs	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b005      	add	sp, #20
 80016e8:	bd90      	pop	{r4, r7, pc}

080016ea <lis3dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *)&status_reg, 1);
 80016f4:	2408      	movs	r4, #8
 80016f6:	193a      	adds	r2, r7, r4
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	f7ff fde1 	bl	80012c4 <lis3dh_read_reg>
 8001702:	0003      	movs	r3, r0
 8001704:	60fb      	str	r3, [r7, #12]
  *val = status_reg.zyxda;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	071b      	lsls	r3, r3, #28
 800170c:	0fdb      	lsrs	r3, r3, #31
 800170e:	b2db      	uxtb	r3, r3
 8001710:	001a      	movs	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	701a      	strb	r2, [r3, #0]

  return ret;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b005      	add	sp, #20
 800171e:	bd90      	pop	{r4, r7, pc}

08001720 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 800172a:	240c      	movs	r4, #12
 800172c:	193a      	adds	r2, r7, r4
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	2306      	movs	r3, #6
 8001732:	2128      	movs	r1, #40	@ 0x28
 8001734:	f7ff fdc6 	bl	80012c4 <lis3dh_read_reg>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800173c:	0021      	movs	r1, r4
 800173e:	187b      	adds	r3, r7, r1
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	b21a      	sxth	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	5e9b      	ldrsh	r3, [r3, r2]
 800174e:	b29b      	uxth	r3, r3
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	187a      	adds	r2, r7, r1
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	189b      	adds	r3, r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	b21a      	sxth	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001762:	187b      	adds	r3, r7, r1
 8001764:	78da      	ldrb	r2, [r3, #3]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3302      	adds	r3, #2
 800176a:	b212      	sxth	r2, r2
 800176c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3302      	adds	r3, #2
 8001772:	2200      	movs	r2, #0
 8001774:	5e9b      	ldrsh	r3, [r3, r2]
 8001776:	b29b      	uxth	r3, r3
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	187a      	adds	r2, r7, r1
 800177e:	7892      	ldrb	r2, [r2, #2]
 8001780:	189b      	adds	r3, r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3302      	adds	r3, #2
 8001788:	b212      	sxth	r2, r2
 800178a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800178c:	187b      	adds	r3, r7, r1
 800178e:	795a      	ldrb	r2, [r3, #5]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3304      	adds	r3, #4
 8001794:	b212      	sxth	r2, r2
 8001796:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3304      	adds	r3, #4
 800179c:	2200      	movs	r2, #0
 800179e:	5e9b      	ldrsh	r3, [r3, r2]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	187a      	adds	r2, r7, r1
 80017a8:	7912      	ldrb	r2, [r2, #4]
 80017aa:	189b      	adds	r3, r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	3304      	adds	r3, #4
 80017b2:	b212      	sxth	r2, r2
 80017b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80017b6:	697b      	ldr	r3, [r7, #20]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b007      	add	sp, #28
 80017be:	bd90      	pop	{r4, r7, pc}

080017c0 <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	2301      	movs	r3, #1
 80017d0:	210f      	movs	r1, #15
 80017d2:	f7ff fd77 	bl	80012c4 <lis3dh_read_reg>
 80017d6:	0003      	movs	r3, r0
 80017d8:	60fb      	str	r3, [r7, #12]

  return ret;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <allState>:
    } else {
        return 0;
    }
}

void allState(int state) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	2390      	movs	r3, #144	@ 0x90
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	2104      	movs	r1, #4
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fde4 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, state);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2390      	movs	r3, #144	@ 0x90
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	2140      	movs	r1, #64	@ 0x40
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fddc 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, state);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	2390      	movs	r3, #144	@ 0x90
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fdd4 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	0119      	lsls	r1, r3, #4
 8001824:	2390      	movs	r3, #144	@ 0x90
 8001826:	05db      	lsls	r3, r3, #23
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fdcb 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, state);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	0159      	lsls	r1, r3, #5
 8001836:	2390      	movs	r3, #144	@ 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fdc2 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, state);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4807      	ldr	r0, [pc, #28]	@ (8001864 <allState+0x80>)
 8001846:	001a      	movs	r2, r3
 8001848:	2102      	movs	r1, #2
 800184a:	f000 fdbb 	bl	80023c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4804      	ldr	r0, [pc, #16]	@ (8001864 <allState+0x80>)
 8001854:	001a      	movs	r2, r3
 8001856:	2140      	movs	r1, #64	@ 0x40
 8001858:	f000 fdb4 	bl	80023c4 <HAL_GPIO_WritePin>
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	48000400 	.word	0x48000400

08001868 <BeepX>:

void BeepX(float seconds, float beepNumPerSecond) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	float j = seconds * beepNumPerSecond;
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff f895 	bl	80009a4 <__aeabi_fmul>
 800187a:	1c03      	adds	r3, r0, #0
 800187c:	613b      	str	r3, [r7, #16]
	float t = 1000.0 / beepNumPerSecond;
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	481e      	ldr	r0, [pc, #120]	@ (80018fc <BeepX+0x94>)
 8001882:	f7fe fea9 	bl	80005d8 <__aeabi_fdiv>
 8001886:	1c03      	adds	r3, r0, #0
 8001888:	60fb      	str	r3, [r7, #12]
	float x = t/2.0;
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	05c9      	lsls	r1, r1, #23
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7fe fea2 	bl	80005d8 <__aeabi_fdiv>
 8001894:	1c03      	adds	r3, r0, #0
 8001896:	60bb      	str	r3, [r7, #8]
	for (float i = 0; i <= j; i++){
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e022      	b.n	80018e4 <BeepX+0x7c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800189e:	2390      	movs	r3, #144	@ 0x90
 80018a0:	05db      	lsls	r3, r3, #23
 80018a2:	2201      	movs	r2, #1
 80018a4:	2108      	movs	r1, #8
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fd8c 	bl	80023c4 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f7fe fcf1 	bl	8000294 <__aeabi_f2uiz>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 fb3d 	bl	8001f34 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80018ba:	2390      	movs	r3, #144	@ 0x90
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	2200      	movs	r2, #0
 80018c0:	2108      	movs	r1, #8
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 fd7e 	bl	80023c4 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f7fe fce3 	bl	8000294 <__aeabi_f2uiz>
 80018ce:	0003      	movs	r3, r0
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fb2f 	bl	8001f34 <HAL_Delay>
	for (float i = 0; i <= j; i++){
 80018d6:	21fe      	movs	r1, #254	@ 0xfe
 80018d8:	0589      	lsls	r1, r1, #22
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7fe fcf2 	bl	80002c4 <__aeabi_fadd>
 80018e0:	1c03      	adds	r3, r0, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7fe fcb6 	bl	8000258 <__aeabi_fcmple>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d1d6      	bne.n	800189e <BeepX+0x36>
	}
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b006      	add	sp, #24
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	447a0000 	.word	0x447a0000

08001900 <ErrorSound>:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
		HAL_Delay(debounce);
	}
}

void ErrorSound() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	BeepX(0.5,698);
 8001904:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <ErrorSound+0x40>)
 8001906:	23fc      	movs	r3, #252	@ 0xfc
 8001908:	059b      	lsls	r3, r3, #22
 800190a:	1c11      	adds	r1, r2, #0
 800190c:	1c18      	adds	r0, r3, #0
 800190e:	f7ff ffab 	bl	8001868 <BeepX>
	BeepX(0.5,520);
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <ErrorSound+0x44>)
 8001914:	23fc      	movs	r3, #252	@ 0xfc
 8001916:	059b      	lsls	r3, r3, #22
 8001918:	1c11      	adds	r1, r2, #0
 800191a:	1c18      	adds	r0, r3, #0
 800191c:	f7ff ffa4 	bl	8001868 <BeepX>
	BeepX(0.5,350);
 8001920:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <ErrorSound+0x48>)
 8001922:	23fc      	movs	r3, #252	@ 0xfc
 8001924:	059b      	lsls	r3, r3, #22
 8001926:	1c11      	adds	r1, r2, #0
 8001928:	1c18      	adds	r0, r3, #0
 800192a:	f7ff ff9d 	bl	8001868 <BeepX>
	HAL_Delay(1000);
 800192e:	23fa      	movs	r3, #250	@ 0xfa
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fafe 	bl	8001f34 <HAL_Delay>
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	442e8000 	.word	0x442e8000
 8001944:	44020000 	.word	0x44020000
 8001948:	43af0000 	.word	0x43af0000

0800194c <platform_write>:
}

//static uint8_t tx_buffer[1000];

/** Please note that is MANDATORY: return 0 -> no Error.**/
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af04      	add	r7, sp, #16
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	0008      	movs	r0, r1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	0019      	movs	r1, r3
 800195a:	240b      	movs	r4, #11
 800195c:	193b      	adds	r3, r7, r4
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	2508      	movs	r5, #8
 8001964:	197b      	adds	r3, r7, r5
 8001966:	1c0a      	adds	r2, r1, #0
 8001968:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800196a:	0020      	movs	r0, r4
 800196c:	183b      	adds	r3, r7, r0
 800196e:	183a      	adds	r2, r7, r0
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	4249      	negs	r1, r1
 8001976:	430a      	orrs	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, 0x30, reg, 1, (uint8_t*) bufp, len, 1000); //define 8bit
 800197a:	183b      	adds	r3, r7, r0
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	23fa      	movs	r3, #250	@ 0xfa
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	197b      	adds	r3, r7, r5
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	2130      	movs	r1, #48	@ 0x30
 8001996:	f000 fdd9 	bl	800254c <HAL_I2C_Mem_Write>
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}

080019a4 <platform_read>:

int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	0008      	movs	r0, r1
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	0019      	movs	r1, r3
 80019b2:	240b      	movs	r4, #11
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	1c02      	adds	r2, r0, #0
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	2508      	movs	r5, #8
 80019bc:	197b      	adds	r3, r7, r5
 80019be:	1c0a      	adds	r2, r1, #0
 80019c0:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80019c2:	0020      	movs	r0, r4
 80019c4:	183b      	adds	r3, r7, r0
 80019c6:	183a      	adds	r2, r7, r0
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	4249      	negs	r1, r1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, 0x30, reg, 1, bufp, len, 1000);
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	23fa      	movs	r3, #250	@ 0xfa
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	197b      	adds	r3, r7, r5
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	2130      	movs	r1, #48	@ 0x30
 80019ee:	f000 fedb 	bl	80027a8 <HAL_I2C_Mem_Read>
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}

080019fc <platform_delay>:

/** Optional (may be required by driver) **/
void platform_delay(uint32_t millisec) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 fa94 	bl	8001f34 <HAL_Delay>
}
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <UpdateValues>:


void UpdateValues(void)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8001a1a:	2408      	movs	r4, #8
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	4a43      	ldr	r2, [pc, #268]	@ (8001b2c <UpdateValues+0x118>)
 8001a20:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <UpdateValues+0x11c>)
 8001a26:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	4a42      	ldr	r2, [pc, #264]	@ (8001b34 <UpdateValues+0x120>)
 8001a2c:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	4a41      	ldr	r2, [pc, #260]	@ (8001b38 <UpdateValues+0x124>)
 8001a32:	60da      	str	r2, [r3, #12]
  platform_delay(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f7ff ffe1 	bl	80019fc <platform_delay>
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 8001a3a:	4a40      	ldr	r2, [pc, #256]	@ (8001b3c <UpdateValues+0x128>)
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff febd 	bl	80017c0 <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID) {
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <UpdateValues+0x128>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b33      	cmp	r3, #51	@ 0x33
 8001a4c:	d002      	beq.n	8001a54 <UpdateValues+0x40>
    while (1) {
    	ErrorSound();
 8001a4e:	f7ff ff57 	bl	8001900 <ErrorSound>
 8001a52:	e7fc      	b.n	8001a4e <UpdateValues+0x3a>
    }
  }

  /* Enable Block Data Update. */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001a54:	2408      	movs	r4, #8
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	2101      	movs	r1, #1
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fe17 	bl	800168e <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_25Hz);
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	2103      	movs	r1, #3
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff fdb4 	bl	80015d2 <lis3dh_data_rate_set>
  /* Set full scale to 2g. */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff fddd 	bl	800162e <lis3dh_full_scale_set>
  /* Enable temperature sensor. */
  lis3dh_aux_adc_set(&dev_ctx, LIS3DH_AUX_ON_TEMPERATURE);
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	2103      	movs	r1, #3
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff fcf2 	bl	8001462 <lis3dh_aux_adc_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2100      	movs	r1, #0
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fd3c 	bl	8001500 <lis3dh_operating_mode_set>

    lis3dh_reg_t reg;
    /* Read output only if new value available */
    lis3dh_xl_data_ready_get(&dev_ctx, &reg.byte);
 8001a88:	1d3a      	adds	r2, r7, #4
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fe2b 	bl	80016ea <lis3dh_xl_data_ready_get>

    if (reg.byte) {
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d026      	beq.n	8001aea <UpdateValues+0xd6>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <UpdateValues+0x12c>)
 8001a9e:	2206      	movs	r2, #6
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f002 f854 	bl	8003b50 <memset>
      lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001aa8:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <UpdateValues+0x12c>)
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff fe36 	bl	8001720 <lis3dh_acceleration_raw_get>
      acceleration_mg[0] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <UpdateValues+0x12c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff fc54 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001ac0:	1c02      	adds	r2, r0, #0
      acceleration_mg[0] =
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <UpdateValues+0x130>)
 8001ac4:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <UpdateValues+0x12c>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	5e9b      	ldrsh	r3, [r3, r2]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff fc4b 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001ad2:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <UpdateValues+0x130>)
 8001ad6:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <UpdateValues+0x12c>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	5e9b      	ldrsh	r3, [r3, r2]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff fc42 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001ae4:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <UpdateValues+0x130>)
 8001ae8:	609a      	str	r2, [r3, #8]
    }

    lis3dh_temp_data_ready_get(&dev_ctx, &reg.byte);
 8001aea:	1d3a      	adds	r2, r7, #4
 8001aec:	2408      	movs	r4, #8
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff fc74 	bl	80013e0 <lis3dh_temp_data_ready_get>

    if (reg.byte) {
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d011      	beq.n	8001b24 <UpdateValues+0x110>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <UpdateValues+0x134>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
      lis3dh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <UpdateValues+0x134>)
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fc82 	bl	8001416 <lis3dh_temperature_raw_get>
      temperature_degC = lis3dh_from_lsb_hr_to_celsius(data_raw_temperature);
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <UpdateValues+0x134>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	5e9b      	ldrsh	r3, [r3, r2]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff fc3d 	bl	8001398 <lis3dh_from_lsb_hr_to_celsius>
 8001b1e:	1c02      	adds	r2, r0, #0
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <UpdateValues+0x138>)
 8001b22:	601a      	str	r2, [r3, #0]
    }
}
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b007      	add	sp, #28
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	0800194d 	.word	0x0800194d
 8001b30:	080019a5 	.word	0x080019a5
 8001b34:	080019fd 	.word	0x080019fd
 8001b38:	20000028 	.word	0x20000028
 8001b3c:	2000007c 	.word	0x2000007c
 8001b40:	20000080 	.word	0x20000080
 8001b44:	20000088 	.word	0x20000088
 8001b48:	20000086 	.word	0x20000086
 8001b4c:	20000094 	.word	0x20000094

08001b50 <AccelLightBarX>:
	  } else if (temperature_degC < 27.5) {
		  allState(1);
	  }
}

void AccelLightBarX() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	  UpdateValues();
 8001b54:	f7ff ff5e 	bl	8001a14 <UpdateValues>
	  if (acceleration_mg[0] > 900) {
 8001b58:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <AccelLightBarX+0x150>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4951      	ldr	r1, [pc, #324]	@ (8001ca4 <AccelLightBarX+0x154>)
 8001b5e:	1c18      	adds	r0, r3, #0
 8001b60:	f7fe fb84 	bl	800026c <__aeabi_fcmpgt>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d01c      	beq.n	8001ba2 <AccelLightBarX+0x52>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	0119      	lsls	r1, r3, #4
 8001b6c:	2390      	movs	r3, #144	@ 0x90
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	2200      	movs	r2, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fc26 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <AccelLightBarX+0x158>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2140      	movs	r1, #64	@ 0x40
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fc20 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001b84:	2390      	movs	r3, #144	@ 0x90
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fc19 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001b92:	2390      	movs	r3, #144	@ 0x90
 8001b94:	05db      	lsls	r3, r3, #23
 8001b96:	2200      	movs	r2, #0
 8001b98:	2140      	movs	r1, #64	@ 0x40
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fc12 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
	  } else if (acceleration_mg[0] < 225) {
		  allState(1);
	  }
}
 8001ba0:	e07a      	b.n	8001c98 <AccelLightBarX+0x148>
	  } else if (acceleration_mg[0] > 675) {
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <AccelLightBarX+0x150>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4941      	ldr	r1, [pc, #260]	@ (8001cac <AccelLightBarX+0x15c>)
 8001ba8:	1c18      	adds	r0, r3, #0
 8001baa:	f7fe fb5f 	bl	800026c <__aeabi_fcmpgt>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d01c      	beq.n	8001bec <AccelLightBarX+0x9c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	0119      	lsls	r1, r3, #4
 8001bb6:	2390      	movs	r3, #144	@ 0x90
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	2201      	movs	r2, #1
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fc01 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <AccelLightBarX+0x158>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2140      	movs	r1, #64	@ 0x40
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fbfb 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001bce:	2390      	movs	r3, #144	@ 0x90
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 fbf4 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001bdc:	2390      	movs	r3, #144	@ 0x90
 8001bde:	05db      	lsls	r3, r3, #23
 8001be0:	2200      	movs	r2, #0
 8001be2:	2140      	movs	r1, #64	@ 0x40
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 fbed 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8001bea:	e055      	b.n	8001c98 <AccelLightBarX+0x148>
	  } else if (acceleration_mg[0] > 450) {
 8001bec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <AccelLightBarX+0x150>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	492f      	ldr	r1, [pc, #188]	@ (8001cb0 <AccelLightBarX+0x160>)
 8001bf2:	1c18      	adds	r0, r3, #0
 8001bf4:	f7fe fb3a 	bl	800026c <__aeabi_fcmpgt>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d01c      	beq.n	8001c36 <AccelLightBarX+0xe6>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	0119      	lsls	r1, r3, #4
 8001c00:	2390      	movs	r3, #144	@ 0x90
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	2201      	movs	r2, #1
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fbdc 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <AccelLightBarX+0x158>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2140      	movs	r1, #64	@ 0x40
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fbd6 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001c18:	2390      	movs	r3, #144	@ 0x90
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 fbcf 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001c26:	2390      	movs	r3, #144	@ 0x90
 8001c28:	05db      	lsls	r3, r3, #23
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2140      	movs	r1, #64	@ 0x40
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fbc8 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8001c34:	e030      	b.n	8001c98 <AccelLightBarX+0x148>
	  } else if (acceleration_mg[0] > 225) {
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <AccelLightBarX+0x150>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	491e      	ldr	r1, [pc, #120]	@ (8001cb4 <AccelLightBarX+0x164>)
 8001c3c:	1c18      	adds	r0, r3, #0
 8001c3e:	f7fe fb15 	bl	800026c <__aeabi_fcmpgt>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d01c      	beq.n	8001c80 <AccelLightBarX+0x130>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	0119      	lsls	r1, r3, #4
 8001c4a:	2390      	movs	r3, #144	@ 0x90
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	2201      	movs	r2, #1
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 fbb7 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <AccelLightBarX+0x158>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 fbb1 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001c62:	2390      	movs	r3, #144	@ 0x90
 8001c64:	05db      	lsls	r3, r3, #23
 8001c66:	2201      	movs	r2, #1
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 fbaa 	bl	80023c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001c70:	2390      	movs	r3, #144	@ 0x90
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	@ 0x40
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fba3 	bl	80023c4 <HAL_GPIO_WritePin>
}
 8001c7e:	e00b      	b.n	8001c98 <AccelLightBarX+0x148>
	  } else if (acceleration_mg[0] < 225) {
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <AccelLightBarX+0x150>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	490b      	ldr	r1, [pc, #44]	@ (8001cb4 <AccelLightBarX+0x164>)
 8001c86:	1c18      	adds	r0, r3, #0
 8001c88:	f7fe fadc 	bl	8000244 <__aeabi_fcmplt>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d100      	bne.n	8001c92 <AccelLightBarX+0x142>
}
 8001c90:	e002      	b.n	8001c98 <AccelLightBarX+0x148>
		  allState(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff fda6 	bl	80017e4 <allState>
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			@ (mov r8, r8)
 8001ca0:	20000088 	.word	0x20000088
 8001ca4:	44610000 	.word	0x44610000
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	4428c000 	.word	0x4428c000
 8001cb0:	43e10000 	.word	0x43e10000
 8001cb4:	43610000 	.word	0x43610000

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbc:	f000 f8d6 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc0:	f000 f80a 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc4:	f7ff f9da 	bl	800107c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001cc8:	f7ff fa6e 	bl	80011a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  allState(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7ff fd89 	bl	80017e4 <allState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AccelLightBarX();
 8001cd2:	f7ff ff3d 	bl	8001b50 <AccelLightBarX>
 8001cd6:	e7fc      	b.n	8001cd2 <main+0x1a>

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b095      	sub	sp, #84	@ 0x54
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	2420      	movs	r4, #32
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	2330      	movs	r3, #48	@ 0x30
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f001 ff31 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cee:	2310      	movs	r3, #16
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f001 ff29 	bl	8003b50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfe:	003b      	movs	r3, r7
 8001d00:	0018      	movs	r0, r3
 8001d02:	2310      	movs	r3, #16
 8001d04:	001a      	movs	r2, r3
 8001d06:	2100      	movs	r1, #0
 8001d08:	f001 ff22 	bl	8003b50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d0c:	0021      	movs	r1, r4
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2202      	movs	r2, #2
 8001d12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	2201      	movs	r2, #1
 8001d18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f001 fa05 	bl	8003138 <HAL_RCC_OscConfig>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001d32:	f000 f828 	bl	8001d86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	2110      	movs	r1, #16
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2100      	movs	r1, #0
 8001d54:	0018      	movs	r0, r3
 8001d56:	f001 fd09 	bl	800376c <HAL_RCC_ClockConfig>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d5e:	f000 f812 	bl	8001d86 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d62:	003b      	movs	r3, r7
 8001d64:	2220      	movs	r2, #32
 8001d66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d68:	003b      	movs	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6e:	003b      	movs	r3, r7
 8001d70:	0018      	movs	r0, r3
 8001d72:	f001 fe1f 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d7a:	f000 f804 	bl	8001d86 <Error_Handler>
  }
}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b015      	add	sp, #84	@ 0x54
 8001d84:	bd90      	pop	{r4, r7, pc}

08001d86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8a:	b672      	cpsid	i
}
 8001d8c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	e7fd      	b.n	8001d8e <Error_Handler+0x8>
	...

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	619a      	str	r2, [r3, #24]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2201      	movs	r2, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	0549      	lsls	r1, r1, #21
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_MspInit+0x44>)
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	40021000 	.word	0x40021000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	46c0      	nop			@ (mov r8, r8)
 8001de2:	e7fd      	b.n	8001de0 <NMI_Handler+0x4>

08001de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	e7fd      	b.n	8001de8 <HardFault_Handler+0x4>

08001dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f87a 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e18:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e1c:	f7ff fff7 	bl	8001e0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <LoopForever+0xe>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	@ (8001e64 <LoopForever+0x16>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e46:	f001 fe8b 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e4a:	f7ff ff35 	bl	8001cb8 <main>

08001e4e <LoopForever>:

LoopForever:
    b LoopForever
 8001e4e:	e7fe      	b.n	8001e4e <LoopForever>
  ldr   r0, =_estack
 8001e50:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e5c:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 8001e60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e64:	2000009c 	.word	0x2000009c

08001e68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_IRQHandler>
	...

08001e6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_Init+0x24>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_Init+0x24>)
 8001e76:	2110      	movs	r1, #16
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f809 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e82:	f7ff ff87 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_InitTick+0x5c>)
 8001e9e:	681c      	ldr	r4, [r3, #0]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	23fa      	movs	r3, #250	@ 0xfa
 8001ea8:	0098      	lsls	r0, r3, #2
 8001eaa:	f7fe f92d 	bl	8000108 <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f905 	bl	80020ca <HAL_SYSTICK_Config>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00f      	b.n	8001ee8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d80b      	bhi.n	8001ee6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f8e2 	bl	80020a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_InitTick+0x64>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b003      	add	sp, #12
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_IncTick+0x1c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	18d2      	adds	r2, r2, r3
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000098 	.word	0x20000098

08001f20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <HAL_GetTick+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000098 	.word	0x20000098

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	001a      	movs	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	f7ff ffe0 	bl	8001f20 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b004      	add	sp, #16
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	20000008 	.word	0x20000008

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	0002      	movs	r2, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f90:	d828      	bhi.n	8001fe4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f92:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <__NVIC_SetPriority+0xd4>)
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	33c0      	adds	r3, #192	@ 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	589b      	ldr	r3, [r3, r2]
 8001fa2:	1dfa      	adds	r2, r7, #7
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	2203      	movs	r2, #3
 8001faa:	400a      	ands	r2, r1
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	21ff      	movs	r1, #255	@ 0xff
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	43d2      	mvns	r2, r2
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	22ff      	movs	r2, #255	@ 0xff
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	4003      	ands	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	481f      	ldr	r0, [pc, #124]	@ (8002050 <__NVIC_SetPriority+0xd4>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	33c0      	adds	r3, #192	@ 0xc0
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fe2:	e031      	b.n	8002048 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <__NVIC_SetPriority+0xd8>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	0019      	movs	r1, r3
 8001fec:	230f      	movs	r3, #15
 8001fee:	400b      	ands	r3, r1
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	@ 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	@ 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <__NVIC_SetPriority+0xd8>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	001c      	movs	r4, r3
 8002034:	230f      	movs	r3, #15
 8002036:	4023      	ands	r3, r4
 8002038:	3b08      	subs	r3, #8
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	430a      	orrs	r2, r1
 800203e:	3306      	adds	r3, #6
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18c3      	adds	r3, r0, r3
 8002044:	3304      	adds	r3, #4
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b003      	add	sp, #12
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	045b      	lsls	r3, r3, #17
 8002068:	429a      	cmp	r2, r3
 800206a:	d301      	bcc.n	8002070 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206c:	2301      	movs	r3, #1
 800206e:	e010      	b.n	8002092 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <SysTick_Config+0x44>)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	3a01      	subs	r2, #1
 8002076:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002078:	2301      	movs	r3, #1
 800207a:	425b      	negs	r3, r3
 800207c:	2103      	movs	r1, #3
 800207e:	0018      	movs	r0, r3
 8002080:	f7ff ff7c 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <SysTick_Config+0x44>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	@ (800209c <SysTick_Config+0x44>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	210f      	movs	r1, #15
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	1c02      	adds	r2, r0, #0
 80020b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ffbf 	bl	8002058 <SysTick_Config>
 80020da:	0003      	movs	r3, r0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f2:	e14f      	b.n	8002394 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4091      	lsls	r1, r2
 80020fe:	000a      	movs	r2, r1
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d100      	bne.n	800210c <HAL_GPIO_Init+0x28>
 800210a:	e140      	b.n	800238e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
 8002114:	2b01      	cmp	r3, #1
 8002116:	d005      	beq.n	8002124 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002120:	2b02      	cmp	r3, #2
 8002122:	d130      	bne.n	8002186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	409a      	lsls	r2, r3
 8002132:	0013      	movs	r3, r2
 8002134:	43da      	mvns	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215a:	2201      	movs	r2, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	2201      	movs	r2, #1
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
 8002178:	0013      	movs	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2203      	movs	r2, #3
 800218c:	4013      	ands	r3, r2
 800218e:	2b03      	cmp	r3, #3
 8002190:	d017      	beq.n	80021c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	43da      	mvns	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d123      	bne.n	8002216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	58d3      	ldr	r3, [r2, r3]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2207      	movs	r2, #7
 80021e0:	4013      	ands	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	409a      	lsls	r2, r3
 80021e8:	0013      	movs	r3, r2
 80021ea:	43da      	mvns	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2107      	movs	r1, #7
 80021fa:	400b      	ands	r3, r1
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3208      	adds	r2, #8
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	6939      	ldr	r1, [r7, #16]
 8002214:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	401a      	ands	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	23c0      	movs	r3, #192	@ 0xc0
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	4013      	ands	r3, r2
 8002254:	d100      	bne.n	8002258 <HAL_GPIO_Init+0x174>
 8002256:	e09a      	b.n	800238e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002258:	4b54      	ldr	r3, [pc, #336]	@ (80023ac <HAL_GPIO_Init+0x2c8>)
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_GPIO_Init+0x2c8>)
 800225e:	2101      	movs	r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_GPIO_Init+0x2c8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002270:	4a4f      	ldr	r2, [pc, #316]	@ (80023b0 <HAL_GPIO_Init+0x2cc>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	589b      	ldr	r3, [r3, r2]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	43da      	mvns	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	2390      	movs	r3, #144	@ 0x90
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	429a      	cmp	r2, r3
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x1e2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a44      	ldr	r2, [pc, #272]	@ (80023b4 <HAL_GPIO_Init+0x2d0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x1de>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a43      	ldr	r2, [pc, #268]	@ (80023b8 <HAL_GPIO_Init+0x2d4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <HAL_GPIO_Init+0x2d8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x1d6>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x1e4>
 80022c6:	2300      	movs	r3, #0
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	2103      	movs	r1, #3
 80022cc:	400a      	ands	r2, r1
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	@ (80023b0 <HAL_GPIO_Init+0x2cc>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43da      	mvns	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	035b      	lsls	r3, r3, #13
 80022fe:	4013      	ands	r3, r2
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800230a:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43da      	mvns	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	039b      	lsls	r3, r3, #14
 8002328:	4013      	ands	r3, r2
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002334:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800233a:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43da      	mvns	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	4013      	ands	r3, r2
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43da      	mvns	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	4013      	ands	r3, r2
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_GPIO_Init+0x2dc>)
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	40da      	lsrs	r2, r3
 800239c:	1e13      	subs	r3, r2, #0
 800239e:	d000      	beq.n	80023a2 <HAL_GPIO_Init+0x2be>
 80023a0:	e6a8      	b.n	80020f4 <HAL_GPIO_Init+0x10>
  } 
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	0008      	movs	r0, r1
 80023ce:	0011      	movs	r1, r2
 80023d0:	1cbb      	adds	r3, r7, #2
 80023d2:	1c02      	adds	r2, r0, #0
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	1c7b      	adds	r3, r7, #1
 80023d8:	1c0a      	adds	r2, r1, #0
 80023da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023dc:	1c7b      	adds	r3, r7, #1
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e4:	1cbb      	adds	r3, r7, #2
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e08f      	b.n	8002532 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2241      	movs	r2, #65	@ 0x41
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f7fe fefd 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2241      	movs	r2, #65	@ 0x41
 8002432:	2124      	movs	r1, #36	@ 0x24
 8002434:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	438a      	bics	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	493b      	ldr	r1, [pc, #236]	@ (800253c <HAL_I2C_Init+0x13c>)
 8002450:	400a      	ands	r2, r1
 8002452:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4938      	ldr	r1, [pc, #224]	@ (8002540 <HAL_I2C_Init+0x140>)
 8002460:	400a      	ands	r2, r1
 8002462:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2180      	movs	r1, #128	@ 0x80
 8002476:	0209      	lsls	r1, r1, #8
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e007      	b.n	800248e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2184      	movs	r1, #132	@ 0x84
 8002488:	0209      	lsls	r1, r1, #8
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d109      	bne.n	80024aa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2180      	movs	r1, #128	@ 0x80
 80024a2:	0109      	lsls	r1, r1, #4
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	e007      	b.n	80024ba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4923      	ldr	r1, [pc, #140]	@ (8002544 <HAL_I2C_Init+0x144>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4920      	ldr	r1, [pc, #128]	@ (8002548 <HAL_I2C_Init+0x148>)
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	491a      	ldr	r1, [pc, #104]	@ (8002540 <HAL_I2C_Init+0x140>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69d9      	ldr	r1, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2241      	movs	r2, #65	@ 0x41
 800251e:	2120      	movs	r1, #32
 8002520:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2242      	movs	r2, #66	@ 0x42
 800252c:	2100      	movs	r1, #0
 800252e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	f0ffffff 	.word	0xf0ffffff
 8002540:	ffff7fff 	.word	0xffff7fff
 8002544:	fffff7ff 	.word	0xfffff7ff
 8002548:	02008000 	.word	0x02008000

0800254c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	000c      	movs	r4, r1
 8002556:	0010      	movs	r0, r2
 8002558:	0019      	movs	r1, r3
 800255a:	230a      	movs	r3, #10
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	1c22      	adds	r2, r4, #0
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	2308      	movs	r3, #8
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	1c02      	adds	r2, r0, #0
 8002568:	801a      	strh	r2, [r3, #0]
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	1c0a      	adds	r2, r1, #0
 800256e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2241      	movs	r2, #65	@ 0x41
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	d000      	beq.n	800257e <HAL_I2C_Mem_Write+0x32>
 800257c:	e10c      	b.n	8002798 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_I2C_Mem_Write+0x42>
 8002584:	232c      	movs	r3, #44	@ 0x2c
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0ff      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2240      	movs	r2, #64	@ 0x40
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_Mem_Write+0x5c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0f8      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b0:	f7ff fcb6 	bl	8001f20 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	0219      	lsls	r1, r3, #8
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2319      	movs	r3, #25
 80025c4:	2201      	movs	r2, #1
 80025c6:	f000 fb0b 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0e3      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2241      	movs	r2, #65	@ 0x41
 80025d6:	2121      	movs	r1, #33	@ 0x21
 80025d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2242      	movs	r2, #66	@ 0x42
 80025de:	2140      	movs	r1, #64	@ 0x40
 80025e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	222c      	movs	r2, #44	@ 0x2c
 80025f2:	18ba      	adds	r2, r7, r2
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025fe:	1dbb      	adds	r3, r7, #6
 8002600:	881c      	ldrh	r4, [r3, #0]
 8002602:	2308      	movs	r3, #8
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	230a      	movs	r3, #10
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	8819      	ldrh	r1, [r3, #0]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	0023      	movs	r3, r4
 800261a:	f000 f9f9 	bl	8002a10 <I2C_RequestMemoryWrite>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d005      	beq.n	800262e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2240      	movs	r2, #64	@ 0x40
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0b5      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2bff      	cmp	r3, #255	@ 0xff
 8002636:	d911      	bls.n	800265c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	22ff      	movs	r2, #255	@ 0xff
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	b2da      	uxtb	r2, r3
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	045c      	lsls	r4, r3, #17
 8002648:	230a      	movs	r3, #10
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	8819      	ldrh	r1, [r3, #0]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	0023      	movs	r3, r4
 8002656:	f000 fc9d 	bl	8002f94 <I2C_TransferConfig>
 800265a:	e012      	b.n	8002682 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	049c      	lsls	r4, r3, #18
 8002670:	230a      	movs	r3, #10
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	8819      	ldrh	r1, [r3, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0023      	movs	r3, r4
 800267e:	f000 fc89 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fb01 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e081      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d03a      	beq.n	8002746 <HAL_I2C_Mem_Write+0x1fa>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d136      	bne.n	8002746 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	0013      	movs	r3, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	f000 fa7b 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e053      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2bff      	cmp	r3, #255	@ 0xff
 80026fa:	d911      	bls.n	8002720 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	b2da      	uxtb	r2, r3
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	045c      	lsls	r4, r3, #17
 800270c:	230a      	movs	r3, #10
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	8819      	ldrh	r1, [r3, #0]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	0023      	movs	r3, r4
 800271a:	f000 fc3b 	bl	8002f94 <I2C_TransferConfig>
 800271e:	e012      	b.n	8002746 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	b2da      	uxtb	r2, r3
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	049c      	lsls	r4, r3, #18
 8002734:	230a      	movs	r3, #10
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	8819      	ldrh	r1, [r3, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	0023      	movs	r3, r4
 8002742:	f000 fc27 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d198      	bne.n	8002682 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fae0 	bl	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e01a      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2220      	movs	r2, #32
 800276a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	490b      	ldr	r1, [pc, #44]	@ (80027a4 <HAL_I2C_Mem_Write+0x258>)
 8002778:	400a      	ands	r2, r1
 800277a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2241      	movs	r2, #65	@ 0x41
 8002780:	2120      	movs	r1, #32
 8002782:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2242      	movs	r2, #66	@ 0x42
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b007      	add	sp, #28
 80027a0:	bd90      	pop	{r4, r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	fe00e800 	.word	0xfe00e800

080027a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	000c      	movs	r4, r1
 80027b2:	0010      	movs	r0, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	230a      	movs	r3, #10
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	1c22      	adds	r2, r4, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	2308      	movs	r3, #8
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	1c02      	adds	r2, r0, #0
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	1dbb      	adds	r3, r7, #6
 80027c8:	1c0a      	adds	r2, r1, #0
 80027ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2241      	movs	r2, #65	@ 0x41
 80027d0:	5c9b      	ldrb	r3, [r3, r2]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d000      	beq.n	80027da <HAL_I2C_Mem_Read+0x32>
 80027d8:	e110      	b.n	80029fc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_I2C_Mem_Read+0x42>
 80027e0:	232c      	movs	r3, #44	@ 0x2c
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2280      	movs	r2, #128	@ 0x80
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e103      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2240      	movs	r2, #64	@ 0x40
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Mem_Read+0x5c>
 8002800:	2302      	movs	r3, #2
 8002802:	e0fc      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800280c:	f7ff fb88 	bl	8001f20 <HAL_GetTick>
 8002810:	0003      	movs	r3, r0
 8002812:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	0219      	lsls	r1, r3, #8
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2319      	movs	r3, #25
 8002820:	2201      	movs	r2, #1
 8002822:	f000 f9dd 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0e7      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2241      	movs	r2, #65	@ 0x41
 8002832:	2122      	movs	r1, #34	@ 0x22
 8002834:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2242      	movs	r2, #66	@ 0x42
 800283a:	2140      	movs	r1, #64	@ 0x40
 800283c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	222c      	movs	r2, #44	@ 0x2c
 800284e:	18ba      	adds	r2, r7, r2
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	881c      	ldrh	r4, [r3, #0]
 800285e:	2308      	movs	r3, #8
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	230a      	movs	r3, #10
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	8819      	ldrh	r1, [r3, #0]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	0023      	movs	r3, r4
 8002876:	f000 f92f 	bl	8002ad8 <I2C_RequestMemoryRead>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d005      	beq.n	800288a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2240      	movs	r2, #64	@ 0x40
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0b9      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2bff      	cmp	r3, #255	@ 0xff
 8002892:	d911      	bls.n	80028b8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	045c      	lsls	r4, r3, #17
 80028a4:	230a      	movs	r3, #10
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	8819      	ldrh	r1, [r3, #0]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	4b56      	ldr	r3, [pc, #344]	@ (8002a08 <HAL_I2C_Mem_Read+0x260>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	0023      	movs	r3, r4
 80028b2:	f000 fb6f 	bl	8002f94 <I2C_TransferConfig>
 80028b6:	e012      	b.n	80028de <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	049c      	lsls	r4, r3, #18
 80028cc:	230a      	movs	r3, #10
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	8819      	ldrh	r1, [r3, #0]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002a08 <HAL_I2C_Mem_Read+0x260>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	0023      	movs	r3, r4
 80028da:	f000 fb5b 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	0013      	movs	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	2104      	movs	r1, #4
 80028ec:	f000 f978 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e082      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03a      	beq.n	80029aa <HAL_I2C_Mem_Read+0x202>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d136      	bne.n	80029aa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800293c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	0013      	movs	r3, r2
 8002946:	2200      	movs	r2, #0
 8002948:	2180      	movs	r1, #128	@ 0x80
 800294a:	f000 f949 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e053      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2bff      	cmp	r3, #255	@ 0xff
 800295e:	d911      	bls.n	8002984 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	b2da      	uxtb	r2, r3
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	045c      	lsls	r4, r3, #17
 8002970:	230a      	movs	r3, #10
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	8819      	ldrh	r1, [r3, #0]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	2300      	movs	r3, #0
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	0023      	movs	r3, r4
 800297e:	f000 fb09 	bl	8002f94 <I2C_TransferConfig>
 8002982:	e012      	b.n	80029aa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	b2da      	uxtb	r2, r3
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	049c      	lsls	r4, r3, #18
 8002998:	230a      	movs	r3, #10
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	8819      	ldrh	r1, [r3, #0]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	2300      	movs	r3, #0
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	0023      	movs	r3, r4
 80029a6:	f000 faf5 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d194      	bne.n	80028de <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f9ae 	bl	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	1e03      	subs	r3, r0, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e01a      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <HAL_I2C_Mem_Read+0x264>)
 80029dc:	400a      	ands	r2, r1
 80029de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2241      	movs	r2, #65	@ 0x41
 80029e4:	2120      	movs	r1, #32
 80029e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2242      	movs	r2, #66	@ 0x42
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b007      	add	sp, #28
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	80002400 	.word	0x80002400
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	000c      	movs	r4, r1
 8002a1a:	0010      	movs	r0, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	250a      	movs	r5, #10
 8002a20:	197b      	adds	r3, r7, r5
 8002a22:	1c22      	adds	r2, r4, #0
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	2308      	movs	r3, #8
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	1c02      	adds	r2, r0, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	1dbb      	adds	r3, r7, #6
 8002a30:	1c0a      	adds	r2, r1, #0
 8002a32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a34:	1dbb      	adds	r3, r7, #6
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	045c      	lsls	r4, r3, #17
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	8819      	ldrh	r1, [r3, #0]
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <I2C_RequestMemoryWrite+0xc4>)
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	0023      	movs	r3, r4
 8002a4a:	f000 faa3 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	6a39      	ldr	r1, [r7, #32]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f91b 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e033      	b.n	8002aca <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a62:	1dbb      	adds	r3, r7, #6
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a78:	e019      	b.n	8002aae <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8e:	6a39      	ldr	r1, [r7, #32]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f8fc 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e014      	b.n	8002aca <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a3a      	ldr	r2, [r7, #32]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	f000 f890 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	80002000 	.word	0x80002000

08002ad8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	250a      	movs	r5, #10
 8002ae8:	197b      	adds	r3, r7, r5
 8002aea:	1c22      	adds	r2, r4, #0
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	2308      	movs	r3, #8
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	1c02      	adds	r2, r0, #0
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	1c0a      	adds	r2, r1, #0
 8002afa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002afc:	1dbb      	adds	r3, r7, #6
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	197b      	adds	r3, r7, r5
 8002b04:	8819      	ldrh	r1, [r3, #0]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <I2C_RequestMemoryRead+0xc0>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f000 fa41 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f8b9 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e033      	b.n	8002b8e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	1dbb      	adds	r3, r7, #6
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2e:	2308      	movs	r3, #8
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b3c:	e019      	b.n	8002b72 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3e:	2308      	movs	r3, #8
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f89a 	bl	8002c90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e014      	b.n	8002b8e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b64:	2308      	movs	r3, #8
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2140      	movs	r1, #64	@ 0x40
 8002b80:	f000 f82e 	bl	8002be0 <I2C_WaitOnFlagUntilTimeout>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	80002000 	.word	0x80002000

08002b9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d103      	bne.n	8002bba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	619a      	str	r2, [r3, #24]
  }
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf0:	e03a      	b.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 f8d3 	bl	8002da4 <I2C_IsErrorOccurred>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e040      	b.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	d02d      	beq.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7ff f988 	bl	8001f20 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d122      	bne.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	425a      	negs	r2, r3
 8002c32:	4153      	adcs	r3, r2
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	001a      	movs	r2, r3
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d113      	bne.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	2220      	movs	r2, #32
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2241      	movs	r2, #65	@ 0x41
 8002c50:	2120      	movs	r1, #32
 8002c52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2242      	movs	r2, #66	@ 0x42
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	@ 0x40
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e00f      	b.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	425a      	negs	r2, r3
 8002c78:	4153      	adcs	r3, r2
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	1dfb      	adds	r3, r7, #7
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d0b5      	beq.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c9c:	e032      	b.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f87d 	bl	8002da4 <I2C_IsErrorOccurred>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e030      	b.n	8002d14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	d025      	beq.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7ff f932 	bl	8001f20 <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11a      	bne.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d013      	beq.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2241      	movs	r2, #65	@ 0x41
 8002cec:	2120      	movs	r1, #32
 8002cee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2242      	movs	r2, #66	@ 0x42
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d1c5      	bne.n	8002c9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d28:	e02f      	b.n	8002d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f837 	bl	8002da4 <I2C_IsErrorOccurred>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e02d      	b.n	8002d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7ff f8ef 	bl	8001f20 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11a      	bne.n	8002d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d013      	beq.n	8002d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	2220      	movs	r2, #32
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2241      	movs	r2, #65	@ 0x41
 8002d72:	2120      	movs	r1, #32
 8002d74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2242      	movs	r2, #66	@ 0x42
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2240      	movs	r2, #64	@ 0x40
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e007      	b.n	8002d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2220      	movs	r2, #32
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d1c8      	bne.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2327      	movs	r3, #39	@ 0x27
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <I2C_IsErrorOccurred+0x2e>
 8002dd0:	e079      	b.n	8002ec6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dda:	e057      	b.n	8002e8c <I2C_IsErrorOccurred+0xe8>
 8002ddc:	2227      	movs	r2, #39	@ 0x27
 8002dde:	18bb      	adds	r3, r7, r2
 8002de0:	18ba      	adds	r2, r7, r2
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3301      	adds	r3, #1
 8002dea:	d04f      	beq.n	8002e8c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7ff f898 	bl	8001f20 <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <I2C_IsErrorOccurred+0x5e>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d144      	bne.n	8002e8c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e10:	2013      	movs	r0, #19
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	2142      	movs	r1, #66	@ 0x42
 8002e18:	5c52      	ldrb	r2, [r2, r1]
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	401a      	ands	r2, r3
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d126      	bne.n	8002e7e <I2C_IsErrorOccurred+0xda>
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	01db      	lsls	r3, r3, #7
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d021      	beq.n	8002e7e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002e3a:	183b      	adds	r3, r7, r0
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d01d      	beq.n	8002e7e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2180      	movs	r1, #128	@ 0x80
 8002e4e:	01c9      	lsls	r1, r1, #7
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e54:	f7ff f864 	bl	8001f20 <HAL_GetTick>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e5c:	e00f      	b.n	8002e7e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e5e:	f7ff f85f 	bl	8001f20 <HAL_GetTick>
 8002e62:	0002      	movs	r2, r0
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b19      	cmp	r3, #25
 8002e6a:	d908      	bls.n	8002e7e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	4313      	orrs	r3, r2
 8002e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e74:	2327      	movs	r3, #39	@ 0x27
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]

              break;
 8002e7c:	e006      	b.n	8002e8c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2220      	movs	r2, #32
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d1e8      	bne.n	8002e5e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2220      	movs	r2, #32
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d004      	beq.n	8002ea4 <I2C_IsErrorOccurred+0x100>
 8002e9a:	2327      	movs	r3, #39	@ 0x27
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d09b      	beq.n	8002ddc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ea4:	2327      	movs	r3, #39	@ 0x27
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ebe:	2327      	movs	r3, #39	@ 0x27
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00c      	beq.n	8002ef2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2201      	movs	r2, #1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2280      	movs	r2, #128	@ 0x80
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eea:	2327      	movs	r3, #39	@ 0x27
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00c      	beq.n	8002f16 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2208      	movs	r2, #8
 8002f00:	4313      	orrs	r3, r2
 8002f02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2280      	movs	r2, #128	@ 0x80
 8002f0a:	00d2      	lsls	r2, r2, #3
 8002f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f0e:	2327      	movs	r3, #39	@ 0x27
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00c      	beq.n	8002f3a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2202      	movs	r2, #2
 8002f24:	4313      	orrs	r3, r2
 8002f26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2280      	movs	r2, #128	@ 0x80
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f32:	2327      	movs	r3, #39	@ 0x27
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f3a:	2327      	movs	r3, #39	@ 0x27
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01d      	beq.n	8002f80 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff fe28 	bl	8002b9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	490e      	ldr	r1, [pc, #56]	@ (8002f90 <I2C_IsErrorOccurred+0x1ec>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2241      	movs	r2, #65	@ 0x41
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2242      	movs	r2, #66	@ 0x42
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f80:	2327      	movs	r3, #39	@ 0x27
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b00a      	add	sp, #40	@ 0x28
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	fe00e800 	.word	0xfe00e800

08002f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	0008      	movs	r0, r1
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	240a      	movs	r4, #10
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	1c02      	adds	r2, r0, #0
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	2009      	movs	r0, #9
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	1c0a      	adds	r2, r1, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	059b      	lsls	r3, r3, #22
 8002fb8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0419      	lsls	r1, r3, #16
 8002fc0:	23ff      	movs	r3, #255	@ 0xff
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fde:	0d51      	lsrs	r1, r2, #21
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	00d2      	lsls	r2, r2, #3
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	4907      	ldr	r1, [pc, #28]	@ (8003004 <I2C_TransferConfig+0x70>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	43d2      	mvns	r2, r2
 8002fec:	401a      	ands	r2, r3
 8002fee:	0011      	movs	r1, r2
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b007      	add	sp, #28
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	03ff63ff 	.word	0x03ff63ff

08003008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	@ 0x41
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	d138      	bne.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2240      	movs	r2, #64	@ 0x40
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003028:	2302      	movs	r3, #2
 800302a:	e032      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	2101      	movs	r1, #1
 8003032:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2241      	movs	r2, #65	@ 0x41
 8003038:	2124      	movs	r1, #36	@ 0x24
 800303a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	438a      	bics	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4911      	ldr	r1, [pc, #68]	@ (800309c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2241      	movs	r2, #65	@ 0x41
 8003080:	2120      	movs	r1, #32
 8003082:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	@ 0x40
 8003088:	2100      	movs	r1, #0
 800308a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	ffffefff 	.word	0xffffefff

080030a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2241      	movs	r2, #65	@ 0x41
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d139      	bne.n	800312a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2240      	movs	r2, #64	@ 0x40
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e033      	b.n	800312c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2240      	movs	r2, #64	@ 0x40
 80030c8:	2101      	movs	r1, #1
 80030ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2241      	movs	r2, #65	@ 0x41
 80030d0:	2124      	movs	r1, #36	@ 0x24
 80030d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2241      	movs	r2, #65	@ 0x41
 800311a:	2120      	movs	r1, #32
 800311c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e000      	b.n	800312c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	fffff0ff 	.word	0xfffff0ff

08003138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e301      	b.n	800374e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d100      	bne.n	8003156 <HAL_RCC_OscConfig+0x1e>
 8003154:	e08d      	b.n	8003272 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003156:	4bc3      	ldr	r3, [pc, #780]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	220c      	movs	r2, #12
 800315c:	4013      	ands	r3, r2
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00e      	beq.n	8003180 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003162:	4bc0      	ldr	r3, [pc, #768]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	220c      	movs	r2, #12
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d116      	bne.n	800319c <HAL_RCC_OscConfig+0x64>
 800316e:	4bbd      	ldr	r3, [pc, #756]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	429a      	cmp	r2, r3
 800317e:	d10d      	bne.n	800319c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4bb8      	ldr	r3, [pc, #736]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	4013      	ands	r3, r2
 800318a:	d100      	bne.n	800318e <HAL_RCC_OscConfig+0x56>
 800318c:	e070      	b.n	8003270 <HAL_RCC_OscConfig+0x138>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d000      	beq.n	8003198 <HAL_RCC_OscConfig+0x60>
 8003196:	e06b      	b.n	8003270 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e2d8      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x7c>
 80031a4:	4baf      	ldr	r3, [pc, #700]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4bae      	ldr	r3, [pc, #696]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	0249      	lsls	r1, r1, #9
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e02f      	b.n	8003214 <HAL_RCC_OscConfig+0xdc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x9e>
 80031bc:	4ba9      	ldr	r3, [pc, #676]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4ba8      	ldr	r3, [pc, #672]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031c2:	49a9      	ldr	r1, [pc, #676]	@ (8003468 <HAL_RCC_OscConfig+0x330>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	4ba6      	ldr	r3, [pc, #664]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4ba5      	ldr	r3, [pc, #660]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031ce:	49a7      	ldr	r1, [pc, #668]	@ (800346c <HAL_RCC_OscConfig+0x334>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e01e      	b.n	8003214 <HAL_RCC_OscConfig+0xdc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10e      	bne.n	80031fc <HAL_RCC_OscConfig+0xc4>
 80031de:	4ba1      	ldr	r3, [pc, #644]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4ba0      	ldr	r3, [pc, #640]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031e4:	2180      	movs	r1, #128	@ 0x80
 80031e6:	02c9      	lsls	r1, r1, #11
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	4b9d      	ldr	r3, [pc, #628]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	0249      	lsls	r1, r1, #9
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0xdc>
 80031fc:	4b99      	ldr	r3, [pc, #612]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b98      	ldr	r3, [pc, #608]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003202:	4999      	ldr	r1, [pc, #612]	@ (8003468 <HAL_RCC_OscConfig+0x330>)
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	4b96      	ldr	r3, [pc, #600]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b95      	ldr	r3, [pc, #596]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800320e:	4997      	ldr	r1, [pc, #604]	@ (800346c <HAL_RCC_OscConfig+0x334>)
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fe80 	bl	8001f20 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003226:	f7fe fe7b 	bl	8001f20 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	@ 0x64
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e28a      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003238:	4b8a      	ldr	r3, [pc, #552]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	4013      	ands	r3, r2
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0xee>
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003246:	f7fe fe6b 	bl	8001f20 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fe66 	bl	8001f20 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e275      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b80      	ldr	r3, [pc, #512]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	4013      	ands	r3, r2
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x118>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d100      	bne.n	800327e <HAL_RCC_OscConfig+0x146>
 800327c:	e069      	b.n	8003352 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800327e:	4b79      	ldr	r3, [pc, #484]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	220c      	movs	r2, #12
 8003284:	4013      	ands	r3, r2
 8003286:	d00b      	beq.n	80032a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003288:	4b76      	ldr	r3, [pc, #472]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	220c      	movs	r2, #12
 800328e:	4013      	ands	r3, r2
 8003290:	2b08      	cmp	r3, #8
 8003292:	d11c      	bne.n	80032ce <HAL_RCC_OscConfig+0x196>
 8003294:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	025b      	lsls	r3, r3, #9
 800329c:	4013      	ands	r3, r2
 800329e:	d116      	bne.n	80032ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a0:	4b70      	ldr	r3, [pc, #448]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d005      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e24b      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b6:	4b6b      	ldr	r3, [pc, #428]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	22f8      	movs	r2, #248	@ 0xf8
 80032bc:	4393      	bics	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00da      	lsls	r2, r3, #3
 80032c6:	4b67      	ldr	r3, [pc, #412]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032cc:	e041      	b.n	8003352 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d024      	beq.n	8003320 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d6:	4b63      	ldr	r3, [pc, #396]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b62      	ldr	r3, [pc, #392]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	2101      	movs	r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7fe fe1d 	bl	8001f20 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fe18 	bl	8001f20 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e227      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b59      	ldr	r3, [pc, #356]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	d0f1      	beq.n	80032ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b56      	ldr	r3, [pc, #344]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	22f8      	movs	r2, #248	@ 0xf8
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00da      	lsls	r2, r3, #3
 8003318:	4b52      	ldr	r3, [pc, #328]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e018      	b.n	8003352 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003320:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b4f      	ldr	r3, [pc, #316]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003326:	2101      	movs	r1, #1
 8003328:	438a      	bics	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fdf8 	bl	8001f20 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fe fdf3 	bl	8001f20 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e202      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003348:	4b46      	ldr	r3, [pc, #280]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d1f1      	bne.n	8003336 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2208      	movs	r2, #8
 8003358:	4013      	ands	r3, r2
 800335a:	d036      	beq.n	80033ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d019      	beq.n	8003398 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003364:	4b3f      	ldr	r3, [pc, #252]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003368:	4b3e      	ldr	r3, [pc, #248]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800336a:	2101      	movs	r1, #1
 800336c:	430a      	orrs	r2, r1
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fdd6 	bl	8001f20 <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337a:	f7fe fdd1 	bl	8001f20 <HAL_GetTick>
 800337e:	0002      	movs	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1e0      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338c:	4b35      	ldr	r3, [pc, #212]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	2202      	movs	r2, #2
 8003392:	4013      	ands	r3, r2
 8003394:	d0f1      	beq.n	800337a <HAL_RCC_OscConfig+0x242>
 8003396:	e018      	b.n	80033ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b32      	ldr	r3, [pc, #200]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800339a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800339c:	4b31      	ldr	r3, [pc, #196]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800339e:	2101      	movs	r1, #1
 80033a0:	438a      	bics	r2, r1
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe fdbc 	bl	8001f20 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe fdb7 	bl	8001f20 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1c6      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b28      	ldr	r3, [pc, #160]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d1f1      	bne.n	80033ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2204      	movs	r2, #4
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_RCC_OscConfig+0x29e>
 80033d4:	e0b4      	b.n	8003540 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	201f      	movs	r0, #31
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	055b      	lsls	r3, r3, #21
 80033e6:	4013      	ands	r3, r2
 80033e8:	d110      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80033f0:	2180      	movs	r1, #128	@ 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	61da      	str	r2, [r3, #28]
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	055b      	lsls	r3, r3, #21
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003406:	183b      	adds	r3, r7, r0
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b18      	ldr	r3, [pc, #96]	@ (8003470 <HAL_RCC_OscConfig+0x338>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d11a      	bne.n	800344e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_RCC_OscConfig+0x338>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_RCC_OscConfig+0x338>)
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fe fd7b 	bl	8001f20 <HAL_GetTick>
 800342a:	0003      	movs	r3, r0
 800342c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fe fd76 	bl	8001f20 <HAL_GetTick>
 8003434:	0002      	movs	r2, r0
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e185      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_OscConfig+0x338>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4013      	ands	r3, r2
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10e      	bne.n	8003474 <HAL_RCC_OscConfig+0x33c>
 8003456:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	4b02      	ldr	r3, [pc, #8]	@ (8003464 <HAL_RCC_OscConfig+0x32c>)
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	e035      	b.n	80034d0 <HAL_RCC_OscConfig+0x398>
 8003464:	40021000 	.word	0x40021000
 8003468:	fffeffff 	.word	0xfffeffff
 800346c:	fffbffff 	.word	0xfffbffff
 8003470:	40007000 	.word	0x40007000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_OscConfig+0x35e>
 800347c:	4bb6      	ldr	r3, [pc, #728]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	4bb5      	ldr	r3, [pc, #724]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003482:	2101      	movs	r1, #1
 8003484:	438a      	bics	r2, r1
 8003486:	621a      	str	r2, [r3, #32]
 8003488:	4bb3      	ldr	r3, [pc, #716]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	4bb2      	ldr	r3, [pc, #712]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800348e:	2104      	movs	r1, #4
 8003490:	438a      	bics	r2, r1
 8003492:	621a      	str	r2, [r3, #32]
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x398>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x380>
 800349e:	4bae      	ldr	r3, [pc, #696]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	4bad      	ldr	r3, [pc, #692]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034a4:	2104      	movs	r1, #4
 80034a6:	430a      	orrs	r2, r1
 80034a8:	621a      	str	r2, [r3, #32]
 80034aa:	4bab      	ldr	r3, [pc, #684]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034ac:	6a1a      	ldr	r2, [r3, #32]
 80034ae:	4baa      	ldr	r3, [pc, #680]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	430a      	orrs	r2, r1
 80034b4:	621a      	str	r2, [r3, #32]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x398>
 80034b8:	4ba7      	ldr	r3, [pc, #668]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	4ba6      	ldr	r3, [pc, #664]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034be:	2101      	movs	r1, #1
 80034c0:	438a      	bics	r2, r1
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	4ba4      	ldr	r3, [pc, #656]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	4ba3      	ldr	r3, [pc, #652]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034ca:	2104      	movs	r1, #4
 80034cc:	438a      	bics	r2, r1
 80034ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d014      	beq.n	8003502 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d8:	f7fe fd22 	bl	8001f20 <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e009      	b.n	80034f6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe fd1d 	bl	8001f20 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	4a9b      	ldr	r2, [pc, #620]	@ (800375c <HAL_RCC_OscConfig+0x624>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e12b      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b98      	ldr	r3, [pc, #608]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	2202      	movs	r2, #2
 80034fc:	4013      	ands	r3, r2
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3aa>
 8003500:	e013      	b.n	800352a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe fd0d 	bl	8001f20 <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e009      	b.n	8003520 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe fd08 	bl	8001f20 <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	4a91      	ldr	r2, [pc, #580]	@ (800375c <HAL_RCC_OscConfig+0x624>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e116      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	4b8d      	ldr	r3, [pc, #564]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800352a:	231f      	movs	r3, #31
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b88      	ldr	r3, [pc, #544]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	4b87      	ldr	r3, [pc, #540]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800353a:	4989      	ldr	r1, [pc, #548]	@ (8003760 <HAL_RCC_OscConfig+0x628>)
 800353c:	400a      	ands	r2, r1
 800353e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d12a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003552:	4b81      	ldr	r3, [pc, #516]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003556:	4b80      	ldr	r3, [pc, #512]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003558:	2104      	movs	r1, #4
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800355e:	4b7e      	ldr	r3, [pc, #504]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	4b7d      	ldr	r3, [pc, #500]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fcd9 	bl	8001f20 <HAL_GetTick>
 800356e:	0003      	movs	r3, r0
 8003570:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003574:	f7fe fcd4 	bl	8001f20 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0e3      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003586:	4b74      	ldr	r3, [pc, #464]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358a:	2202      	movs	r2, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003590:	4b71      	ldr	r3, [pc, #452]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003594:	22f8      	movs	r2, #248	@ 0xf8
 8003596:	4393      	bics	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	00da      	lsls	r2, r3, #3
 80035a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035a6:	e034      	b.n	8003612 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	3305      	adds	r3, #5
 80035ae:	d111      	bne.n	80035d4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80035b0:	4b69      	ldr	r3, [pc, #420]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b4:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035b6:	2104      	movs	r1, #4
 80035b8:	438a      	bics	r2, r1
 80035ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035bc:	4b66      	ldr	r3, [pc, #408]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c0:	22f8      	movs	r2, #248	@ 0xf8
 80035c2:	4393      	bics	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	00da      	lsls	r2, r3, #3
 80035cc:	4b62      	ldr	r3, [pc, #392]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035ce:	430a      	orrs	r2, r1
 80035d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035d2:	e01e      	b.n	8003612 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035d4:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d8:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035da:	2104      	movs	r1, #4
 80035dc:	430a      	orrs	r2, r1
 80035de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80035e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fc98 	bl	8001f20 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035f6:	f7fe fc93 	bl	8001f20 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0a2      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d1f1      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d100      	bne.n	800361c <HAL_RCC_OscConfig+0x4e4>
 800361a:	e097      	b.n	800374c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b4e      	ldr	r3, [pc, #312]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	220c      	movs	r2, #12
 8003622:	4013      	ands	r3, r2
 8003624:	2b08      	cmp	r3, #8
 8003626:	d100      	bne.n	800362a <HAL_RCC_OscConfig+0x4f2>
 8003628:	e06b      	b.n	8003702 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d14c      	bne.n	80036cc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b48      	ldr	r3, [pc, #288]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003638:	494a      	ldr	r1, [pc, #296]	@ (8003764 <HAL_RCC_OscConfig+0x62c>)
 800363a:	400a      	ands	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fc6f 	bl	8001f20 <HAL_GetTick>
 8003642:	0003      	movs	r3, r0
 8003644:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fc6a 	bl	8001f20 <HAL_GetTick>
 800364c:	0002      	movs	r2, r0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e079      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	4b3f      	ldr	r3, [pc, #252]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	049b      	lsls	r3, r3, #18
 8003662:	4013      	ands	r3, r2
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003666:	4b3c      	ldr	r3, [pc, #240]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	220f      	movs	r2, #15
 800366c:	4393      	bics	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	@ 0x2c
 800367a:	4b37      	ldr	r3, [pc, #220]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a3a      	ldr	r2, [pc, #232]	@ (8003768 <HAL_RCC_OscConfig+0x630>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	431a      	orrs	r2, r3
 800368e:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 800369a:	2180      	movs	r1, #128	@ 0x80
 800369c:	0449      	lsls	r1, r1, #17
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fc3d 	bl	8001f20 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fc38 	bl	8001f20 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e047      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036be:	4b26      	ldr	r3, [pc, #152]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	049b      	lsls	r3, r3, #18
 80036c6:	4013      	ands	r3, r2
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x574>
 80036ca:	e03f      	b.n	800374c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80036d2:	4924      	ldr	r1, [pc, #144]	@ (8003764 <HAL_RCC_OscConfig+0x62c>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe fc22 	bl	8001f20 <HAL_GetTick>
 80036dc:	0003      	movs	r3, r0
 80036de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe fc1d 	bl	8001f20 <HAL_GetTick>
 80036e6:	0002      	movs	r2, r0
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e02c      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f4:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2380      	movs	r3, #128	@ 0x80
 80036fa:	049b      	lsls	r3, r3, #18
 80036fc:	4013      	ands	r3, r2
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5aa>
 8003700:	e024      	b.n	800374c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e01f      	b.n	800374e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <HAL_RCC_OscConfig+0x620>)
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	025b      	lsls	r3, r3, #9
 8003720:	401a      	ands	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	429a      	cmp	r2, r3
 8003728:	d10e      	bne.n	8003748 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	220f      	movs	r2, #15
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	23f0      	movs	r3, #240	@ 0xf0
 800373c:	039b      	lsls	r3, r3, #14
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b008      	add	sp, #32
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	40021000 	.word	0x40021000
 800375c:	00001388 	.word	0x00001388
 8003760:	efffffff 	.word	0xefffffff
 8003764:	feffffff 	.word	0xfeffffff
 8003768:	ffc2ffff 	.word	0xffc2ffff

0800376c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b3      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b5b      	ldr	r3, [pc, #364]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	4013      	ands	r3, r2
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d911      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b58      	ldr	r3, [pc, #352]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	4393      	bics	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	4b55      	ldr	r3, [pc, #340]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a0:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e09a      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2202      	movs	r2, #2
 80037b8:	4013      	ands	r3, r2
 80037ba:	d015      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2204      	movs	r2, #4
 80037c2:	4013      	ands	r3, r2
 80037c4:	d006      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037c6:	4b4b      	ldr	r3, [pc, #300]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4b4a      	ldr	r3, [pc, #296]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80037cc:	21e0      	movs	r1, #224	@ 0xe0
 80037ce:	00c9      	lsls	r1, r1, #3
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b47      	ldr	r3, [pc, #284]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	22f0      	movs	r2, #240	@ 0xf0
 80037da:	4393      	bics	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	4b44      	ldr	r3, [pc, #272]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2201      	movs	r2, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b3e      	ldr	r3, [pc, #248]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	@ 0x80
 8003800:	029b      	lsls	r3, r3, #10
 8003802:	4013      	ands	r3, r2
 8003804:	d114      	bne.n	8003830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06e      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b38      	ldr	r3, [pc, #224]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	2380      	movs	r3, #128	@ 0x80
 8003818:	049b      	lsls	r3, r3, #18
 800381a:	4013      	ands	r3, r2
 800381c:	d108      	bne.n	8003830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e062      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b34      	ldr	r3, [pc, #208]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2202      	movs	r2, #2
 8003828:	4013      	ands	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e05b      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003830:	4b30      	ldr	r3, [pc, #192]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2203      	movs	r2, #3
 8003836:	4393      	bics	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7fe fb6c 	bl	8001f20 <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384c:	e009      	b.n	8003862 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384e:	f7fe fb67 	bl	8001f20 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	4a27      	ldr	r2, [pc, #156]	@ (80038f8 <HAL_RCC_ClockConfig+0x18c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e042      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	220c      	movs	r2, #12
 8003868:	401a      	ands	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1ec      	bne.n	800384e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d211      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	4393      	bics	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <HAL_RCC_ClockConfig+0x184>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	4013      	ands	r3, r2
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e020      	b.n	80038e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a11      	ldr	r2, [pc, #68]	@ (80038fc <HAL_RCC_ClockConfig+0x190>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038c4:	f000 f820 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c8:	0001      	movs	r1, r0
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x188>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	220f      	movs	r2, #15
 80038d2:	4013      	ands	r3, r2
 80038d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <HAL_RCC_ClockConfig+0x194>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	000a      	movs	r2, r1
 80038da:	40da      	lsrs	r2, r3
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <HAL_RCC_ClockConfig+0x198>)
 80038de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038e0:	2003      	movs	r0, #3
 80038e2:	f7fe fad7 	bl	8001e94 <HAL_InitTick>
  
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40021000 	.word	0x40021000
 80038f8:	00001388 	.word	0x00001388
 80038fc:	fffff8ff 	.word	0xfffff8ff
 8003900:	08003c3c 	.word	0x08003c3c
 8003904:	20000000 	.word	0x20000000

08003908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	220c      	movs	r2, #12
 800392c:	4013      	ands	r3, r2
 800392e:	2b04      	cmp	r3, #4
 8003930:	d002      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x30>
 8003932:	2b08      	cmp	r3, #8
 8003934:	d003      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x36>
 8003936:	e02c      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800393a:	613b      	str	r3, [r7, #16]
      break;
 800393c:	e02c      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0c9b      	lsrs	r3, r3, #18
 8003942:	220f      	movs	r2, #15
 8003944:	4013      	ands	r3, r2
 8003946:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800394c:	4b15      	ldr	r3, [pc, #84]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	220f      	movs	r2, #15
 8003952:	4013      	ands	r3, r2
 8003954:	4a16      	ldr	r2, [pc, #88]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	2380      	movs	r3, #128	@ 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4810      	ldr	r0, [pc, #64]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003968:	f7fc fbce 	bl	8000108 <__udivsi3>
 800396c:	0003      	movs	r3, r0
 800396e:	001a      	movs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4353      	muls	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e009      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	000a      	movs	r2, r1
 800397c:	0152      	lsls	r2, r2, #5
 800397e:	1a52      	subs	r2, r2, r1
 8003980:	0193      	lsls	r3, r2, #6
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	185b      	adds	r3, r3, r1
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003994:	613b      	str	r3, [r7, #16]
      break;
 8003996:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003998:	693b      	ldr	r3, [r7, #16]
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b006      	add	sp, #24
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	40021000 	.word	0x40021000
 80039a8:	007a1200 	.word	0x007a1200
 80039ac:	08003c4c 	.word	0x08003c4c
 80039b0:	08003c5c 	.word	0x08003c5c

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	025b      	lsls	r3, r3, #9
 80039cc:	4013      	ands	r3, r2
 80039ce:	d100      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80039d0:	e08e      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2017      	movs	r0, #23
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b57      	ldr	r3, [pc, #348]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	055b      	lsls	r3, r3, #21
 80039e2:	4013      	ands	r3, r2
 80039e4:	d110      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b54      	ldr	r3, [pc, #336]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	4b53      	ldr	r3, [pc, #332]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039ec:	2180      	movs	r1, #128	@ 0x80
 80039ee:	0549      	lsls	r1, r1, #21
 80039f0:	430a      	orrs	r2, r1
 80039f2:	61da      	str	r2, [r3, #28]
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	055b      	lsls	r3, r3, #21
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d11a      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a14:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b48      	ldr	r3, [pc, #288]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a1a:	2180      	movs	r1, #128	@ 0x80
 8003a1c:	0049      	lsls	r1, r1, #1
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fe fa7d 	bl	8001f20 <HAL_GetTick>
 8003a26:	0003      	movs	r3, r0
 8003a28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	e008      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fe fa78 	bl	8001f20 <HAL_GetTick>
 8003a30:	0002      	movs	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e077      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4013      	ands	r3, r2
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	23c0      	movs	r3, #192	@ 0xc0
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d034      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	23c0      	movs	r3, #192	@ 0xc0
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d02c      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b32      	ldr	r3, [pc, #200]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	0249      	lsls	r1, r1, #9
 8003a80:	430a      	orrs	r2, r1
 8003a82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a8a:	492e      	ldr	r1, [pc, #184]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a90:	4b29      	ldr	r3, [pc, #164]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fa3f 	bl	8001f20 <HAL_GetTick>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa6:	e009      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fa3a 	bl	8001f20 <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e038      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a1d      	ldr	r2, [pc, #116]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b18      	ldr	r3, [pc, #96]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ada:	2317      	movs	r3, #23
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae4:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003aea:	4918      	ldr	r1, [pc, #96]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003afa:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	2203      	movs	r2, #3
 8003b00:	4393      	bics	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2220      	movs	r2, #32
 8003b14:	4013      	ands	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4393      	bics	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	0018      	movs	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	fffffcff 	.word	0xfffffcff
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	00001388 	.word	0x00001388
 8003b4c:	efffffff 	.word	0xefffffff

08003b50 <memset>:
 8003b50:	0003      	movs	r3, r0
 8003b52:	1882      	adds	r2, r0, r2
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	7019      	strb	r1, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	2600      	movs	r6, #0
 8003b64:	4c0c      	ldr	r4, [pc, #48]	@ (8003b98 <__libc_init_array+0x38>)
 8003b66:	4d0d      	ldr	r5, [pc, #52]	@ (8003b9c <__libc_init_array+0x3c>)
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	2600      	movs	r6, #0
 8003b72:	f000 f819 	bl	8003ba8 <_init>
 8003b76:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba0 <__libc_init_array+0x40>)
 8003b78:	4d0a      	ldr	r5, [pc, #40]	@ (8003ba4 <__libc_init_array+0x44>)
 8003b7a:	1b64      	subs	r4, r4, r5
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	00b3      	lsls	r3, r6, #2
 8003b86:	58eb      	ldr	r3, [r5, r3]
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	00b3      	lsls	r3, r6, #2
 8003b90:	58eb      	ldr	r3, [r5, r3]
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003c6c 	.word	0x08003c6c
 8003b9c:	08003c6c 	.word	0x08003c6c
 8003ba0:	08003c70 	.word	0x08003c70
 8003ba4:	08003c6c 	.word	0x08003c6c

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
