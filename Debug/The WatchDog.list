
The WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004038  08004038  00005038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080040e4  080040e4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e4  080040e4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040e8  080040e8  000050e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080040ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080040fc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080040fc  000060a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a44e  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6c  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00011ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000814  00000000  00000000  000129b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f81c  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cde0  00000000  00000000  000229e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a7be  00000000  00000000  0002f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00089f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  00089fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0008c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004020 	.word	0x08004020

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004020 	.word	0x08004020

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faed 	bl	8000818 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafb 	bl	8000868 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf1 	bl	8000868 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe5f 	bl	8000f68 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcb5 	bl	8000c20 <__aeabi_fsub>
 80002b6:	f000 fe57 	bl	8000f68 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	46ce      	mov	lr, r9
 80002c8:	4647      	mov	r7, r8
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5a      	lsrs	r2, r3, #9
 80002ce:	024e      	lsls	r6, r1, #9
 80002d0:	0045      	lsls	r5, r0, #1
 80002d2:	0fc4      	lsrs	r4, r0, #31
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	4691      	mov	r9, r2
 80002d8:	0e2d      	lsrs	r5, r5, #24
 80002da:	0a72      	lsrs	r2, r6, #9
 80002dc:	0e00      	lsrs	r0, r0, #24
 80002de:	4694      	mov	ip, r2
 80002e0:	b580      	push	{r7, lr}
 80002e2:	099b      	lsrs	r3, r3, #6
 80002e4:	0fc9      	lsrs	r1, r1, #31
 80002e6:	09b6      	lsrs	r6, r6, #6
 80002e8:	1a2a      	subs	r2, r5, r0
 80002ea:	428c      	cmp	r4, r1
 80002ec:	d021      	beq.n	8000332 <__aeabi_fadd+0x6e>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dd0d      	ble.n	800030e <__aeabi_fadd+0x4a>
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d12d      	bne.n	8000352 <__aeabi_fadd+0x8e>
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d100      	bne.n	80002fc <__aeabi_fadd+0x38>
 80002fa:	e08d      	b.n	8000418 <__aeabi_fadd+0x154>
 80002fc:	1e51      	subs	r1, r2, #1
 80002fe:	2a01      	cmp	r2, #1
 8000300:	d100      	bne.n	8000304 <__aeabi_fadd+0x40>
 8000302:	e11d      	b.n	8000540 <__aeabi_fadd+0x27c>
 8000304:	2aff      	cmp	r2, #255	@ 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0x46>
 8000308:	e0ab      	b.n	8000462 <__aeabi_fadd+0x19e>
 800030a:	000a      	movs	r2, r1
 800030c:	e027      	b.n	800035e <__aeabi_fadd+0x9a>
 800030e:	2a00      	cmp	r2, #0
 8000310:	d04d      	beq.n	80003ae <__aeabi_fadd+0xea>
 8000312:	1b42      	subs	r2, r0, r5
 8000314:	2d00      	cmp	r5, #0
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0x56>
 8000318:	e0cc      	b.n	80004b4 <__aeabi_fadd+0x1f0>
 800031a:	2b00      	cmp	r3, #0
 800031c:	d100      	bne.n	8000320 <__aeabi_fadd+0x5c>
 800031e:	e079      	b.n	8000414 <__aeabi_fadd+0x150>
 8000320:	1e54      	subs	r4, r2, #1
 8000322:	2a01      	cmp	r2, #1
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e128      	b.n	800057a <__aeabi_fadd+0x2b6>
 8000328:	2aff      	cmp	r2, #255	@ 0xff
 800032a:	d100      	bne.n	800032e <__aeabi_fadd+0x6a>
 800032c:	e097      	b.n	800045e <__aeabi_fadd+0x19a>
 800032e:	0022      	movs	r2, r4
 8000330:	e0c5      	b.n	80004be <__aeabi_fadd+0x1fa>
 8000332:	2a00      	cmp	r2, #0
 8000334:	dc00      	bgt.n	8000338 <__aeabi_fadd+0x74>
 8000336:	e096      	b.n	8000466 <__aeabi_fadd+0x1a2>
 8000338:	2800      	cmp	r0, #0
 800033a:	d04f      	beq.n	80003dc <__aeabi_fadd+0x118>
 800033c:	2dff      	cmp	r5, #255	@ 0xff
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x7e>
 8000340:	e08f      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	04c9      	lsls	r1, r1, #19
 8000346:	430e      	orrs	r6, r1
 8000348:	2a1b      	cmp	r2, #27
 800034a:	dd51      	ble.n	80003f0 <__aeabi_fadd+0x12c>
 800034c:	002a      	movs	r2, r5
 800034e:	3301      	adds	r3, #1
 8000350:	e018      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000352:	2dff      	cmp	r5, #255	@ 0xff
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x94>
 8000356:	e084      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	04c9      	lsls	r1, r1, #19
 800035c:	430e      	orrs	r6, r1
 800035e:	2101      	movs	r1, #1
 8000360:	2a1b      	cmp	r2, #27
 8000362:	dc08      	bgt.n	8000376 <__aeabi_fadd+0xb2>
 8000364:	0031      	movs	r1, r6
 8000366:	2020      	movs	r0, #32
 8000368:	40d1      	lsrs	r1, r2
 800036a:	1a82      	subs	r2, r0, r2
 800036c:	4096      	lsls	r6, r2
 800036e:	0032      	movs	r2, r6
 8000370:	1e50      	subs	r0, r2, #1
 8000372:	4182      	sbcs	r2, r0
 8000374:	4311      	orrs	r1, r2
 8000376:	1a5b      	subs	r3, r3, r1
 8000378:	015a      	lsls	r2, r3, #5
 800037a:	d459      	bmi.n	8000430 <__aeabi_fadd+0x16c>
 800037c:	2107      	movs	r1, #7
 800037e:	002a      	movs	r2, r5
 8000380:	4019      	ands	r1, r3
 8000382:	d049      	beq.n	8000418 <__aeabi_fadd+0x154>
 8000384:	210f      	movs	r1, #15
 8000386:	4019      	ands	r1, r3
 8000388:	2904      	cmp	r1, #4
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xca>
 800038c:	3304      	adds	r3, #4
 800038e:	0159      	lsls	r1, r3, #5
 8000390:	d542      	bpl.n	8000418 <__aeabi_fadd+0x154>
 8000392:	1c50      	adds	r0, r2, #1
 8000394:	2afe      	cmp	r2, #254	@ 0xfe
 8000396:	d03a      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000398:	019b      	lsls	r3, r3, #6
 800039a:	b2c0      	uxtb	r0, r0
 800039c:	0a5b      	lsrs	r3, r3, #9
 800039e:	05c0      	lsls	r0, r0, #23
 80003a0:	4318      	orrs	r0, r3
 80003a2:	07e4      	lsls	r4, r4, #31
 80003a4:	4320      	orrs	r0, r4
 80003a6:	bcc0      	pop	{r6, r7}
 80003a8:	46b9      	mov	r9, r7
 80003aa:	46b0      	mov	r8, r6
 80003ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003ae:	20fe      	movs	r0, #254	@ 0xfe
 80003b0:	4680      	mov	r8, r0
 80003b2:	1c6f      	adds	r7, r5, #1
 80003b4:	0038      	movs	r0, r7
 80003b6:	4647      	mov	r7, r8
 80003b8:	4207      	tst	r7, r0
 80003ba:	d000      	beq.n	80003be <__aeabi_fadd+0xfa>
 80003bc:	e08e      	b.n	80004dc <__aeabi_fadd+0x218>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0x100>
 80003c2:	e0b4      	b.n	800052e <__aeabi_fadd+0x26a>
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0x106>
 80003c8:	e0db      	b.n	8000582 <__aeabi_fadd+0x2be>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d06c      	beq.n	80004a8 <__aeabi_fadd+0x1e4>
 80003ce:	1b98      	subs	r0, r3, r6
 80003d0:	0145      	lsls	r5, r0, #5
 80003d2:	d400      	bmi.n	80003d6 <__aeabi_fadd+0x112>
 80003d4:	e0f7      	b.n	80005c6 <__aeabi_fadd+0x302>
 80003d6:	000c      	movs	r4, r1
 80003d8:	1af3      	subs	r3, r6, r3
 80003da:	e03d      	b.n	8000458 <__aeabi_fadd+0x194>
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d01b      	beq.n	8000418 <__aeabi_fadd+0x154>
 80003e0:	1e51      	subs	r1, r2, #1
 80003e2:	2a01      	cmp	r2, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_fadd+0x124>
 80003e6:	e082      	b.n	80004ee <__aeabi_fadd+0x22a>
 80003e8:	2aff      	cmp	r2, #255	@ 0xff
 80003ea:	d03a      	beq.n	8000462 <__aeabi_fadd+0x19e>
 80003ec:	000a      	movs	r2, r1
 80003ee:	e7ab      	b.n	8000348 <__aeabi_fadd+0x84>
 80003f0:	0031      	movs	r1, r6
 80003f2:	2020      	movs	r0, #32
 80003f4:	40d1      	lsrs	r1, r2
 80003f6:	1a82      	subs	r2, r0, r2
 80003f8:	4096      	lsls	r6, r2
 80003fa:	0032      	movs	r2, r6
 80003fc:	1e50      	subs	r0, r2, #1
 80003fe:	4182      	sbcs	r2, r0
 8000400:	430a      	orrs	r2, r1
 8000402:	189b      	adds	r3, r3, r2
 8000404:	015a      	lsls	r2, r3, #5
 8000406:	d5b9      	bpl.n	800037c <__aeabi_fadd+0xb8>
 8000408:	1c6a      	adds	r2, r5, #1
 800040a:	2dfe      	cmp	r5, #254	@ 0xfe
 800040c:	d175      	bne.n	80004fa <__aeabi_fadd+0x236>
 800040e:	20ff      	movs	r0, #255	@ 0xff
 8000410:	2300      	movs	r3, #0
 8000412:	e7c4      	b.n	800039e <__aeabi_fadd+0xda>
 8000414:	000c      	movs	r4, r1
 8000416:	0033      	movs	r3, r6
 8000418:	08db      	lsrs	r3, r3, #3
 800041a:	2aff      	cmp	r2, #255	@ 0xff
 800041c:	d146      	bne.n	80004ac <__aeabi_fadd+0x1e8>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f5      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000422:	2280      	movs	r2, #128	@ 0x80
 8000424:	03d2      	lsls	r2, r2, #15
 8000426:	4313      	orrs	r3, r2
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	20ff      	movs	r0, #255	@ 0xff
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	e7b6      	b.n	800039e <__aeabi_fadd+0xda>
 8000430:	019f      	lsls	r7, r3, #6
 8000432:	09bf      	lsrs	r7, r7, #6
 8000434:	0038      	movs	r0, r7
 8000436:	f000 fe03 	bl	8001040 <__clzsi2>
 800043a:	3805      	subs	r0, #5
 800043c:	4087      	lsls	r7, r0
 800043e:	4285      	cmp	r5, r0
 8000440:	dc24      	bgt.n	800048c <__aeabi_fadd+0x1c8>
 8000442:	003b      	movs	r3, r7
 8000444:	2120      	movs	r1, #32
 8000446:	1b42      	subs	r2, r0, r5
 8000448:	3201      	adds	r2, #1
 800044a:	40d3      	lsrs	r3, r2
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	4097      	lsls	r7, r2
 8000450:	1e7a      	subs	r2, r7, #1
 8000452:	4197      	sbcs	r7, r2
 8000454:	2200      	movs	r2, #0
 8000456:	433b      	orrs	r3, r7
 8000458:	0759      	lsls	r1, r3, #29
 800045a:	d193      	bne.n	8000384 <__aeabi_fadd+0xc0>
 800045c:	e797      	b.n	800038e <__aeabi_fadd+0xca>
 800045e:	000c      	movs	r4, r1
 8000460:	0033      	movs	r3, r6
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	e7db      	b.n	800041e <__aeabi_fadd+0x15a>
 8000466:	2a00      	cmp	r2, #0
 8000468:	d014      	beq.n	8000494 <__aeabi_fadd+0x1d0>
 800046a:	1b42      	subs	r2, r0, r5
 800046c:	2d00      	cmp	r5, #0
 800046e:	d14b      	bne.n	8000508 <__aeabi_fadd+0x244>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0d0      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000474:	1e51      	subs	r1, r2, #1
 8000476:	2a01      	cmp	r2, #1
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x1b8>
 800047a:	e09e      	b.n	80005ba <__aeabi_fadd+0x2f6>
 800047c:	2aff      	cmp	r2, #255	@ 0xff
 800047e:	d0ef      	beq.n	8000460 <__aeabi_fadd+0x19c>
 8000480:	000a      	movs	r2, r1
 8000482:	2a1b      	cmp	r2, #27
 8000484:	dd5f      	ble.n	8000546 <__aeabi_fadd+0x282>
 8000486:	0002      	movs	r2, r0
 8000488:	1c73      	adds	r3, r6, #1
 800048a:	e77b      	b.n	8000384 <__aeabi_fadd+0xc0>
 800048c:	4b50      	ldr	r3, [pc, #320]	@ (80005d0 <__aeabi_fadd+0x30c>)
 800048e:	1a2a      	subs	r2, r5, r0
 8000490:	403b      	ands	r3, r7
 8000492:	e7e1      	b.n	8000458 <__aeabi_fadd+0x194>
 8000494:	21fe      	movs	r1, #254	@ 0xfe
 8000496:	1c6a      	adds	r2, r5, #1
 8000498:	4211      	tst	r1, r2
 800049a:	d13b      	bne.n	8000514 <__aeabi_fadd+0x250>
 800049c:	2d00      	cmp	r5, #0
 800049e:	d15d      	bne.n	800055c <__aeabi_fadd+0x298>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d07f      	beq.n	80005a4 <__aeabi_fadd+0x2e0>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d17f      	bne.n	80005a8 <__aeabi_fadd+0x2e4>
 80004a8:	2200      	movs	r2, #0
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	025b      	lsls	r3, r3, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	b2d0      	uxtb	r0, r2
 80004b2:	e774      	b.n	800039e <__aeabi_fadd+0xda>
 80004b4:	28ff      	cmp	r0, #255	@ 0xff
 80004b6:	d0d2      	beq.n	800045e <__aeabi_fadd+0x19a>
 80004b8:	2480      	movs	r4, #128	@ 0x80
 80004ba:	04e4      	lsls	r4, r4, #19
 80004bc:	4323      	orrs	r3, r4
 80004be:	2401      	movs	r4, #1
 80004c0:	2a1b      	cmp	r2, #27
 80004c2:	dc07      	bgt.n	80004d4 <__aeabi_fadd+0x210>
 80004c4:	001c      	movs	r4, r3
 80004c6:	2520      	movs	r5, #32
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	1aaa      	subs	r2, r5, r2
 80004cc:	4093      	lsls	r3, r2
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	4193      	sbcs	r3, r2
 80004d2:	431c      	orrs	r4, r3
 80004d4:	1b33      	subs	r3, r6, r4
 80004d6:	0005      	movs	r5, r0
 80004d8:	000c      	movs	r4, r1
 80004da:	e74d      	b.n	8000378 <__aeabi_fadd+0xb4>
 80004dc:	1b9f      	subs	r7, r3, r6
 80004de:	017a      	lsls	r2, r7, #5
 80004e0:	d422      	bmi.n	8000528 <__aeabi_fadd+0x264>
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d1a6      	bne.n	8000434 <__aeabi_fadd+0x170>
 80004e6:	2400      	movs	r4, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	e757      	b.n	800039e <__aeabi_fadd+0xda>
 80004ee:	199b      	adds	r3, r3, r6
 80004f0:	2501      	movs	r5, #1
 80004f2:	3201      	adds	r2, #1
 80004f4:	0159      	lsls	r1, r3, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80004f8:	e740      	b.n	800037c <__aeabi_fadd+0xb8>
 80004fa:	2101      	movs	r1, #1
 80004fc:	4835      	ldr	r0, [pc, #212]	@ (80005d4 <__aeabi_fadd+0x310>)
 80004fe:	4019      	ands	r1, r3
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	4003      	ands	r3, r0
 8000504:	430b      	orrs	r3, r1
 8000506:	e7a7      	b.n	8000458 <__aeabi_fadd+0x194>
 8000508:	28ff      	cmp	r0, #255	@ 0xff
 800050a:	d0a9      	beq.n	8000460 <__aeabi_fadd+0x19c>
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	04c9      	lsls	r1, r1, #19
 8000510:	430b      	orrs	r3, r1
 8000512:	e7b6      	b.n	8000482 <__aeabi_fadd+0x1be>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x256>
 8000518:	e779      	b.n	800040e <__aeabi_fadd+0x14a>
 800051a:	199b      	adds	r3, r3, r6
 800051c:	085b      	lsrs	r3, r3, #1
 800051e:	0759      	lsls	r1, r3, #29
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x260>
 8000522:	e72f      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	e7c1      	b.n	80004ac <__aeabi_fadd+0x1e8>
 8000528:	000c      	movs	r4, r1
 800052a:	1af7      	subs	r7, r6, r3
 800052c:	e782      	b.n	8000434 <__aeabi_fadd+0x170>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d12c      	bne.n	800058c <__aeabi_fadd+0x2c8>
 8000532:	2e00      	cmp	r6, #0
 8000534:	d193      	bne.n	800045e <__aeabi_fadd+0x19a>
 8000536:	2380      	movs	r3, #128	@ 0x80
 8000538:	2400      	movs	r4, #0
 800053a:	20ff      	movs	r0, #255	@ 0xff
 800053c:	03db      	lsls	r3, r3, #15
 800053e:	e72e      	b.n	800039e <__aeabi_fadd+0xda>
 8000540:	2501      	movs	r5, #1
 8000542:	1b9b      	subs	r3, r3, r6
 8000544:	e718      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000546:	0019      	movs	r1, r3
 8000548:	2520      	movs	r5, #32
 800054a:	40d1      	lsrs	r1, r2
 800054c:	1aaa      	subs	r2, r5, r2
 800054e:	4093      	lsls	r3, r2
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4193      	sbcs	r3, r2
 8000554:	430b      	orrs	r3, r1
 8000556:	0005      	movs	r5, r0
 8000558:	199b      	adds	r3, r3, r6
 800055a:	e753      	b.n	8000404 <__aeabi_fadd+0x140>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x29e>
 8000560:	e77e      	b.n	8000460 <__aeabi_fadd+0x19c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x2a4>
 8000566:	e77c      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	4591      	cmp	r9, r2
 800056e:	d302      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 8000570:	4594      	cmp	ip, r2
 8000572:	d200      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 8000574:	0033      	movs	r3, r6
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	e753      	b.n	8000422 <__aeabi_fadd+0x15e>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	3501      	adds	r5, #1
 8000580:	e6fa      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d0af      	beq.n	80004e6 <__aeabi_fadd+0x222>
 8000586:	000c      	movs	r4, r1
 8000588:	0033      	movs	r3, r6
 800058a:	e78d      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x2ce>
 8000590:	e767      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	03d2      	lsls	r2, r2, #15
 8000596:	4591      	cmp	r9, r2
 8000598:	d3ed      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 800059a:	4594      	cmp	ip, r2
 800059c:	d2eb      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 800059e:	000c      	movs	r4, r1
 80005a0:	0033      	movs	r3, r6
 80005a2:	e7e8      	b.n	8000576 <__aeabi_fadd+0x2b2>
 80005a4:	0033      	movs	r3, r6
 80005a6:	e77f      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 80005a8:	199b      	adds	r3, r3, r6
 80005aa:	2200      	movs	r2, #0
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d5b9      	bpl.n	8000524 <__aeabi_fadd+0x260>
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <__aeabi_fadd+0x30c>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	2201      	movs	r2, #1
 80005b8:	e778      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ba:	199b      	adds	r3, r3, r6
 80005bc:	3201      	adds	r2, #1
 80005be:	3501      	adds	r5, #1
 80005c0:	0159      	lsls	r1, r3, #5
 80005c2:	d49a      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80005c4:	e6da      	b.n	800037c <__aeabi_fadd+0xb8>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d08d      	beq.n	80004e6 <__aeabi_fadd+0x222>
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	e76e      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	fbffffff 	.word	0xfbffffff
 80005d4:	7dffffff 	.word	0x7dffffff

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0244      	lsls	r4, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0e      	adds	r6, r1, #0
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc5      	lsrs	r5, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03c      	beq.n	800066c <__aeabi_fdiv+0x94>
 80005f2:	2fff      	cmp	r7, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fdiv+0xa4>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	4699      	mov	r9, r3
 80005fc:	469a      	mov	sl, r3
 80005fe:	00e4      	lsls	r4, r4, #3
 8000600:	04d2      	lsls	r2, r2, #19
 8000602:	4314      	orrs	r4, r2
 8000604:	3f7f      	subs	r7, #127	@ 0x7f
 8000606:	0273      	lsls	r3, r6, #9
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0073      	lsls	r3, r6, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0ff6      	lsrs	r6, r6, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01b      	beq.n	800064e <__aeabi_fdiv+0x76>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d013      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 800061a:	4642      	mov	r2, r8
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	04c9      	lsls	r1, r1, #19
 8000622:	4311      	orrs	r1, r2
 8000624:	4688      	mov	r8, r1
 8000626:	2000      	movs	r0, #0
 8000628:	3b7f      	subs	r3, #127	@ 0x7f
 800062a:	0029      	movs	r1, r5
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4071      	eors	r1, r6
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e0b5      	b.n	80007a6 <__aeabi_fdiv+0x1ce>
 800063a:	4a74      	ldr	r2, [pc, #464]	@ (800080c <__aeabi_fdiv+0x234>)
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	58d3      	ldr	r3, [r2, r3]
 8000640:	469f      	mov	pc, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <__aeabi_fdiv+0xf0>
 8000648:	3fff      	subs	r7, #255	@ 0xff
 800064a:	3302      	adds	r3, #2
 800064c:	e003      	b.n	8000656 <__aeabi_fdiv+0x7e>
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12d      	bne.n	80006b0 <__aeabi_fdiv+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	0029      	movs	r1, r5
 8000658:	464a      	mov	r2, r9
 800065a:	4071      	eors	r1, r6
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	2a0e      	cmp	r2, #14
 8000662:	d838      	bhi.n	80006d6 <__aeabi_fdiv+0xfe>
 8000664:	486a      	ldr	r0, [pc, #424]	@ (8000810 <__aeabi_fdiv+0x238>)
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	5882      	ldr	r2, [r0, r2]
 800066a:	4697      	mov	pc, r2
 800066c:	2c00      	cmp	r4, #0
 800066e:	d113      	bne.n	8000698 <__aeabi_fdiv+0xc0>
 8000670:	2304      	movs	r3, #4
 8000672:	4699      	mov	r9, r3
 8000674:	3b03      	subs	r3, #3
 8000676:	2700      	movs	r7, #0
 8000678:	469a      	mov	sl, r3
 800067a:	e7c4      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800067c:	2c00      	cmp	r4, #0
 800067e:	d105      	bne.n	800068c <__aeabi_fdiv+0xb4>
 8000680:	2308      	movs	r3, #8
 8000682:	4699      	mov	r9, r3
 8000684:	3b06      	subs	r3, #6
 8000686:	27ff      	movs	r7, #255	@ 0xff
 8000688:	469a      	mov	sl, r3
 800068a:	e7bc      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800068c:	230c      	movs	r3, #12
 800068e:	4699      	mov	r9, r3
 8000690:	3b09      	subs	r3, #9
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	469a      	mov	sl, r3
 8000696:	e7b6      	b.n	8000606 <__aeabi_fdiv+0x2e>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 fcd1 	bl	8001040 <__clzsi2>
 800069e:	2776      	movs	r7, #118	@ 0x76
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409c      	lsls	r4, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	427f      	negs	r7, r7
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	1a3f      	subs	r7, r7, r0
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x2e>
 80006b0:	4640      	mov	r0, r8
 80006b2:	f000 fcc5 	bl	8001040 <__clzsi2>
 80006b6:	4642      	mov	r2, r8
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409a      	lsls	r2, r3
 80006bc:	2376      	movs	r3, #118	@ 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7b0      	b.n	800062a <__aeabi_fdiv+0x52>
 80006c8:	2303      	movs	r3, #3
 80006ca:	464a      	mov	r2, r9
 80006cc:	431a      	orrs	r2, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	2003      	movs	r0, #3
 80006d2:	33fc      	adds	r3, #252	@ 0xfc
 80006d4:	e7a9      	b.n	800062a <__aeabi_fdiv+0x52>
 80006d6:	000d      	movs	r5, r1
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	07ed      	lsls	r5, r5, #31
 80006e0:	4310      	orrs	r0, r2
 80006e2:	4328      	orrs	r0, r5
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	000d      	movs	r5, r1
 80006f0:	2000      	movs	r0, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7f2      	b.n	80006dc <__aeabi_fdiv+0x104>
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d0ed      	beq.n	80006d8 <__aeabi_fdiv+0x100>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d033      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000700:	46a0      	mov	r8, r4
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <__aeabi_fdiv+0x13a>
 8000706:	2000      	movs	r0, #0
 8000708:	2200      	movs	r2, #0
 800070a:	e7e7      	b.n	80006dc <__aeabi_fdiv+0x104>
 800070c:	0035      	movs	r5, r6
 800070e:	2803      	cmp	r0, #3
 8000710:	d07a      	beq.n	8000808 <__aeabi_fdiv+0x230>
 8000712:	003b      	movs	r3, r7
 8000714:	337f      	adds	r3, #127	@ 0x7f
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd2d      	ble.n	8000776 <__aeabi_fdiv+0x19e>
 800071a:	4642      	mov	r2, r8
 800071c:	0752      	lsls	r2, r2, #29
 800071e:	d007      	beq.n	8000730 <__aeabi_fdiv+0x158>
 8000720:	220f      	movs	r2, #15
 8000722:	4641      	mov	r1, r8
 8000724:	400a      	ands	r2, r1
 8000726:	2a04      	cmp	r2, #4
 8000728:	d002      	beq.n	8000730 <__aeabi_fdiv+0x158>
 800072a:	2204      	movs	r2, #4
 800072c:	4694      	mov	ip, r2
 800072e:	44e0      	add	r8, ip
 8000730:	4642      	mov	r2, r8
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	d505      	bpl.n	8000742 <__aeabi_fdiv+0x16a>
 8000736:	4642      	mov	r2, r8
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <__aeabi_fdiv+0x23c>)
 800073a:	401a      	ands	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4690      	mov	r8, r2
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	2bfe      	cmp	r3, #254	@ 0xfe
 8000744:	dcc8      	bgt.n	80006d8 <__aeabi_fdiv+0x100>
 8000746:	4642      	mov	r2, r8
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e7c5      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	2500      	movs	r5, #0
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	03d2      	lsls	r2, r2, #15
 8000758:	e7c0      	b.n	80006dc <__aeabi_fdiv+0x104>
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	4214      	tst	r4, r2
 8000760:	d002      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000762:	4643      	mov	r3, r8
 8000764:	4213      	tst	r3, r2
 8000766:	d049      	beq.n	80007fc <__aeabi_fdiv+0x224>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	4322      	orrs	r2, r4
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	20ff      	movs	r0, #255	@ 0xff
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e7b2      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000776:	2201      	movs	r2, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dcc3      	bgt.n	8000706 <__aeabi_fdiv+0x12e>
 800077e:	4642      	mov	r2, r8
 8000780:	40da      	lsrs	r2, r3
 8000782:	4643      	mov	r3, r8
 8000784:	379e      	adds	r7, #158	@ 0x9e
 8000786:	40bb      	lsls	r3, r7
 8000788:	1e59      	subs	r1, r3, #1
 800078a:	418b      	sbcs	r3, r1
 800078c:	431a      	orrs	r2, r3
 800078e:	0753      	lsls	r3, r2, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 8000792:	230f      	movs	r3, #15
 8000794:	4013      	ands	r3, r2
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 800079a:	3204      	adds	r2, #4
 800079c:	0153      	lsls	r3, r2, #5
 800079e:	d529      	bpl.n	80007f4 <__aeabi_fdiv+0x21c>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2200      	movs	r2, #0
 80007a4:	e79a      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007a6:	4642      	mov	r2, r8
 80007a8:	0163      	lsls	r3, r4, #5
 80007aa:	0155      	lsls	r5, r2, #5
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d215      	bcs.n	80007dc <__aeabi_fdiv+0x204>
 80007b0:	201b      	movs	r0, #27
 80007b2:	2200      	movs	r2, #0
 80007b4:	3f01      	subs	r7, #1
 80007b6:	2601      	movs	r6, #1
 80007b8:	001c      	movs	r4, r3
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2c00      	cmp	r4, #0
 80007c0:	db01      	blt.n	80007c6 <__aeabi_fdiv+0x1ee>
 80007c2:	429d      	cmp	r5, r3
 80007c4:	d801      	bhi.n	80007ca <__aeabi_fdiv+0x1f2>
 80007c6:	1b5b      	subs	r3, r3, r5
 80007c8:	4332      	orrs	r2, r6
 80007ca:	3801      	subs	r0, #1
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f3      	bne.n	80007b8 <__aeabi_fdiv+0x1e0>
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4183      	sbcs	r3, r0
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e79a      	b.n	8000712 <__aeabi_fdiv+0x13a>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e8      	b.n	80007b6 <__aeabi_fdiv+0x1de>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	425a      	negs	r2, r3
 80007e8:	4153      	adcs	r3, r2
 80007ea:	425b      	negs	r3, r3
 80007ec:	0035      	movs	r5, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	b2d8      	uxtb	r0, r3
 80007f2:	e773      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e76f      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	0035      	movs	r5, r6
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	e769      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000808:	4644      	mov	r4, r8
 800080a:	e7ad      	b.n	8000768 <__aeabi_fdiv+0x190>
 800080c:	08004038 	.word	0x08004038
 8000810:	08004078 	.word	0x08004078
 8000814:	f7ffffff 	.word	0xf7ffffff

08000818 <__eqsf2>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	0042      	lsls	r2, r0, #1
 800081c:	024e      	lsls	r6, r1, #9
 800081e:	004c      	lsls	r4, r1, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e12      	lsrs	r2, r2, #24
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	0e24      	lsrs	r4, r4, #24
 800082c:	0fc9      	lsrs	r1, r1, #31
 800082e:	2aff      	cmp	r2, #255	@ 0xff
 8000830:	d010      	beq.n	8000854 <__eqsf2+0x3c>
 8000832:	2cff      	cmp	r4, #255	@ 0xff
 8000834:	d00c      	beq.n	8000850 <__eqsf2+0x38>
 8000836:	2001      	movs	r0, #1
 8000838:	42a2      	cmp	r2, r4
 800083a:	d10a      	bne.n	8000852 <__eqsf2+0x3a>
 800083c:	42b5      	cmp	r5, r6
 800083e:	d108      	bne.n	8000852 <__eqsf2+0x3a>
 8000840:	428b      	cmp	r3, r1
 8000842:	d00f      	beq.n	8000864 <__eqsf2+0x4c>
 8000844:	2a00      	cmp	r2, #0
 8000846:	d104      	bne.n	8000852 <__eqsf2+0x3a>
 8000848:	0028      	movs	r0, r5
 800084a:	1e43      	subs	r3, r0, #1
 800084c:	4198      	sbcs	r0, r3
 800084e:	e000      	b.n	8000852 <__eqsf2+0x3a>
 8000850:	2001      	movs	r0, #1
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2001      	movs	r0, #1
 8000856:	2cff      	cmp	r4, #255	@ 0xff
 8000858:	d1fb      	bne.n	8000852 <__eqsf2+0x3a>
 800085a:	4335      	orrs	r5, r6
 800085c:	d1f9      	bne.n	8000852 <__eqsf2+0x3a>
 800085e:	404b      	eors	r3, r1
 8000860:	0018      	movs	r0, r3
 8000862:	e7f6      	b.n	8000852 <__eqsf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	e7f4      	b.n	8000852 <__eqsf2+0x3a>

08000868 <__gesf2>:
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	0042      	lsls	r2, r0, #1
 800086c:	0244      	lsls	r4, r0, #9
 800086e:	024d      	lsls	r5, r1, #9
 8000870:	0fc3      	lsrs	r3, r0, #31
 8000872:	0048      	lsls	r0, r1, #1
 8000874:	0a64      	lsrs	r4, r4, #9
 8000876:	0e12      	lsrs	r2, r2, #24
 8000878:	0a6d      	lsrs	r5, r5, #9
 800087a:	0e00      	lsrs	r0, r0, #24
 800087c:	0fc9      	lsrs	r1, r1, #31
 800087e:	2aff      	cmp	r2, #255	@ 0xff
 8000880:	d019      	beq.n	80008b6 <__gesf2+0x4e>
 8000882:	28ff      	cmp	r0, #255	@ 0xff
 8000884:	d00b      	beq.n	800089e <__gesf2+0x36>
 8000886:	2a00      	cmp	r2, #0
 8000888:	d11e      	bne.n	80008c8 <__gesf2+0x60>
 800088a:	2800      	cmp	r0, #0
 800088c:	d10b      	bne.n	80008a6 <__gesf2+0x3e>
 800088e:	2d00      	cmp	r5, #0
 8000890:	d027      	beq.n	80008e2 <__gesf2+0x7a>
 8000892:	2c00      	cmp	r4, #0
 8000894:	d134      	bne.n	8000900 <__gesf2+0x98>
 8000896:	2900      	cmp	r1, #0
 8000898:	d02f      	beq.n	80008fa <__gesf2+0x92>
 800089a:	0008      	movs	r0, r1
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d128      	bne.n	80008f4 <__gesf2+0x8c>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d101      	bne.n	80008aa <__gesf2+0x42>
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d0f5      	beq.n	8000896 <__gesf2+0x2e>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d107      	bne.n	80008be <__gesf2+0x56>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d023      	beq.n	80008fa <__gesf2+0x92>
 80008b2:	0018      	movs	r0, r3
 80008b4:	e7f2      	b.n	800089c <__gesf2+0x34>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d11c      	bne.n	80008f4 <__gesf2+0x8c>
 80008ba:	28ff      	cmp	r0, #255	@ 0xff
 80008bc:	d014      	beq.n	80008e8 <__gesf2+0x80>
 80008be:	1e58      	subs	r0, r3, #1
 80008c0:	2302      	movs	r3, #2
 80008c2:	4018      	ands	r0, r3
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7e9      	b.n	800089c <__gesf2+0x34>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d0f8      	beq.n	80008be <__gesf2+0x56>
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d1f6      	bne.n	80008be <__gesf2+0x56>
 80008d0:	4282      	cmp	r2, r0
 80008d2:	dcf4      	bgt.n	80008be <__gesf2+0x56>
 80008d4:	dbeb      	blt.n	80008ae <__gesf2+0x46>
 80008d6:	42ac      	cmp	r4, r5
 80008d8:	d8f1      	bhi.n	80008be <__gesf2+0x56>
 80008da:	2000      	movs	r0, #0
 80008dc:	42ac      	cmp	r4, r5
 80008de:	d2dd      	bcs.n	800089c <__gesf2+0x34>
 80008e0:	e7e5      	b.n	80008ae <__gesf2+0x46>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d0da      	beq.n	800089c <__gesf2+0x34>
 80008e6:	e7ea      	b.n	80008be <__gesf2+0x56>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d103      	bne.n	80008f4 <__gesf2+0x8c>
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d1e6      	bne.n	80008be <__gesf2+0x56>
 80008f0:	2000      	movs	r0, #0
 80008f2:	e7d3      	b.n	800089c <__gesf2+0x34>
 80008f4:	2002      	movs	r0, #2
 80008f6:	4240      	negs	r0, r0
 80008f8:	e7d0      	b.n	800089c <__gesf2+0x34>
 80008fa:	2001      	movs	r0, #1
 80008fc:	4240      	negs	r0, r0
 80008fe:	e7cd      	b.n	800089c <__gesf2+0x34>
 8000900:	428b      	cmp	r3, r1
 8000902:	d0e8      	beq.n	80008d6 <__gesf2+0x6e>
 8000904:	e7db      	b.n	80008be <__gesf2+0x56>
 8000906:	46c0      	nop			@ (mov r8, r8)

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	@ 0xff
 8000920:	d01a      	beq.n	8000958 <__lesf2+0x50>
 8000922:	28ff      	cmp	r0, #255	@ 0xff
 8000924:	d00e      	beq.n	8000944 <__lesf2+0x3c>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d11e      	bne.n	8000968 <__lesf2+0x60>
 800092a:	2800      	cmp	r0, #0
 800092c:	d10e      	bne.n	800094c <__lesf2+0x44>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d02a      	beq.n	8000988 <__lesf2+0x80>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d00c      	beq.n	8000950 <__lesf2+0x48>
 8000936:	428b      	cmp	r3, r1
 8000938:	d01d      	beq.n	8000976 <__lesf2+0x6e>
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	2302      	movs	r3, #2
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	e010      	b.n	8000966 <__lesf2+0x5e>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d10d      	bne.n	8000964 <__lesf2+0x5c>
 8000948:	2a00      	cmp	r2, #0
 800094a:	d120      	bne.n	800098e <__lesf2+0x86>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d11e      	bne.n	800098e <__lesf2+0x86>
 8000950:	2900      	cmp	r1, #0
 8000952:	d023      	beq.n	800099c <__lesf2+0x94>
 8000954:	0008      	movs	r0, r1
 8000956:	e006      	b.n	8000966 <__lesf2+0x5e>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d103      	bne.n	8000964 <__lesf2+0x5c>
 800095c:	28ff      	cmp	r0, #255	@ 0xff
 800095e:	d1ec      	bne.n	800093a <__lesf2+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d017      	beq.n	8000994 <__lesf2+0x8c>
 8000964:	2002      	movs	r0, #2
 8000966:	bd30      	pop	{r4, r5, pc}
 8000968:	2800      	cmp	r0, #0
 800096a:	d0e6      	beq.n	800093a <__lesf2+0x32>
 800096c:	428b      	cmp	r3, r1
 800096e:	d1e4      	bne.n	800093a <__lesf2+0x32>
 8000970:	4282      	cmp	r2, r0
 8000972:	dce2      	bgt.n	800093a <__lesf2+0x32>
 8000974:	db04      	blt.n	8000980 <__lesf2+0x78>
 8000976:	42ac      	cmp	r4, r5
 8000978:	d8df      	bhi.n	800093a <__lesf2+0x32>
 800097a:	2000      	movs	r0, #0
 800097c:	42ac      	cmp	r4, r5
 800097e:	d2f2      	bcs.n	8000966 <__lesf2+0x5e>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00b      	beq.n	800099c <__lesf2+0x94>
 8000984:	0018      	movs	r0, r3
 8000986:	e7ee      	b.n	8000966 <__lesf2+0x5e>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d0ec      	beq.n	8000966 <__lesf2+0x5e>
 800098c:	e7d5      	b.n	800093a <__lesf2+0x32>
 800098e:	428b      	cmp	r3, r1
 8000990:	d1d3      	bne.n	800093a <__lesf2+0x32>
 8000992:	e7f5      	b.n	8000980 <__lesf2+0x78>
 8000994:	2000      	movs	r0, #0
 8000996:	428b      	cmp	r3, r1
 8000998:	d0e5      	beq.n	8000966 <__lesf2+0x5e>
 800099a:	e7ce      	b.n	800093a <__lesf2+0x32>
 800099c:	2001      	movs	r0, #1
 800099e:	4240      	negs	r0, r0
 80009a0:	e7e1      	b.n	8000966 <__lesf2+0x5e>
 80009a2:	46c0      	nop			@ (mov r8, r8)

080009a4 <__aeabi_fmul>:
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	464f      	mov	r7, r9
 80009a8:	4646      	mov	r6, r8
 80009aa:	46d6      	mov	lr, sl
 80009ac:	0243      	lsls	r3, r0, #9
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	0045      	lsls	r5, r0, #1
 80009b2:	b5c0      	push	{r6, r7, lr}
 80009b4:	4699      	mov	r9, r3
 80009b6:	1c0f      	adds	r7, r1, #0
 80009b8:	0e2d      	lsrs	r5, r5, #24
 80009ba:	0fc6      	lsrs	r6, r0, #31
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fmul+0x1e>
 80009c0:	e088      	b.n	8000ad4 <__aeabi_fmul+0x130>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x24>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fmul+0x140>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	04d2      	lsls	r2, r2, #19
 80009ce:	431a      	orrs	r2, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	4691      	mov	r9, r2
 80009d4:	4698      	mov	r8, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	3d7f      	subs	r5, #127	@ 0x7f
 80009da:	027c      	lsls	r4, r7, #9
 80009dc:	007b      	lsls	r3, r7, #1
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	0e1b      	lsrs	r3, r3, #24
 80009e2:	0fff      	lsrs	r7, r7, #31
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d068      	beq.n	8000aba <__aeabi_fmul+0x116>
 80009e8:	2bff      	cmp	r3, #255	@ 0xff
 80009ea:	d021      	beq.n	8000a30 <__aeabi_fmul+0x8c>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	00e4      	lsls	r4, r4, #3
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4314      	orrs	r4, r2
 80009f4:	4642      	mov	r2, r8
 80009f6:	3b7f      	subs	r3, #127	@ 0x7f
 80009f8:	195b      	adds	r3, r3, r5
 80009fa:	2100      	movs	r1, #0
 80009fc:	1c5d      	adds	r5, r3, #1
 80009fe:	2a0a      	cmp	r2, #10
 8000a00:	dc2e      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000a02:	407e      	eors	r6, r7
 8000a04:	4642      	mov	r2, r8
 8000a06:	2a02      	cmp	r2, #2
 8000a08:	dc23      	bgt.n	8000a52 <__aeabi_fmul+0xae>
 8000a0a:	3a01      	subs	r2, #1
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d900      	bls.n	8000a12 <__aeabi_fmul+0x6e>
 8000a10:	e0bd      	b.n	8000b8e <__aeabi_fmul+0x1ea>
 8000a12:	2902      	cmp	r1, #2
 8000a14:	d06e      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a16:	2901      	cmp	r1, #1
 8000a18:	d12c      	bne.n	8000a74 <__aeabi_fmul+0xd0>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	05c0      	lsls	r0, r0, #23
 8000a20:	07f6      	lsls	r6, r6, #31
 8000a22:	4310      	orrs	r0, r2
 8000a24:	4330      	orrs	r0, r6
 8000a26:	bce0      	pop	{r5, r6, r7}
 8000a28:	46ba      	mov	sl, r7
 8000a2a:	46b1      	mov	r9, r6
 8000a2c:	46a8      	mov	r8, r5
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	002b      	movs	r3, r5
 8000a32:	33ff      	adds	r3, #255	@ 0xff
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d065      	beq.n	8000b04 <__aeabi_fmul+0x160>
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	0032      	movs	r2, r6
 8000a40:	3501      	adds	r5, #1
 8000a42:	4688      	mov	r8, r1
 8000a44:	407a      	eors	r2, r7
 8000a46:	35ff      	adds	r5, #255	@ 0xff
 8000a48:	290a      	cmp	r1, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_fmul+0xaa>
 8000a4c:	e0d8      	b.n	8000c00 <__aeabi_fmul+0x25c>
 8000a4e:	0016      	movs	r6, r2
 8000a50:	2103      	movs	r1, #3
 8000a52:	4640      	mov	r0, r8
 8000a54:	2201      	movs	r2, #1
 8000a56:	4082      	lsls	r2, r0
 8000a58:	20a6      	movs	r0, #166	@ 0xa6
 8000a5a:	00c0      	lsls	r0, r0, #3
 8000a5c:	4202      	tst	r2, r0
 8000a5e:	d020      	beq.n	8000aa2 <__aeabi_fmul+0xfe>
 8000a60:	4653      	mov	r3, sl
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d046      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0xc8>
 8000a6a:	e0bb      	b.n	8000be4 <__aeabi_fmul+0x240>
 8000a6c:	4651      	mov	r1, sl
 8000a6e:	464c      	mov	r4, r9
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d0d2      	beq.n	8000a1a <__aeabi_fmul+0x76>
 8000a74:	002b      	movs	r3, r5
 8000a76:	337f      	adds	r3, #127	@ 0x7f
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dd70      	ble.n	8000b5e <__aeabi_fmul+0x1ba>
 8000a7c:	0762      	lsls	r2, r4, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a80:	220f      	movs	r2, #15
 8000a82:	4022      	ands	r2, r4
 8000a84:	2a04      	cmp	r2, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a88:	3404      	adds	r4, #4
 8000a8a:	0122      	lsls	r2, r4, #4
 8000a8c:	d503      	bpl.n	8000a96 <__aeabi_fmul+0xf2>
 8000a8e:	4b63      	ldr	r3, [pc, #396]	@ (8000c1c <__aeabi_fmul+0x278>)
 8000a90:	401c      	ands	r4, r3
 8000a92:	002b      	movs	r3, r5
 8000a94:	3380      	adds	r3, #128	@ 0x80
 8000a96:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a98:	dc2c      	bgt.n	8000af4 <__aeabi_fmul+0x150>
 8000a9a:	01a2      	lsls	r2, r4, #6
 8000a9c:	0a52      	lsrs	r2, r2, #9
 8000a9e:	b2d8      	uxtb	r0, r3
 8000aa0:	e7bd      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000aa2:	2090      	movs	r0, #144	@ 0x90
 8000aa4:	0080      	lsls	r0, r0, #2
 8000aa6:	4202      	tst	r2, r0
 8000aa8:	d127      	bne.n	8000afa <__aeabi_fmul+0x156>
 8000aaa:	38b9      	subs	r0, #185	@ 0xb9
 8000aac:	38ff      	subs	r0, #255	@ 0xff
 8000aae:	4210      	tst	r0, r2
 8000ab0:	d06d      	beq.n	8000b8e <__aeabi_fmul+0x1ea>
 8000ab2:	003e      	movs	r6, r7
 8000ab4:	46a1      	mov	r9, r4
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	e7d2      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d141      	bne.n	8000b42 <__aeabi_fmul+0x19e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	002b      	movs	r3, r5
 8000ac8:	4642      	mov	r2, r8
 8000aca:	2101      	movs	r1, #1
 8000acc:	1c5d      	adds	r5, r3, #1
 8000ace:	2a0a      	cmp	r2, #10
 8000ad0:	dd97      	ble.n	8000a02 <__aeabi_fmul+0x5e>
 8000ad2:	e7c5      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d126      	bne.n	8000b26 <__aeabi_fmul+0x182>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	4698      	mov	r8, r3
 8000adc:	3b03      	subs	r3, #3
 8000ade:	2500      	movs	r5, #0
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e77a      	b.n	80009da <__aeabi_fmul+0x36>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d118      	bne.n	8000b1a <__aeabi_fmul+0x176>
 8000ae8:	2308      	movs	r3, #8
 8000aea:	4698      	mov	r8, r3
 8000aec:	3b06      	subs	r3, #6
 8000aee:	25ff      	movs	r5, #255	@ 0xff
 8000af0:	469a      	mov	sl, r3
 8000af2:	e772      	b.n	80009da <__aeabi_fmul+0x36>
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	2200      	movs	r2, #0
 8000af8:	e791      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	2600      	movs	r6, #0
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	03d2      	lsls	r2, r2, #15
 8000b02:	e78c      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b04:	4641      	mov	r1, r8
 8000b06:	2202      	movs	r2, #2
 8000b08:	3501      	adds	r5, #1
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	35ff      	adds	r5, #255	@ 0xff
 8000b10:	290a      	cmp	r1, #10
 8000b12:	dca5      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000b14:	2102      	movs	r1, #2
 8000b16:	407e      	eors	r6, r7
 8000b18:	e774      	b.n	8000a04 <__aeabi_fmul+0x60>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	3b09      	subs	r3, #9
 8000b20:	25ff      	movs	r5, #255	@ 0xff
 8000b22:	469a      	mov	sl, r3
 8000b24:	e759      	b.n	80009da <__aeabi_fmul+0x36>
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fa8a 	bl	8001040 <__clzsi2>
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	1f43      	subs	r3, r0, #5
 8000b30:	2576      	movs	r5, #118	@ 0x76
 8000b32:	409a      	lsls	r2, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	426d      	negs	r5, r5
 8000b38:	4691      	mov	r9, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	e74b      	b.n	80009da <__aeabi_fmul+0x36>
 8000b42:	0020      	movs	r0, r4
 8000b44:	f000 fa7c 	bl	8001040 <__clzsi2>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	1f43      	subs	r3, r0, #5
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	1a2b      	subs	r3, r5, r0
 8000b50:	3b76      	subs	r3, #118	@ 0x76
 8000b52:	2100      	movs	r1, #0
 8000b54:	1c5d      	adds	r5, r3, #1
 8000b56:	2a0a      	cmp	r2, #10
 8000b58:	dc00      	bgt.n	8000b5c <__aeabi_fmul+0x1b8>
 8000b5a:	e752      	b.n	8000a02 <__aeabi_fmul+0x5e>
 8000b5c:	e780      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b1b      	cmp	r3, #27
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_fmul+0x1c4>
 8000b66:	e758      	b.n	8000a1a <__aeabi_fmul+0x76>
 8000b68:	359e      	adds	r5, #158	@ 0x9e
 8000b6a:	0022      	movs	r2, r4
 8000b6c:	40ac      	lsls	r4, r5
 8000b6e:	40da      	lsrs	r2, r3
 8000b70:	1e63      	subs	r3, r4, #1
 8000b72:	419c      	sbcs	r4, r3
 8000b74:	4322      	orrs	r2, r4
 8000b76:	0753      	lsls	r3, r2, #29
 8000b78:	d004      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d000      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b82:	3204      	adds	r2, #4
 8000b84:	0153      	lsls	r3, r2, #5
 8000b86:	d537      	bpl.n	8000bf8 <__aeabi_fmul+0x254>
 8000b88:	2001      	movs	r0, #1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e747      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	464a      	mov	r2, r9
 8000b92:	0424      	lsls	r4, r4, #16
 8000b94:	0c24      	lsrs	r4, r4, #16
 8000b96:	0027      	movs	r7, r4
 8000b98:	0c10      	lsrs	r0, r2, #16
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	0c12      	lsrs	r2, r2, #16
 8000b9e:	4344      	muls	r4, r0
 8000ba0:	4357      	muls	r7, r2
 8000ba2:	4348      	muls	r0, r1
 8000ba4:	4351      	muls	r1, r2
 8000ba6:	0c3a      	lsrs	r2, r7, #16
 8000ba8:	1909      	adds	r1, r1, r4
 8000baa:	1852      	adds	r2, r2, r1
 8000bac:	4294      	cmp	r4, r2
 8000bae:	d903      	bls.n	8000bb8 <__aeabi_fmul+0x214>
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0249      	lsls	r1, r1, #9
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	4460      	add	r0, ip
 8000bb8:	043f      	lsls	r7, r7, #16
 8000bba:	0411      	lsls	r1, r2, #16
 8000bbc:	0c3f      	lsrs	r7, r7, #16
 8000bbe:	19c9      	adds	r1, r1, r7
 8000bc0:	018c      	lsls	r4, r1, #6
 8000bc2:	1e67      	subs	r7, r4, #1
 8000bc4:	41bc      	sbcs	r4, r7
 8000bc6:	0c12      	lsrs	r2, r2, #16
 8000bc8:	0e89      	lsrs	r1, r1, #26
 8000bca:	1812      	adds	r2, r2, r0
 8000bcc:	430c      	orrs	r4, r1
 8000bce:	0192      	lsls	r2, r2, #6
 8000bd0:	4314      	orrs	r4, r2
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	d50e      	bpl.n	8000bf4 <__aeabi_fmul+0x250>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	0862      	lsrs	r2, r4, #1
 8000bda:	401c      	ands	r4, r3
 8000bdc:	4314      	orrs	r4, r2
 8000bde:	e749      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000be0:	003e      	movs	r6, r7
 8000be2:	46a1      	mov	r9, r4
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	464b      	mov	r3, r9
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	431a      	orrs	r2, r3
 8000bec:	0252      	lsls	r2, r2, #9
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	0a52      	lsrs	r2, r2, #9
 8000bf2:	e714      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000bf4:	001d      	movs	r5, r3
 8000bf6:	e73d      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000bf8:	0192      	lsls	r2, r2, #6
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	0a52      	lsrs	r2, r2, #9
 8000bfe:	e70e      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c00:	290f      	cmp	r1, #15
 8000c02:	d1ed      	bne.n	8000be0 <__aeabi_fmul+0x23c>
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	464b      	mov	r3, r9
 8000c08:	03d2      	lsls	r2, r2, #15
 8000c0a:	4213      	tst	r3, r2
 8000c0c:	d0ea      	beq.n	8000be4 <__aeabi_fmul+0x240>
 8000c0e:	4214      	tst	r4, r2
 8000c10:	d1e8      	bne.n	8000be4 <__aeabi_fmul+0x240>
 8000c12:	003e      	movs	r6, r7
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	4322      	orrs	r2, r4
 8000c18:	e701      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	f7ffffff 	.word	0xf7ffffff

08000c20 <__aeabi_fsub>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4647      	mov	r7, r8
 8000c24:	46ce      	mov	lr, r9
 8000c26:	024e      	lsls	r6, r1, #9
 8000c28:	0243      	lsls	r3, r0, #9
 8000c2a:	0045      	lsls	r5, r0, #1
 8000c2c:	0a72      	lsrs	r2, r6, #9
 8000c2e:	0fc4      	lsrs	r4, r0, #31
 8000c30:	0048      	lsls	r0, r1, #1
 8000c32:	b580      	push	{r7, lr}
 8000c34:	4694      	mov	ip, r2
 8000c36:	0a5f      	lsrs	r7, r3, #9
 8000c38:	0e2d      	lsrs	r5, r5, #24
 8000c3a:	099b      	lsrs	r3, r3, #6
 8000c3c:	0e00      	lsrs	r0, r0, #24
 8000c3e:	0fc9      	lsrs	r1, r1, #31
 8000c40:	09b6      	lsrs	r6, r6, #6
 8000c42:	28ff      	cmp	r0, #255	@ 0xff
 8000c44:	d024      	beq.n	8000c90 <__aeabi_fsub+0x70>
 8000c46:	2201      	movs	r2, #1
 8000c48:	4051      	eors	r1, r2
 8000c4a:	1a2a      	subs	r2, r5, r0
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d00f      	beq.n	8000c70 <__aeabi_fsub+0x50>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_fsub+0x36>
 8000c54:	e16a      	b.n	8000f2c <__aeabi_fsub+0x30c>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d135      	bne.n	8000cc6 <__aeabi_fsub+0xa6>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x40>
 8000c5e:	e0a2      	b.n	8000da6 <__aeabi_fsub+0x186>
 8000c60:	1e51      	subs	r1, r2, #1
 8000c62:	2a01      	cmp	r2, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x48>
 8000c66:	e124      	b.n	8000eb2 <__aeabi_fsub+0x292>
 8000c68:	2aff      	cmp	r2, #255	@ 0xff
 8000c6a:	d021      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	e02f      	b.n	8000cd0 <__aeabi_fsub+0xb0>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_fsub+0x56>
 8000c74:	e167      	b.n	8000f46 <__aeabi_fsub+0x326>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d05e      	beq.n	8000d38 <__aeabi_fsub+0x118>
 8000c7a:	2dff      	cmp	r5, #255	@ 0xff
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	04c9      	lsls	r1, r1, #19
 8000c82:	430e      	orrs	r6, r1
 8000c84:	2a1b      	cmp	r2, #27
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_fsub+0x6a>
 8000c88:	e076      	b.n	8000d78 <__aeabi_fsub+0x158>
 8000c8a:	002a      	movs	r2, r5
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	e032      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000c90:	002a      	movs	r2, r5
 8000c92:	3aff      	subs	r2, #255	@ 0xff
 8000c94:	4691      	mov	r9, r2
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d042      	beq.n	8000d20 <__aeabi_fsub+0x100>
 8000c9a:	428c      	cmp	r4, r1
 8000c9c:	d055      	beq.n	8000d4a <__aeabi_fsub+0x12a>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x86>
 8000ca4:	e09c      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x8c>
 8000caa:	e077      	b.n	8000d9c <__aeabi_fsub+0x17c>
 8000cac:	000c      	movs	r4, r1
 8000cae:	0033      	movs	r3, r6
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x98>
 8000cb6:	e06e      	b.n	8000d96 <__aeabi_fsub+0x176>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	03d2      	lsls	r2, r2, #15
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a5b      	lsrs	r3, r3, #9
 8000cc4:	e024      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000cc6:	2dff      	cmp	r5, #255	@ 0xff
 8000cc8:	d0f2      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	04c9      	lsls	r1, r1, #19
 8000cce:	430e      	orrs	r6, r1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc08      	bgt.n	8000ce8 <__aeabi_fsub+0xc8>
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	2020      	movs	r0, #32
 8000cda:	40d1      	lsrs	r1, r2
 8000cdc:	1a82      	subs	r2, r0, r2
 8000cde:	4096      	lsls	r6, r2
 8000ce0:	0032      	movs	r2, r6
 8000ce2:	1e50      	subs	r0, r2, #1
 8000ce4:	4182      	sbcs	r2, r0
 8000ce6:	4311      	orrs	r1, r2
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	015a      	lsls	r2, r3, #5
 8000cec:	d460      	bmi.n	8000db0 <__aeabi_fsub+0x190>
 8000cee:	2107      	movs	r1, #7
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	d057      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	4019      	ands	r1, r3
 8000cfa:	2904      	cmp	r1, #4
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_fsub+0xe0>
 8000cfe:	3304      	adds	r3, #4
 8000d00:	0159      	lsls	r1, r3, #5
 8000d02:	d550      	bpl.n	8000da6 <__aeabi_fsub+0x186>
 8000d04:	1c50      	adds	r0, r2, #1
 8000d06:	2afe      	cmp	r2, #254	@ 0xfe
 8000d08:	d045      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	b2c0      	uxtb	r0, r0
 8000d0e:	0a5b      	lsrs	r3, r3, #9
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4318      	orrs	r0, r3
 8000d14:	07e4      	lsls	r4, r4, #31
 8000d16:	4320      	orrs	r0, r4
 8000d18:	bcc0      	pop	{r6, r7}
 8000d1a:	46b9      	mov	r9, r7
 8000d1c:	46b0      	mov	r8, r6
 8000d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d20:	2201      	movs	r2, #1
 8000d22:	4051      	eors	r1, r2
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d1ba      	bne.n	8000c9e <__aeabi_fsub+0x7e>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d010      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x114>
 8000d32:	e098      	b.n	8000e66 <__aeabi_fsub+0x246>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e7bb      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d034      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000d3c:	1e51      	subs	r1, r2, #1
 8000d3e:	2a01      	cmp	r2, #1
 8000d40:	d06e      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000d42:	2aff      	cmp	r2, #255	@ 0xff
 8000d44:	d0b4      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000d46:	000a      	movs	r2, r1
 8000d48:	e79c      	b.n	8000c84 <__aeabi_fsub+0x64>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d4e:	e088      	b.n	8000e62 <__aeabi_fsub+0x242>
 8000d50:	20fe      	movs	r0, #254	@ 0xfe
 8000d52:	1c6a      	adds	r2, r5, #1
 8000d54:	4210      	tst	r0, r2
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fsub+0x13a>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fsub+0x260>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x140>
 8000d5e:	e0a4      	b.n	8000eaa <__aeabi_fsub+0x28a>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x146>
 8000d64:	e0cb      	b.n	8000efe <__aeabi_fsub+0x2de>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000d6a:	e0ca      	b.n	8000f02 <__aeabi_fsub+0x2e2>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	b2d0      	uxtb	r0, r2
 8000d76:	e7cb      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d78:	0031      	movs	r1, r6
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	40d1      	lsrs	r1, r2
 8000d7e:	1a82      	subs	r2, r0, r2
 8000d80:	4096      	lsls	r6, r2
 8000d82:	0032      	movs	r2, r6
 8000d84:	1e50      	subs	r0, r2, #1
 8000d86:	4182      	sbcs	r2, r0
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	189b      	adds	r3, r3, r2
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	d5ae      	bpl.n	8000cee <__aeabi_fsub+0xce>
 8000d90:	1c6a      	adds	r2, r5, #1
 8000d92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000d94:	d14a      	bne.n	8000e2c <__aeabi_fsub+0x20c>
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e7b9      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d9c:	22ff      	movs	r2, #255	@ 0xff
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14b      	bne.n	8000e3a <__aeabi_fsub+0x21a>
 8000da2:	000c      	movs	r4, r1
 8000da4:	0033      	movs	r3, r6
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2aff      	cmp	r2, #255	@ 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x18e>
 8000dac:	e781      	b.n	8000cb2 <__aeabi_fsub+0x92>
 8000dae:	e7df      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000db0:	019f      	lsls	r7, r3, #6
 8000db2:	09bf      	lsrs	r7, r7, #6
 8000db4:	0038      	movs	r0, r7
 8000db6:	f000 f943 	bl	8001040 <__clzsi2>
 8000dba:	3805      	subs	r0, #5
 8000dbc:	4087      	lsls	r7, r0
 8000dbe:	4285      	cmp	r5, r0
 8000dc0:	dc21      	bgt.n	8000e06 <__aeabi_fsub+0x1e6>
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	1b42      	subs	r2, r0, r5
 8000dc8:	3201      	adds	r2, #1
 8000dca:	40d3      	lsrs	r3, r2
 8000dcc:	1a8a      	subs	r2, r1, r2
 8000dce:	4097      	lsls	r7, r2
 8000dd0:	1e7a      	subs	r2, r7, #1
 8000dd2:	4197      	sbcs	r7, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	433b      	orrs	r3, r7
 8000dd8:	0759      	lsls	r1, r3, #29
 8000dda:	d000      	beq.n	8000dde <__aeabi_fsub+0x1be>
 8000ddc:	e78b      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000dde:	e78f      	b.n	8000d00 <__aeabi_fsub+0xe0>
 8000de0:	20fe      	movs	r0, #254	@ 0xfe
 8000de2:	1c6a      	adds	r2, r5, #1
 8000de4:	4210      	tst	r0, r2
 8000de6:	d112      	bne.n	8000e0e <__aeabi_fsub+0x1ee>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d152      	bne.n	8000e92 <__aeabi_fsub+0x272>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d07c      	beq.n	8000eea <__aeabi_fsub+0x2ca>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0bb      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000df4:	1b9a      	subs	r2, r3, r6
 8000df6:	0150      	lsls	r0, r2, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x1dc>
 8000dfa:	e08b      	b.n	8000f14 <__aeabi_fsub+0x2f4>
 8000dfc:	2401      	movs	r4, #1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	1af3      	subs	r3, r6, r3
 8000e02:	400c      	ands	r4, r1
 8000e04:	e7e8      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e06:	4b56      	ldr	r3, [pc, #344]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000e08:	1a2a      	subs	r2, r5, r0
 8000e0a:	403b      	ands	r3, r7
 8000e0c:	e7e4      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e0e:	1b9f      	subs	r7, r3, r6
 8000e10:	017a      	lsls	r2, r7, #5
 8000e12:	d446      	bmi.n	8000ea2 <__aeabi_fsub+0x282>
 8000e14:	2f00      	cmp	r7, #0
 8000e16:	d1cd      	bne.n	8000db4 <__aeabi_fsub+0x194>
 8000e18:	2400      	movs	r4, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e777      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000e20:	199b      	adds	r3, r3, r6
 8000e22:	2501      	movs	r5, #1
 8000e24:	3201      	adds	r2, #1
 8000e26:	0159      	lsls	r1, r3, #5
 8000e28:	d400      	bmi.n	8000e2c <__aeabi_fsub+0x20c>
 8000e2a:	e760      	b.n	8000cee <__aeabi_fsub+0xce>
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	484d      	ldr	r0, [pc, #308]	@ (8000f64 <__aeabi_fsub+0x344>)
 8000e30:	4019      	ands	r1, r3
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4003      	ands	r3, r0
 8000e36:	430b      	orrs	r3, r1
 8000e38:	e7ce      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e3a:	1e57      	subs	r7, r2, #1
 8000e3c:	2a01      	cmp	r2, #1
 8000e3e:	d05a      	beq.n	8000ef6 <__aeabi_fsub+0x2d6>
 8000e40:	000c      	movs	r4, r1
 8000e42:	2aff      	cmp	r2, #255	@ 0xff
 8000e44:	d033      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e46:	2201      	movs	r2, #1
 8000e48:	2f1b      	cmp	r7, #27
 8000e4a:	dc07      	bgt.n	8000e5c <__aeabi_fsub+0x23c>
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	1bc9      	subs	r1, r1, r7
 8000e50:	001a      	movs	r2, r3
 8000e52:	408b      	lsls	r3, r1
 8000e54:	40fa      	lsrs	r2, r7
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	418b      	sbcs	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	0005      	movs	r5, r0
 8000e5e:	1ab3      	subs	r3, r6, r2
 8000e60:	e743      	b.n	8000cea <__aeabi_fsub+0xca>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d123      	bne.n	8000eae <__aeabi_fsub+0x28e>
 8000e66:	22ff      	movs	r2, #255	@ 0xff
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d09b      	beq.n	8000da4 <__aeabi_fsub+0x184>
 8000e6c:	1e51      	subs	r1, r2, #1
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d0d6      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000e72:	2aff      	cmp	r2, #255	@ 0xff
 8000e74:	d01b      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e76:	291b      	cmp	r1, #27
 8000e78:	dd2c      	ble.n	8000ed4 <__aeabi_fsub+0x2b4>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	1c73      	adds	r3, r6, #1
 8000e7e:	e73a      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e80:	2aff      	cmp	r2, #255	@ 0xff
 8000e82:	d088      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000e84:	199b      	adds	r3, r3, r6
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	0759      	lsls	r1, r3, #29
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x26e>
 8000e8c:	e733      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	e76e      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d110      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d043      	beq.n	8000f22 <__aeabi_fsub+0x302>
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	400c      	ands	r4, r1
 8000ea0:	e706      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ea2:	2401      	movs	r4, #1
 8000ea4:	1af7      	subs	r7, r6, r3
 8000ea6:	400c      	ands	r4, r1
 8000ea8:	e784      	b.n	8000db4 <__aeabi_fsub+0x194>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000eae:	0033      	movs	r3, r6
 8000eb0:	e6fe      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	1b9b      	subs	r3, r3, r6
 8000eb6:	e718      	b.n	8000cea <__aeabi_fsub+0xca>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x29e>
 8000ebc:	e6f8      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	03d2      	lsls	r2, r2, #15
 8000ec2:	4297      	cmp	r7, r2
 8000ec4:	d304      	bcc.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000ec6:	4594      	cmp	ip, r2
 8000ec8:	d202      	bcs.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000eca:	2401      	movs	r4, #1
 8000ecc:	0033      	movs	r3, r6
 8000ece:	400c      	ands	r4, r1
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	e6f1      	b.n	8000cb8 <__aeabi_fsub+0x98>
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2520      	movs	r5, #32
 8000ed8:	40ca      	lsrs	r2, r1
 8000eda:	1a69      	subs	r1, r5, r1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	418b      	sbcs	r3, r1
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	199b      	adds	r3, r3, r6
 8000ee8:	e750      	b.n	8000d8c <__aeabi_fsub+0x16c>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d094      	beq.n	8000e18 <__aeabi_fsub+0x1f8>
 8000eee:	2401      	movs	r4, #1
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	400c      	ands	r4, r1
 8000ef4:	e73a      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000ef6:	000c      	movs	r4, r1
 8000ef8:	2501      	movs	r5, #1
 8000efa:	1af3      	subs	r3, r6, r3
 8000efc:	e6f5      	b.n	8000cea <__aeabi_fsub+0xca>
 8000efe:	0033      	movs	r3, r6
 8000f00:	e734      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000f02:	199b      	adds	r3, r3, r6
 8000f04:	2200      	movs	r2, #0
 8000f06:	0159      	lsls	r1, r3, #5
 8000f08:	d5c1      	bpl.n	8000e8e <__aeabi_fsub+0x26e>
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	2201      	movs	r2, #1
 8000f12:	e72d      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x2fa>
 8000f18:	e77e      	b.n	8000e18 <__aeabi_fsub+0x1f8>
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	e726      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	2400      	movs	r4, #0
 8000f26:	20ff      	movs	r0, #255	@ 0xff
 8000f28:	03db      	lsls	r3, r3, #15
 8000f2a:	e6f1      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x312>
 8000f30:	e756      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000f32:	1b47      	subs	r7, r0, r5
 8000f34:	003a      	movs	r2, r7
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x31c>
 8000f3a:	e730      	b.n	8000d9e <__aeabi_fsub+0x17e>
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	04d2      	lsls	r2, r2, #19
 8000f40:	000c      	movs	r4, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	e77f      	b.n	8000e46 <__aeabi_fsub+0x226>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x32c>
 8000f4a:	e701      	b.n	8000d50 <__aeabi_fsub+0x130>
 8000f4c:	1b41      	subs	r1, r0, r5
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d101      	bne.n	8000f56 <__aeabi_fsub+0x336>
 8000f52:	000a      	movs	r2, r1
 8000f54:	e788      	b.n	8000e68 <__aeabi_fsub+0x248>
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e78b      	b.n	8000e76 <__aeabi_fsub+0x256>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	fbffffff 	.word	0xfbffffff
 8000f64:	7dffffff 	.word	0x7dffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f76:	dd03      	ble.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f7a:	dd02      	ble.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	@ 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	@ 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	@ 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	@ 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d013      	beq.n	8000fd6 <__aeabi_i2f+0x2e>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f842 	bl	8001040 <__clzsi2>
 8000fbc:	239e      	movs	r3, #158	@ 0x9e
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	2b96      	cmp	r3, #150	@ 0x96
 8000fc4:	dc0f      	bgt.n	8000fe6 <__aeabi_i2f+0x3e>
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	d034      	beq.n	8001034 <__aeabi_i2f+0x8c>
 8000fca:	3908      	subs	r1, #8
 8000fcc:	408d      	lsls	r5, r1
 8000fce:	026d      	lsls	r5, r5, #9
 8000fd0:	0a6d      	lsrs	r5, r5, #9
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	e002      	b.n	8000fdc <__aeabi_i2f+0x34>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	05c0      	lsls	r0, r0, #23
 8000fde:	4328      	orrs	r0, r5
 8000fe0:	07e4      	lsls	r4, r4, #31
 8000fe2:	4320      	orrs	r0, r4
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	@ 0x99
 8000fe8:	dc16      	bgt.n	8001018 <__aeabi_i2f+0x70>
 8000fea:	1f42      	subs	r2, r0, #5
 8000fec:	2805      	cmp	r0, #5
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_i2f+0x4a>
 8000ff0:	4095      	lsls	r5, r2
 8000ff2:	002a      	movs	r2, r5
 8000ff4:	4811      	ldr	r0, [pc, #68]	@ (800103c <__aeabi_i2f+0x94>)
 8000ff6:	4002      	ands	r2, r0
 8000ff8:	076e      	lsls	r6, r5, #29
 8000ffa:	d009      	beq.n	8001010 <__aeabi_i2f+0x68>
 8000ffc:	260f      	movs	r6, #15
 8000ffe:	4035      	ands	r5, r6
 8001000:	2d04      	cmp	r5, #4
 8001002:	d005      	beq.n	8001010 <__aeabi_i2f+0x68>
 8001004:	3204      	adds	r2, #4
 8001006:	0155      	lsls	r5, r2, #5
 8001008:	d502      	bpl.n	8001010 <__aeabi_i2f+0x68>
 800100a:	239f      	movs	r3, #159	@ 0x9f
 800100c:	4002      	ands	r2, r0
 800100e:	1a5b      	subs	r3, r3, r1
 8001010:	0192      	lsls	r2, r2, #6
 8001012:	0a55      	lsrs	r5, r2, #9
 8001014:	b2d8      	uxtb	r0, r3
 8001016:	e7e1      	b.n	8000fdc <__aeabi_i2f+0x34>
 8001018:	2205      	movs	r2, #5
 800101a:	1a12      	subs	r2, r2, r0
 800101c:	0028      	movs	r0, r5
 800101e:	40d0      	lsrs	r0, r2
 8001020:	0002      	movs	r2, r0
 8001022:	0008      	movs	r0, r1
 8001024:	301b      	adds	r0, #27
 8001026:	4085      	lsls	r5, r0
 8001028:	0028      	movs	r0, r5
 800102a:	1e45      	subs	r5, r0, #1
 800102c:	41a8      	sbcs	r0, r5
 800102e:	4302      	orrs	r2, r0
 8001030:	0015      	movs	r5, r2
 8001032:	e7de      	b.n	8000ff2 <__aeabi_i2f+0x4a>
 8001034:	026d      	lsls	r5, r5, #9
 8001036:	2096      	movs	r0, #150	@ 0x96
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	e7cf      	b.n	8000fdc <__aeabi_i2f+0x34>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__clzsi2>:
 8001040:	211c      	movs	r1, #28
 8001042:	2301      	movs	r3, #1
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	4298      	cmp	r0, r3
 8001048:	d301      	bcc.n	800104e <__clzsi2+0xe>
 800104a:	0c00      	lsrs	r0, r0, #16
 800104c:	3910      	subs	r1, #16
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	4298      	cmp	r0, r3
 8001052:	d301      	bcc.n	8001058 <__clzsi2+0x18>
 8001054:	0a00      	lsrs	r0, r0, #8
 8001056:	3908      	subs	r1, #8
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	4298      	cmp	r0, r3
 800105c:	d301      	bcc.n	8001062 <__clzsi2+0x22>
 800105e:	0900      	lsrs	r0, r0, #4
 8001060:	3904      	subs	r1, #4
 8001062:	a202      	add	r2, pc, #8	@ (adr r2, 800106c <__clzsi2+0x2c>)
 8001064:	5c10      	ldrb	r0, [r2, r0]
 8001066:	1840      	adds	r0, r0, r1
 8001068:	4770      	bx	lr
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	02020304 	.word	0x02020304
 8001070:	01010101 	.word	0x01010101
	...

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	240c      	movs	r4, #12
 8001084:	193b      	adds	r3, r7, r4
 8001086:	0018      	movs	r0, r3
 8001088:	2314      	movs	r3, #20
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f002 ff9b 	bl	8003fc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001098:	2180      	movs	r1, #128	@ 0x80
 800109a:	0289      	lsls	r1, r1, #10
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	02c9      	lsls	r1, r1, #11
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <MX_GPIO_Init+0x11c>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	4013      	ands	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 80010ca:	4934      	ldr	r1, [pc, #208]	@ (800119c <MX_GPIO_Init+0x120>)
 80010cc:	2390      	movs	r3, #144	@ 0x90
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	2200      	movs	r2, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fb97 	bl	8002806 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80010d8:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <MX_GPIO_Init+0x124>)
 80010da:	2200      	movs	r2, #0
 80010dc:	214a      	movs	r1, #74	@ 0x4a
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fb91 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2212      	movs	r2, #18
 80010e8:	32ff      	adds	r2, #255	@ 0xff
 80010ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2201      	movs	r2, #1
 80010f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	193a      	adds	r2, r7, r4
 80010fa:	2390      	movs	r3, #144	@ 0x90
 80010fc:	05db      	lsls	r3, r3, #23
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f001 f9f3 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001106:	193b      	adds	r3, r7, r4
 8001108:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <MX_GPIO_Init+0x128>)
 800110a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	193b      	adds	r3, r7, r4
 800110e:	2203      	movs	r2, #3
 8001110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	193a      	adds	r2, r7, r4
 800111a:	2390      	movs	r3, #144	@ 0x90
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f001 f9e3 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 8001126:	193b      	adds	r3, r7, r4
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_GPIO_Init+0x120>)
 800112a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2201      	movs	r2, #1
 8001130:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	193a      	adds	r2, r7, r4
 8001140:	2390      	movs	r3, #144	@ 0x90
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f9d0 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2211      	movs	r2, #17
 8001150:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2201      	movs	r2, #1
 800115c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	193b      	adds	r3, r7, r4
 8001160:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <MX_GPIO_Init+0x124>)
 8001162:	0019      	movs	r1, r3
 8001164:	0010      	movs	r0, r2
 8001166:	f001 f9c1 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
 800116a:	0021      	movs	r1, r4
 800116c:	187b      	adds	r3, r7, r1
 800116e:	224a      	movs	r2, #74	@ 0x4a
 8001170:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2201      	movs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	187b      	adds	r3, r7, r1
 8001186:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <MX_GPIO_Init+0x124>)
 8001188:	0019      	movs	r1, r3
 800118a:	0010      	movs	r0, r2
 800118c:	f001 f9ae 	bl	80024ec <HAL_GPIO_Init>

}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b009      	add	sp, #36	@ 0x24
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	000018cc 	.word	0x000018cc
 80011a0:	48000400 	.word	0x48000400
 80011a4:	00008002 	.word	0x00008002

080011a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_I2C1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C1_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_I2C1_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_I2C1_Init+0x74>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 fb47 	bl	8002878 <HAL_I2C_Init>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ee:	f000 ffcf 	bl	8002190 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_I2C1_Init+0x74>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	0018      	movs	r0, r3
 80011f8:	f002 f942 	bl	8003480 <HAL_I2CEx_ConfigAnalogFilter>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 ffc6 	bl	8002190 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <MX_I2C1_Init+0x74>)
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f002 f985 	bl	8003518 <HAL_I2CEx_ConfigDigitalFilter>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 ffbd 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000002c 	.word	0x2000002c
 8001220:	40005400 	.word	0x40005400
 8001224:	2000090e 	.word	0x2000090e

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b08b      	sub	sp, #44	@ 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	2414      	movs	r4, #20
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f002 fec4 	bl	8003fc8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <HAL_I2C_MspInit+0x94>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d133      	bne.n	80012b2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 8001250:	2180      	movs	r1, #128	@ 0x80
 8001252:	0289      	lsls	r1, r1, #10
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001266:	193b      	adds	r3, r7, r4
 8001268:	22c0      	movs	r2, #192	@ 0xc0
 800126a:	00d2      	lsls	r2, r2, #3
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2212      	movs	r2, #18
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2203      	movs	r2, #3
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2204      	movs	r2, #4
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	187a      	adds	r2, r7, r1
 800128a:	2390      	movs	r3, #144	@ 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f001 f92b 	bl	80024ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	0389      	lsls	r1, r1, #14
 80012a0:	430a      	orrs	r2, r1
 80012a2:	61da      	str	r2, [r3, #28]
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_I2C_MspInit+0x98>)
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	039b      	lsls	r3, r3, #14
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b00b      	add	sp, #44	@ 0x2c
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40021000 	.word	0x40021000

080012c4 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	0008      	movs	r0, r1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	0019      	movs	r1, r3
 80012d2:	230b      	movs	r3, #11
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	1c02      	adds	r2, r0, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	2308      	movs	r3, #8
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	1c0a      	adds	r2, r1, #0
 80012e0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <lis3dh_read_reg+0x2a>
  {
    return -1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	e00f      	b.n	800130e <lis3dh_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685c      	ldr	r4, [r3, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68d8      	ldr	r0, [r3, #12]
 80012f6:	2308      	movs	r3, #8
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	881d      	ldrh	r5, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	230b      	movs	r3, #11
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	7819      	ldrb	r1, [r3, #0]
 8001304:	002b      	movs	r3, r5
 8001306:	47a0      	blx	r4
 8001308:	0003      	movs	r3, r0
 800130a:	617b      	str	r3, [r7, #20]

  return ret;
 800130c:	697b      	ldr	r3, [r7, #20]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b006      	add	sp, #24
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001316:	b5b0      	push	{r4, r5, r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	0008      	movs	r0, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	0019      	movs	r1, r3
 8001324:	230b      	movs	r3, #11
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	1c02      	adds	r2, r0, #0
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	2308      	movs	r3, #8
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <lis3dh_write_reg+0x2a>
  {
    return -1;
 800133a:	2301      	movs	r3, #1
 800133c:	425b      	negs	r3, r3
 800133e:	e00f      	b.n	8001360 <lis3dh_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68d8      	ldr	r0, [r3, #12]
 8001348:	2308      	movs	r3, #8
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	881d      	ldrh	r5, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	230b      	movs	r3, #11
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	002b      	movs	r3, r5
 8001358:	47a0      	blx	r4
 800135a:	0003      	movs	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

  return ret;
 800135e:	697b      	ldr	r3, [r7, #20]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bdb0      	pop	{r4, r5, r7, pc}

08001368 <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	2200      	movs	r2, #0
 8001378:	5e9b      	ldrsh	r3, [r3, r2]
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff fe14 	bl	8000fa8 <__aeabi_i2f>
 8001380:	1c03      	adds	r3, r0, #0
 8001382:	2183      	movs	r1, #131	@ 0x83
 8001384:	05c9      	lsls	r1, r1, #23
 8001386:	1c18      	adds	r0, r3, #0
 8001388:	f7ff f926 	bl	80005d8 <__aeabi_fdiv>
 800138c:	1c03      	adds	r3, r0, #0
}
 800138e:	1c18      	adds	r0, r3, #0
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <lis3dh_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis3dh_from_lsb_hr_to_celsius(int16_t lsb)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	2200      	movs	r2, #0
 80013a8:	5e9b      	ldrsh	r3, [r3, r2]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff fdfc 	bl	8000fa8 <__aeabi_i2f>
 80013b0:	1c03      	adds	r3, r0, #0
 80013b2:	2185      	movs	r1, #133	@ 0x85
 80013b4:	05c9      	lsls	r1, r1, #23
 80013b6:	1c18      	adds	r0, r3, #0
 80013b8:	f7ff f90e 	bl	80005d8 <__aeabi_fdiv>
 80013bc:	1c03      	adds	r3, r0, #0
 80013be:	2181      	movs	r1, #129	@ 0x81
 80013c0:	05c9      	lsls	r1, r1, #23
 80013c2:	1c18      	adds	r0, r3, #0
 80013c4:	f7ff f908 	bl	80005d8 <__aeabi_fdiv>
 80013c8:	1c03      	adds	r3, r0, #0
 80013ca:	4904      	ldr	r1, [pc, #16]	@ (80013dc <lis3dh_from_lsb_hr_to_celsius+0x44>)
 80013cc:	1c18      	adds	r0, r3, #0
 80013ce:	f7fe ff79 	bl	80002c4 <__aeabi_fadd>
 80013d2:	1c03      	adds	r3, r0, #0
}
 80013d4:	1c18      	adds	r0, r3, #0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	41c80000 	.word	0x41c80000

080013e0 <lis3dh_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temp_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG_AUX,
 80013ea:	2408      	movs	r4, #8
 80013ec:	193a      	adds	r2, r7, r4
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2107      	movs	r1, #7
 80013f4:	f7ff ff66 	bl	80012c4 <lis3dh_read_reg>
 80013f8:	0003      	movs	r3, r0
 80013fa:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux._3da;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	075b      	lsls	r3, r3, #29
 8001402:	0fdb      	lsrs	r3, r3, #31
 8001404:	b2db      	uxtb	r3, r3
 8001406:	001a      	movs	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	701a      	strb	r2, [r3, #0]

  return ret;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b005      	add	sp, #20
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <lis3dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_ADC3_L, buff, 2);
 8001420:	2408      	movs	r4, #8
 8001422:	193a      	adds	r2, r7, r4
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	2302      	movs	r3, #2
 8001428:	210c      	movs	r1, #12
 800142a:	f7ff ff4b 	bl	80012c4 <lis3dh_read_reg>
 800142e:	0003      	movs	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 8001432:	0021      	movs	r1, r4
 8001434:	187b      	adds	r3, r7, r1
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	b21a      	sxth	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	5e9b      	ldrsh	r3, [r3, r2]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	187a      	adds	r2, r7, r1
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	189b      	adds	r3, r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	801a      	strh	r2, [r3, #0]

  return ret;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b005      	add	sp, #20
 8001460:	bd90      	pop	{r4, r7, pc}

08001462 <lis3dh_aux_adc_set>:
  * @param  val      configure the auxiliary ADC
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_aux_adc_set(const stmdev_ctx_t *ctx, lis3dh_temp_en_t val)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	000a      	movs	r2, r1
 800146c:	1cfb      	adds	r3, r7, #3
 800146e:	701a      	strb	r2, [r3, #0]
  lis3dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_TEMP_CFG_REG,
 8001470:	2308      	movs	r3, #8
 8001472:	18fa      	adds	r2, r7, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	2301      	movs	r3, #1
 8001478:	211f      	movs	r1, #31
 800147a:	f7ff ff23 	bl	80012c4 <lis3dh_read_reg>
 800147e:	0003      	movs	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10a      	bne.n	800149e <lis3dh_aux_adc_set+0x3c>
  {
    if (val != LIS3DH_AUX_DISABLE)
 8001488:	1cfb      	adds	r3, r7, #3
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <lis3dh_aux_adc_set+0x3c>
    {
      /* Required in order to use auxiliary adc */
      ret = lis3dh_block_data_update_set(ctx, PROPERTY_ENABLE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2101      	movs	r1, #1
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f8fa 	bl	800168e <lis3dh_block_data_update_set>
 800149a:	0003      	movs	r3, r0
 800149c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d128      	bne.n	80014f6 <lis3dh_aux_adc_set+0x94>
  {
    temp_cfg_reg.temp_en = ((uint8_t) val & 0x02U) >> 1;
 80014a4:	1cfb      	adds	r3, r7, #3
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	1c1a      	adds	r2, r3, #0
 80014ac:	2301      	movs	r3, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	2408      	movs	r4, #8
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2101      	movs	r1, #1
 80014b8:	400a      	ands	r2, r1
 80014ba:	0190      	lsls	r0, r2, #6
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	2140      	movs	r1, #64	@ 0x40
 80014c0:	438a      	bics	r2, r1
 80014c2:	1c11      	adds	r1, r2, #0
 80014c4:	1c02      	adds	r2, r0, #0
 80014c6:	430a      	orrs	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
    temp_cfg_reg.adc_pd  = (uint8_t) val &  0x01U;
 80014ca:	1cfb      	adds	r3, r7, #3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	01d0      	lsls	r0, r2, #7
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	217f      	movs	r1, #127	@ 0x7f
 80014dc:	400a      	ands	r2, r1
 80014de:	1c11      	adds	r1, r2, #0
 80014e0:	1c02      	adds	r2, r0, #0
 80014e2:	430a      	orrs	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_TEMP_CFG_REG,
 80014e6:	193a      	adds	r2, r7, r4
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	2301      	movs	r3, #1
 80014ec:	211f      	movs	r1, #31
 80014ee:	f7ff ff12 	bl	8001316 <lis3dh_write_reg>
 80014f2:	0003      	movs	r3, r0
 80014f4:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b005      	add	sp, #20
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	000a      	movs	r2, r1
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 800150e:	2310      	movs	r3, #16
 8001510:	18fa      	adds	r2, r7, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	2120      	movs	r1, #32
 8001518:	f7ff fed4 	bl	80012c4 <lis3dh_read_reg>
 800151c:	0003      	movs	r3, r0
 800151e:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8001526:	230c      	movs	r3, #12
 8001528:	18fa      	adds	r2, r7, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	2301      	movs	r3, #1
 800152e:	2123      	movs	r1, #35	@ 0x23
 8001530:	f7ff fec8 	bl	80012c4 <lis3dh_read_reg>
 8001534:	0003      	movs	r3, r0
 8001536:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d138      	bne.n	80015b0 <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 800153e:	1cfb      	adds	r3, r7, #3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8001546:	2310      	movs	r3, #16
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	2108      	movs	r1, #8
 800154e:	438a      	bics	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8001552:	230c      	movs	r3, #12
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	2108      	movs	r1, #8
 800155a:	430a      	orrs	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10b      	bne.n	800157e <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8001566:	2310      	movs	r3, #16
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	2108      	movs	r1, #8
 800156e:	438a      	bics	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001572:	230c      	movs	r3, #12
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	2108      	movs	r1, #8
 800157a:	438a      	bics	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 800157e:	1cfb      	adds	r3, r7, #3
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d10b      	bne.n	800159e <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8001586:	2310      	movs	r3, #16
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	2108      	movs	r1, #8
 800158e:	430a      	orrs	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8001592:	230c      	movs	r3, #12
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	2108      	movs	r1, #8
 800159a:	438a      	bics	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800159e:	2310      	movs	r3, #16
 80015a0:	18fa      	adds	r2, r7, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	2301      	movs	r3, #1
 80015a6:	2120      	movs	r1, #32
 80015a8:	f7ff feb5 	bl	8001316 <lis3dh_write_reg>
 80015ac:	0003      	movs	r3, r0
 80015ae:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80015b6:	230c      	movs	r3, #12
 80015b8:	18fa      	adds	r2, r7, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	2301      	movs	r3, #1
 80015be:	2123      	movs	r1, #35	@ 0x23
 80015c0:	f7ff fea9 	bl	8001316 <lis3dh_write_reg>
 80015c4:	0003      	movs	r3, r0
 80015c6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b006      	add	sp, #24
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(const stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 80015d2:	b590      	push	{r4, r7, lr}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	000a      	movs	r2, r1
 80015dc:	1cfb      	adds	r3, r7, #3
 80015de:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80015e0:	2408      	movs	r4, #8
 80015e2:	193a      	adds	r2, r7, r4
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	2301      	movs	r3, #1
 80015e8:	2120      	movs	r1, #32
 80015ea:	f7ff fe6b 	bl	80012c4 <lis3dh_read_reg>
 80015ee:	0003      	movs	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d115      	bne.n	8001624 <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80015f8:	1cfb      	adds	r3, r7, #3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	220f      	movs	r2, #15
 80015fe:	4013      	ands	r3, r2
 8001600:	b2da      	uxtb	r2, r3
 8001602:	193b      	adds	r3, r7, r4
 8001604:	0110      	lsls	r0, r2, #4
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	210f      	movs	r1, #15
 800160a:	400a      	ands	r2, r1
 800160c:	1c11      	adds	r1, r2, #0
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	430a      	orrs	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001614:	193a      	adds	r2, r7, r4
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	2301      	movs	r3, #1
 800161a:	2120      	movs	r1, #32
 800161c:	f7ff fe7b 	bl	8001316 <lis3dh_write_reg>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001624:	68fb      	ldr	r3, [r7, #12]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b005      	add	sp, #20
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(const stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	000a      	movs	r2, r1
 8001638:	1cfb      	adds	r3, r7, #3
 800163a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800163c:	2408      	movs	r4, #8
 800163e:	193a      	adds	r2, r7, r4
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	2301      	movs	r3, #1
 8001644:	2123      	movs	r1, #35	@ 0x23
 8001646:	f7ff fe3d 	bl	80012c4 <lis3dh_read_reg>
 800164a:	0003      	movs	r3, r0
 800164c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d117      	bne.n	8001684 <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001654:	1cfb      	adds	r3, r7, #3
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	b2da      	uxtb	r2, r3
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2103      	movs	r1, #3
 8001662:	400a      	ands	r2, r1
 8001664:	0110      	lsls	r0, r2, #4
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	2130      	movs	r1, #48	@ 0x30
 800166a:	438a      	bics	r2, r1
 800166c:	1c11      	adds	r1, r2, #0
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	430a      	orrs	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8001674:	193a      	adds	r2, r7, r4
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	2301      	movs	r3, #1
 800167a:	2123      	movs	r1, #35	@ 0x23
 800167c:	f7ff fe4b 	bl	8001316 <lis3dh_write_reg>
 8001680:	0003      	movs	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b005      	add	sp, #20
 800168c:	bd90      	pop	{r4, r7, pc}

0800168e <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800168e:	b590      	push	{r4, r7, lr}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	000a      	movs	r2, r1
 8001698:	1cfb      	adds	r3, r7, #3
 800169a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800169c:	2408      	movs	r4, #8
 800169e:	193a      	adds	r2, r7, r4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2123      	movs	r1, #35	@ 0x23
 80016a6:	f7ff fe0d 	bl	80012c4 <lis3dh_read_reg>
 80016aa:	0003      	movs	r3, r0
 80016ac:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d115      	bne.n	80016e0 <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 80016b4:	1cfb      	adds	r3, r7, #3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	01d0      	lsls	r0, r2, #7
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	217f      	movs	r1, #127	@ 0x7f
 80016c6:	400a      	ands	r2, r1
 80016c8:	1c11      	adds	r1, r2, #0
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	430a      	orrs	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2123      	movs	r1, #35	@ 0x23
 80016d8:	f7ff fe1d 	bl	8001316 <lis3dh_write_reg>
 80016dc:	0003      	movs	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b005      	add	sp, #20
 80016e8:	bd90      	pop	{r4, r7, pc}

080016ea <lis3dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *)&status_reg, 1);
 80016f4:	2408      	movs	r4, #8
 80016f6:	193a      	adds	r2, r7, r4
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	f7ff fde1 	bl	80012c4 <lis3dh_read_reg>
 8001702:	0003      	movs	r3, r0
 8001704:	60fb      	str	r3, [r7, #12]
  *val = status_reg.zyxda;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	071b      	lsls	r3, r3, #28
 800170c:	0fdb      	lsrs	r3, r3, #31
 800170e:	b2db      	uxtb	r3, r3
 8001710:	001a      	movs	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	701a      	strb	r2, [r3, #0]

  return ret;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b005      	add	sp, #20
 800171e:	bd90      	pop	{r4, r7, pc}

08001720 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 800172a:	240c      	movs	r4, #12
 800172c:	193a      	adds	r2, r7, r4
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	2306      	movs	r3, #6
 8001732:	2128      	movs	r1, #40	@ 0x28
 8001734:	f7ff fdc6 	bl	80012c4 <lis3dh_read_reg>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 800173c:	0021      	movs	r1, r4
 800173e:	187b      	adds	r3, r7, r1
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	b21a      	sxth	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	5e9b      	ldrsh	r3, [r3, r2]
 800174e:	b29b      	uxth	r3, r3
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29b      	uxth	r3, r3
 8001754:	187a      	adds	r2, r7, r1
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	189b      	adds	r3, r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	b21a      	sxth	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001762:	187b      	adds	r3, r7, r1
 8001764:	78da      	ldrb	r2, [r3, #3]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3302      	adds	r3, #2
 800176a:	b212      	sxth	r2, r2
 800176c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	3302      	adds	r3, #2
 8001772:	2200      	movs	r2, #0
 8001774:	5e9b      	ldrsh	r3, [r3, r2]
 8001776:	b29b      	uxth	r3, r3
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	187a      	adds	r2, r7, r1
 800177e:	7892      	ldrb	r2, [r2, #2]
 8001780:	189b      	adds	r3, r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3302      	adds	r3, #2
 8001788:	b212      	sxth	r2, r2
 800178a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800178c:	187b      	adds	r3, r7, r1
 800178e:	795a      	ldrb	r2, [r3, #5]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3304      	adds	r3, #4
 8001794:	b212      	sxth	r2, r2
 8001796:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3304      	adds	r3, #4
 800179c:	2200      	movs	r2, #0
 800179e:	5e9b      	ldrsh	r3, [r3, r2]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	187a      	adds	r2, r7, r1
 80017a8:	7912      	ldrb	r2, [r2, #4]
 80017aa:	189b      	adds	r3, r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	3304      	adds	r3, #4
 80017b2:	b212      	sxth	r2, r2
 80017b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80017b6:	697b      	ldr	r3, [r7, #20]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b007      	add	sp, #28
 80017be:	bd90      	pop	{r4, r7, pc}

080017c0 <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	2301      	movs	r3, #1
 80017d0:	210f      	movs	r1, #15
 80017d2:	f7ff fd77 	bl	80012c4 <lis3dh_read_reg>
 80017d6:	0003      	movs	r3, r0
 80017d8:	60fb      	str	r3, [r7, #12]

  return ret;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <theCode>:
static int16_t data_raw_acceleration[3];
static int16_t data_raw_temperature;
static float acceleration_mg[3];
static float temperature_degC;

int theCode(int N1, int N2, int N3, int N4) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
    // Check if the light state is equal to the code input to the function
    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) != N1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != N2)
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	011a      	lsls	r2, r3, #4
 80017f6:	2390      	movs	r3, #144	@ 0x90
 80017f8:	05db      	lsls	r3, r3, #23
 80017fa:	0011      	movs	r1, r2
 80017fc:	0018      	movs	r0, r3
 80017fe:	f000 ffe5 	bl	80027cc <HAL_GPIO_ReadPin>
 8001802:	0003      	movs	r3, r0
 8001804:	001a      	movs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4293      	cmp	r3, r2
 800180a:	d021      	beq.n	8001850 <theCode+0x6c>
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <theCode+0x78>)
 800180e:	2140      	movs	r1, #64	@ 0x40
 8001810:	0018      	movs	r0, r3
 8001812:	f000 ffdb 	bl	80027cc <HAL_GPIO_ReadPin>
 8001816:	0003      	movs	r3, r0
 8001818:	001a      	movs	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	4293      	cmp	r3, r2
 800181e:	d017      	beq.n	8001850 <theCode+0x6c>
    	&& (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) != N3) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) != N4)) {
 8001820:	2390      	movs	r3, #144	@ 0x90
 8001822:	05db      	lsls	r3, r3, #23
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	0018      	movs	r0, r3
 8001828:	f000 ffd0 	bl	80027cc <HAL_GPIO_ReadPin>
 800182c:	0003      	movs	r3, r0
 800182e:	001a      	movs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4293      	cmp	r3, r2
 8001834:	d00c      	beq.n	8001850 <theCode+0x6c>
 8001836:	2390      	movs	r3, #144	@ 0x90
 8001838:	05db      	lsls	r3, r3, #23
 800183a:	2140      	movs	r1, #64	@ 0x40
 800183c:	0018      	movs	r0, r3
 800183e:	f000 ffc5 	bl	80027cc <HAL_GPIO_ReadPin>
 8001842:	0003      	movs	r3, r0
 8001844:	001a      	movs	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4293      	cmp	r3, r2
 800184a:	d001      	beq.n	8001850 <theCode+0x6c>
        return 1;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <theCode+0x6e>
    } else {
        return 0;
 8001850:	2300      	movs	r3, #0
    }
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	48000400 	.word	0x48000400

08001860 <ButtonToDec>:

int ButtonToDec() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	int d = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	011a      	lsls	r2, r3, #4
 800186e:	2390      	movs	r3, #144	@ 0x90
 8001870:	05db      	lsls	r3, r3, #23
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f000 ffa9 	bl	80027cc <HAL_GPIO_ReadPin>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d102      	bne.n	8001884 <ButtonToDec+0x24>
		d = d + 1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3301      	adds	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) {
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <ButtonToDec+0x70>)
 8001886:	2140      	movs	r1, #64	@ 0x40
 8001888:	0018      	movs	r0, r3
 800188a:	f000 ff9f 	bl	80027cc <HAL_GPIO_ReadPin>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d102      	bne.n	8001898 <ButtonToDec+0x38>
		d = d + 2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3302      	adds	r3, #2
 8001896:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0) {
 8001898:	2390      	movs	r3, #144	@ 0x90
 800189a:	05db      	lsls	r3, r3, #23
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 ff94 	bl	80027cc <HAL_GPIO_ReadPin>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d102      	bne.n	80018ae <ButtonToDec+0x4e>
		d = d + 4;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0) {
 80018ae:	2390      	movs	r3, #144	@ 0x90
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 ff89 	bl	80027cc <HAL_GPIO_ReadPin>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d102      	bne.n	80018c4 <ButtonToDec+0x64>
		d = d + 8;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3308      	adds	r3, #8
 80018c2:	607b      	str	r3, [r7, #4]
	}
	return d;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	48000400 	.word	0x48000400

080018d4 <allState>:

void allState(int state) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	2390      	movs	r3, #144	@ 0x90
 80018e2:	05db      	lsls	r3, r3, #23
 80018e4:	2104      	movs	r1, #4
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 ff8d 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, state);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	2390      	movs	r3, #144	@ 0x90
 80018f2:	05db      	lsls	r3, r3, #23
 80018f4:	2140      	movs	r1, #64	@ 0x40
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 ff85 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, state);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	2390      	movs	r3, #144	@ 0x90
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	0018      	movs	r0, r3
 8001908:	f000 ff7d 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	0119      	lsls	r1, r3, #4
 8001914:	2390      	movs	r3, #144	@ 0x90
 8001916:	05db      	lsls	r3, r3, #23
 8001918:	0018      	movs	r0, r3
 800191a:	f000 ff74 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, state);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	0159      	lsls	r1, r3, #5
 8001926:	2390      	movs	r3, #144	@ 0x90
 8001928:	05db      	lsls	r3, r3, #23
 800192a:	0018      	movs	r0, r3
 800192c:	f000 ff6b 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, state);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <allState+0x80>)
 8001936:	001a      	movs	r2, r3
 8001938:	2102      	movs	r1, #2
 800193a:	f000 ff64 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4804      	ldr	r0, [pc, #16]	@ (8001954 <allState+0x80>)
 8001944:	001a      	movs	r2, r3
 8001946:	2140      	movs	r1, #64	@ 0x40
 8001948:	f000 ff5d 	bl	8002806 <HAL_GPIO_WritePin>
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	48000400 	.word	0x48000400

08001958 <BeepX>:

void BeepX(float seconds, float beepNumPerSecond) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	float j = seconds * beepNumPerSecond;
 8001962:	6839      	ldr	r1, [r7, #0]
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff f81d 	bl	80009a4 <__aeabi_fmul>
 800196a:	1c03      	adds	r3, r0, #0
 800196c:	613b      	str	r3, [r7, #16]
	float t = 1000.0 / beepNumPerSecond;
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	481e      	ldr	r0, [pc, #120]	@ (80019ec <BeepX+0x94>)
 8001972:	f7fe fe31 	bl	80005d8 <__aeabi_fdiv>
 8001976:	1c03      	adds	r3, r0, #0
 8001978:	60fb      	str	r3, [r7, #12]
	float x = t/2.0;
 800197a:	2180      	movs	r1, #128	@ 0x80
 800197c:	05c9      	lsls	r1, r1, #23
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7fe fe2a 	bl	80005d8 <__aeabi_fdiv>
 8001984:	1c03      	adds	r3, r0, #0
 8001986:	60bb      	str	r3, [r7, #8]
	for (float i = 0; i <= j; i++){
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e022      	b.n	80019d4 <BeepX+0x7c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800198e:	2390      	movs	r3, #144	@ 0x90
 8001990:	05db      	lsls	r3, r3, #23
 8001992:	2201      	movs	r2, #1
 8001994:	2108      	movs	r1, #8
 8001996:	0018      	movs	r0, r3
 8001998:	f000 ff35 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f7fe fc79 	bl	8000294 <__aeabi_f2uiz>
 80019a2:	0003      	movs	r3, r0
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 fcc9 	bl	800233c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80019aa:	2390      	movs	r3, #144	@ 0x90
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	2200      	movs	r2, #0
 80019b0:	2108      	movs	r1, #8
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 ff27 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7fe fc6b 	bl	8000294 <__aeabi_f2uiz>
 80019be:	0003      	movs	r3, r0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 fcbb 	bl	800233c <HAL_Delay>
	for (float i = 0; i <= j; i++){
 80019c6:	21fe      	movs	r1, #254	@ 0xfe
 80019c8:	0589      	lsls	r1, r1, #22
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7fe fc7a 	bl	80002c4 <__aeabi_fadd>
 80019d0:	1c03      	adds	r3, r0, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	6939      	ldr	r1, [r7, #16]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7fe fc3e 	bl	8000258 <__aeabi_fcmple>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d1d6      	bne.n	800198e <BeepX+0x36>
	}
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b006      	add	sp, #24
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	447a0000 	.word	0x447a0000

080019f0 <buttonsNlights>:

void buttonsNlights() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	005a      	lsls	r2, r3, #1
 80019f8:	2390      	movs	r3, #144	@ 0x90
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 fee4 	bl	80027cc <HAL_GPIO_ReadPin>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d10c      	bne.n	8001a22 <buttonsNlights+0x32>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	011a      	lsls	r2, r3, #4
 8001a0c:	2390      	movs	r3, #144	@ 0x90
 8001a0e:	05db      	lsls	r3, r3, #23
 8001a10:	0011      	movs	r1, r2
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 ff14 	bl	8002840 <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <buttonsNlights+0xa4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fc8d 	bl	800233c <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8001a22:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <buttonsNlights+0xa8>)
 8001a24:	2110      	movs	r1, #16
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fed0 	bl	80027cc <HAL_GPIO_ReadPin>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d109      	bne.n	8001a44 <buttonsNlights+0x54>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <buttonsNlights+0xa8>)
 8001a32:	2140      	movs	r1, #64	@ 0x40
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 ff03 	bl	8002840 <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <buttonsNlights+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fc7c 	bl	800233c <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 8001a44:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <buttonsNlights+0xa8>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 febf 	bl	80027cc <HAL_GPIO_ReadPin>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d10a      	bne.n	8001a68 <buttonsNlights+0x78>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001a52:	2390      	movs	r3, #144	@ 0x90
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 fef1 	bl	8002840 <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <buttonsNlights+0xa4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 fc6a 	bl	800233c <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001a68:	2390      	movs	r3, #144	@ 0x90
 8001a6a:	05db      	lsls	r3, r3, #23
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 feac 	bl	80027cc <HAL_GPIO_ReadPin>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d10a      	bne.n	8001a8e <buttonsNlights+0x9e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001a78:	2390      	movs	r3, #144	@ 0x90
 8001a7a:	05db      	lsls	r3, r3, #23
 8001a7c:	2140      	movs	r1, #64	@ 0x40
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fede 	bl	8002840 <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <buttonsNlights+0xa4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fc57 	bl	800233c <HAL_Delay>
	}
}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000000 	.word	0x20000000
 8001a98:	48000400 	.word	0x48000400

08001a9c <ErrorSound>:

void ErrorSound() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	BeepX(0.5,698);
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <ErrorSound+0x40>)
 8001aa2:	23fc      	movs	r3, #252	@ 0xfc
 8001aa4:	059b      	lsls	r3, r3, #22
 8001aa6:	1c11      	adds	r1, r2, #0
 8001aa8:	1c18      	adds	r0, r3, #0
 8001aaa:	f7ff ff55 	bl	8001958 <BeepX>
	BeepX(0.5,520);
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <ErrorSound+0x44>)
 8001ab0:	23fc      	movs	r3, #252	@ 0xfc
 8001ab2:	059b      	lsls	r3, r3, #22
 8001ab4:	1c11      	adds	r1, r2, #0
 8001ab6:	1c18      	adds	r0, r3, #0
 8001ab8:	f7ff ff4e 	bl	8001958 <BeepX>
	BeepX(0.5,350);
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <ErrorSound+0x48>)
 8001abe:	23fc      	movs	r3, #252	@ 0xfc
 8001ac0:	059b      	lsls	r3, r3, #22
 8001ac2:	1c11      	adds	r1, r2, #0
 8001ac4:	1c18      	adds	r0, r3, #0
 8001ac6:	f7ff ff47 	bl	8001958 <BeepX>
	HAL_Delay(1000);
 8001aca:	23fa      	movs	r3, #250	@ 0xfa
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 fc34 	bl	800233c <HAL_Delay>
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	442e8000 	.word	0x442e8000
 8001ae0:	44020000 	.word	0x44020000
 8001ae4:	43af0000 	.word	0x43af0000

08001ae8 <platform_write>:
}

//static uint8_t tx_buffer[1000];

/** Please note that is MANDATORY: return 0 -> no Error.**/
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	0008      	movs	r0, r1
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	0019      	movs	r1, r3
 8001af6:	240b      	movs	r4, #11
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	1c02      	adds	r2, r0, #0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	2508      	movs	r5, #8
 8001b00:	197b      	adds	r3, r7, r5
 8001b02:	1c0a      	adds	r2, r1, #0
 8001b04:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8001b06:	0020      	movs	r0, r4
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	183a      	adds	r2, r7, r0
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	4249      	negs	r1, r1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, 0x30, reg, 1, (uint8_t*) bufp, len, 1000); //define 8bit
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	23fa      	movs	r3, #250	@ 0xfa
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	197b      	adds	r3, r7, r5
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2130      	movs	r1, #48	@ 0x30
 8001b32:	f000 ff47 	bl	80029c4 <HAL_I2C_Mem_Write>
}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bdb0      	pop	{r4, r5, r7, pc}

08001b40 <platform_read>:

int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	0008      	movs	r0, r1
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	240b      	movs	r4, #11
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	1c02      	adds	r2, r0, #0
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	2508      	movs	r5, #8
 8001b58:	197b      	adds	r3, r7, r5
 8001b5a:	1c0a      	adds	r2, r1, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8001b5e:	0020      	movs	r0, r4
 8001b60:	183b      	adds	r3, r7, r0
 8001b62:	183a      	adds	r2, r7, r0
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	4249      	negs	r1, r1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, 0x30, reg, 1, bufp, len, 1000);
 8001b6e:	183b      	adds	r3, r7, r0
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	23fa      	movs	r3, #250	@ 0xfa
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	197b      	adds	r3, r7, r5
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2301      	movs	r3, #1
 8001b88:	2130      	movs	r1, #48	@ 0x30
 8001b8a:	f001 f849 	bl	8002c20 <HAL_I2C_Mem_Read>
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}

08001b98 <platform_delay>:

/** Optional (may be required by driver) **/
void platform_delay(uint32_t millisec) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fbca 	bl	800233c <HAL_Delay>
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <UpdateValues>:


void UpdateValues(void)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8001bb6:	2408      	movs	r4, #8
 8001bb8:	193b      	adds	r3, r7, r4
 8001bba:	4a43      	ldr	r2, [pc, #268]	@ (8001cc8 <UpdateValues+0x118>)
 8001bbc:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	4a42      	ldr	r2, [pc, #264]	@ (8001ccc <UpdateValues+0x11c>)
 8001bc2:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	4a42      	ldr	r2, [pc, #264]	@ (8001cd0 <UpdateValues+0x120>)
 8001bc8:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	4a41      	ldr	r2, [pc, #260]	@ (8001cd4 <UpdateValues+0x124>)
 8001bce:	60da      	str	r2, [r3, #12]
  platform_delay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f7ff ffe1 	bl	8001b98 <platform_delay>
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 8001bd6:	4a40      	ldr	r2, [pc, #256]	@ (8001cd8 <UpdateValues+0x128>)
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	0011      	movs	r1, r2
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fdef 	bl	80017c0 <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID) {
 8001be2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <UpdateValues+0x128>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b33      	cmp	r3, #51	@ 0x33
 8001be8:	d002      	beq.n	8001bf0 <UpdateValues+0x40>
    while (1) {
    	ErrorSound();
 8001bea:	f7ff ff57 	bl	8001a9c <ErrorSound>
 8001bee:	e7fc      	b.n	8001bea <UpdateValues+0x3a>
    }
  }

  /* Enable Block Data Update. */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001bf0:	2408      	movs	r4, #8
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff fd49 	bl	800168e <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	2102      	movs	r1, #2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff fce6 	bl	80015d2 <lis3dh_data_rate_set>
  /* Set full scale to 2g. */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	2100      	movs	r1, #0
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fd0f 	bl	800162e <lis3dh_full_scale_set>
  /* Enable temperature sensor. */
  lis3dh_aux_adc_set(&dev_ctx, LIS3DH_AUX_ON_TEMPERATURE);
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	2103      	movs	r1, #3
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fc24 	bl	8001462 <lis3dh_aux_adc_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fc6e 	bl	8001500 <lis3dh_operating_mode_set>

  lis3dh_reg_t reg;
  /* Read output only if new value available */
  lis3dh_xl_data_ready_get(&dev_ctx, &reg.byte);
 8001c24:	1d3a      	adds	r2, r7, #4
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	0011      	movs	r1, r2
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fd5d 	bl	80016ea <lis3dh_xl_data_ready_get>

    if (reg.byte) {
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d026      	beq.n	8001c86 <UpdateValues+0xd6>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <UpdateValues+0x12c>)
 8001c3a:	2206      	movs	r2, #6
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f002 f9c2 	bl	8003fc8 <memset>
      lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <UpdateValues+0x12c>)
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	0011      	movs	r1, r2
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7ff fd68 	bl	8001720 <lis3dh_acceleration_raw_get>
      acceleration_mg[0] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <UpdateValues+0x12c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	5e9b      	ldrsh	r3, [r3, r2]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff fb86 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001c5c:	1c02      	adds	r2, r0, #0
      acceleration_mg[0] =
 8001c5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <UpdateValues+0x130>)
 8001c60:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <UpdateValues+0x12c>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	5e9b      	ldrsh	r3, [r3, r2]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fb7d 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001c6e:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <UpdateValues+0x130>)
 8001c72:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <UpdateValues+0x12c>)
 8001c76:	2204      	movs	r2, #4
 8001c78:	5e9b      	ldrsh	r3, [r3, r2]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff fb74 	bl	8001368 <lis3dh_from_fs2_hr_to_mg>
 8001c80:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
 8001c82:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <UpdateValues+0x130>)
 8001c84:	609a      	str	r2, [r3, #8]
    }

    lis3dh_temp_data_ready_get(&dev_ctx, &reg.byte);
 8001c86:	1d3a      	adds	r2, r7, #4
 8001c88:	2408      	movs	r4, #8
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	0011      	movs	r1, r2
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fba6 	bl	80013e0 <lis3dh_temp_data_ready_get>

    if (reg.byte) {
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d011      	beq.n	8001cc0 <UpdateValues+0x110>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <UpdateValues+0x134>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
      lis3dh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <UpdateValues+0x134>)
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff fbb4 	bl	8001416 <lis3dh_temperature_raw_get>
      temperature_degC = lis3dh_from_lsb_hr_to_celsius(data_raw_temperature);
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <UpdateValues+0x134>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	5e9b      	ldrsh	r3, [r3, r2]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fb6f 	bl	8001398 <lis3dh_from_lsb_hr_to_celsius>
 8001cba:	1c02      	adds	r2, r0, #0
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <UpdateValues+0x138>)
 8001cbe:	601a      	str	r2, [r3, #0]
    }
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b007      	add	sp, #28
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	08001ae9 	.word	0x08001ae9
 8001ccc:	08001b41 	.word	0x08001b41
 8001cd0:	08001b99 	.word	0x08001b99
 8001cd4:	2000002c 	.word	0x2000002c
 8001cd8:	20000080 	.word	0x20000080
 8001cdc:	20000084 	.word	0x20000084
 8001ce0:	2000008c 	.word	0x2000008c
 8001ce4:	2000008a 	.word	0x2000008a
 8001ce8:	20000098 	.word	0x20000098

08001cec <BarSet>:


void BarSet(int n1, int n2, int n3, int n4) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, n1);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	0119      	lsls	r1, r3, #4
 8001d02:	2390      	movs	r3, #144	@ 0x90
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 fd7d 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, n2);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <BarSet+0x58>)
 8001d12:	001a      	movs	r2, r3
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	f000 fd76 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, n3);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	2390      	movs	r3, #144	@ 0x90
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 fd6e 	bl	8002806 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, n4);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	2390      	movs	r3, #144	@ 0x90
 8001d30:	05db      	lsls	r3, r3, #23
 8001d32:	2140      	movs	r1, #64	@ 0x40
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 fd66 	bl	8002806 <HAL_GPIO_WritePin>
}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	48000400 	.word	0x48000400

08001d48 <TempLightBar>:



void TempLightBar() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	  UpdateValues();
 8001d4c:	f7ff ff30 	bl	8001bb0 <UpdateValues>
	  if (temperature_degC > 32) {
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <TempLightBar+0xa8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2184      	movs	r1, #132	@ 0x84
 8001d56:	05c9      	lsls	r1, r1, #23
 8001d58:	1c18      	adds	r0, r3, #0
 8001d5a:	f7fe fa87 	bl	800026c <__aeabi_fcmpgt>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d006      	beq.n	8001d70 <TempLightBar+0x28>
		  BarSet(0,0,0,0);
 8001d62:	2300      	movs	r3, #0
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ffbf 	bl	8001cec <BarSet>
	  } else if (temperature_degC > 27.5) {
		  BarSet(1,1,1,0);
	  } else if (temperature_degC < 27.5) {
		  BarSet(1,1,1,1);
	  }
}
 8001d6e:	e03b      	b.n	8001de8 <TempLightBar+0xa0>
	  } else if (temperature_degC > 30.5) {
 8001d70:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <TempLightBar+0xa8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	491f      	ldr	r1, [pc, #124]	@ (8001df4 <TempLightBar+0xac>)
 8001d76:	1c18      	adds	r0, r3, #0
 8001d78:	f7fe fa78 	bl	800026c <__aeabi_fcmpgt>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d006      	beq.n	8001d8e <TempLightBar+0x46>
		  BarSet(1,0,0,0);
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7ff ffb0 	bl	8001cec <BarSet>
}
 8001d8c:	e02c      	b.n	8001de8 <TempLightBar+0xa0>
	  } else if (temperature_degC > 29) {
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <TempLightBar+0xa8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4919      	ldr	r1, [pc, #100]	@ (8001df8 <TempLightBar+0xb0>)
 8001d94:	1c18      	adds	r0, r3, #0
 8001d96:	f7fe fa69 	bl	800026c <__aeabi_fcmpgt>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d006      	beq.n	8001dac <TempLightBar+0x64>
		  BarSet(1,1,0,0);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	2101      	movs	r1, #1
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ffa1 	bl	8001cec <BarSet>
}
 8001daa:	e01d      	b.n	8001de8 <TempLightBar+0xa0>
	  } else if (temperature_degC > 27.5) {
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <TempLightBar+0xa8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4912      	ldr	r1, [pc, #72]	@ (8001dfc <TempLightBar+0xb4>)
 8001db2:	1c18      	adds	r0, r3, #0
 8001db4:	f7fe fa5a 	bl	800026c <__aeabi_fcmpgt>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d006      	beq.n	8001dca <TempLightBar+0x82>
		  BarSet(1,1,1,0);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff ff92 	bl	8001cec <BarSet>
}
 8001dc8:	e00e      	b.n	8001de8 <TempLightBar+0xa0>
	  } else if (temperature_degC < 27.5) {
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <TempLightBar+0xa8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	490b      	ldr	r1, [pc, #44]	@ (8001dfc <TempLightBar+0xb4>)
 8001dd0:	1c18      	adds	r0, r3, #0
 8001dd2:	f7fe fa37 	bl	8000244 <__aeabi_fcmplt>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d100      	bne.n	8001ddc <TempLightBar+0x94>
}
 8001dda:	e005      	b.n	8001de8 <TempLightBar+0xa0>
		  BarSet(1,1,1,1);
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2201      	movs	r2, #1
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff ff82 	bl	8001cec <BarSet>
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	20000098 	.word	0x20000098
 8001df4:	41f40000 	.word	0x41f40000
 8001df8:	41e80000 	.word	0x41e80000
 8001dfc:	41dc0000 	.word	0x41dc0000

08001e00 <AccelDetecting>:


void AccelDetecting(int sensitivity) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	@ 0x38
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	  BarSet(0,0,0,0);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ff6c 	bl	8001cec <BarSet>
	  HAL_Delay(500);
 8001e14:	23fa      	movs	r3, #250	@ 0xfa
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f000 fa8f 	bl	800233c <HAL_Delay>
	  BarSet(1,0,0,0);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff ff61 	bl	8001cec <BarSet>
	  HAL_Delay(500);
 8001e2a:	23fa      	movs	r3, #250	@ 0xfa
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 fa84 	bl	800233c <HAL_Delay>
	  BarSet(1,1,0,0);
 8001e34:	2300      	movs	r3, #0
 8001e36:	2200      	movs	r2, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff ff56 	bl	8001cec <BarSet>
	  HAL_Delay(500);
 8001e40:	23fa      	movs	r3, #250	@ 0xfa
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fa79 	bl	800233c <HAL_Delay>
	  BarSet(1,1,1,0);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff ff4b 	bl	8001cec <BarSet>
	  HAL_Delay(500);
 8001e56:	23fa      	movs	r3, #250	@ 0xfa
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 fa6e 	bl	800233c <HAL_Delay>
	  BarSet(1,1,1,1);
 8001e60:	2301      	movs	r3, #1
 8001e62:	2201      	movs	r2, #1
 8001e64:	2101      	movs	r1, #1
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff ff40 	bl	8001cec <BarSet>
	  UpdateValues();
 8001e6c:	f7ff fea0 	bl	8001bb0 <UpdateValues>
	  int Xinit = acceleration_mg[0];
 8001e70:	4b7a      	ldr	r3, [pc, #488]	@ (800205c <AccelDetecting+0x25c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c18      	adds	r0, r3, #0
 8001e76:	f7ff f877 	bl	8000f68 <__aeabi_f2iz>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
	  int Yinit = acceleration_mg[1];
 8001e7e:	4b77      	ldr	r3, [pc, #476]	@ (800205c <AccelDetecting+0x25c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	1c18      	adds	r0, r3, #0
 8001e84:	f7ff f870 	bl	8000f68 <__aeabi_f2iz>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	633b      	str	r3, [r7, #48]	@ 0x30
	  int Zinit = acceleration_mg[2];
 8001e8c:	4b73      	ldr	r3, [pc, #460]	@ (800205c <AccelDetecting+0x25c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	1c18      	adds	r0, r3, #0
 8001e92:	f7ff f869 	bl	8000f68 <__aeabi_f2iz>
 8001e96:	0003      	movs	r3, r0
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  int j = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  while (j == 1) {
 8001e9e:	e0d4      	b.n	800204a <AccelDetecting+0x24a>
		  HAL_Delay(20);
 8001ea0:	2014      	movs	r0, #20
 8001ea2:	f000 fa4b 	bl	800233c <HAL_Delay>
		  UpdateValues();
 8001ea6:	f7ff fe83 	bl	8001bb0 <UpdateValues>
		  HAL_Delay(20);
 8001eaa:	2014      	movs	r0, #20
 8001eac:	f000 fa46 	bl	800233c <HAL_Delay>
		  int Xcurr = acceleration_mg[0];
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800205c <AccelDetecting+0x25c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1c18      	adds	r0, r3, #0
 8001eb6:	f7ff f857 	bl	8000f68 <__aeabi_f2iz>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
		  int Ycurr = acceleration_mg[1];
 8001ebe:	4b67      	ldr	r3, [pc, #412]	@ (800205c <AccelDetecting+0x25c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	1c18      	adds	r0, r3, #0
 8001ec4:	f7ff f850 	bl	8000f68 <__aeabi_f2iz>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	623b      	str	r3, [r7, #32]
		  int Zcurr = acceleration_mg[2];
 8001ecc:	4b63      	ldr	r3, [pc, #396]	@ (800205c <AccelDetecting+0x25c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	1c18      	adds	r0, r3, #0
 8001ed2:	f7ff f849 	bl	8000f68 <__aeabi_f2iz>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61fb      	str	r3, [r7, #28]
		  int Trig5 = 30 * sensitivity;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	0013      	movs	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
		  int Trig4 = 25 * sensitivity;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	0013      	movs	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	189b      	adds	r3, r3, r2
 8001eee:	009a      	lsls	r2, r3, #2
 8001ef0:	189b      	adds	r3, r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
		  int Trig3 = 20 * sensitivity;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
		  int Trig2 = 15 * sensitivity;
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	0013      	movs	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
		  int Trig1 = 10 * sensitivity;
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	189b      	adds	r3, r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]

		  if (Xcurr - Xinit > Trig5 || Ycurr - Yinit > Trig5 || Zcurr - Zinit > Trig5) {
 8001f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	db0b      	blt.n	8001f3a <AccelDetecting+0x13a>
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	db05      	blt.n	8001f3a <AccelDetecting+0x13a>
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	da0b      	bge.n	8001f52 <AccelDetecting+0x152>
			  //BeepX(1,40);
			  allState(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fcca 	bl	80018d4 <allState>
			  HAL_Delay(600);
 8001f40:	2396      	movs	r3, #150	@ 0x96
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f9f9 	bl	800233c <HAL_Delay>
			  allState(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fcc2 	bl	80018d4 <allState>
 8001f50:	e07b      	b.n	800204a <AccelDetecting+0x24a>
			  //HAL_Delay(500);
			  //j = 2;
		  }
		  else if (Xcurr - Xinit > Trig4 || Ycurr - Yinit > Trig4 || Zcurr - Zinit > Trig4) {
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	db0b      	blt.n	8001f76 <AccelDetecting+0x176>
 8001f5e:	6a3a      	ldr	r2, [r7, #32]
 8001f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	db05      	blt.n	8001f76 <AccelDetecting+0x176>
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	da06      	bge.n	8001f84 <AccelDetecting+0x184>
			  BarSet(0,0,0,0);
 8001f76:	2300      	movs	r3, #0
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff feb5 	bl	8001cec <BarSet>
 8001f82:	e062      	b.n	800204a <AccelDetecting+0x24a>
		  }
		  else if (Xcurr - Xinit > Trig3 || Ycurr - Yinit > Trig3 || Zcurr - Zinit > Trig3) {
 8001f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	db0b      	blt.n	8001fa8 <AccelDetecting+0x1a8>
 8001f90:	6a3a      	ldr	r2, [r7, #32]
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	db05      	blt.n	8001fa8 <AccelDetecting+0x1a8>
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	da06      	bge.n	8001fb6 <AccelDetecting+0x1b6>
			  BarSet(1,0,0,0);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fe9c 	bl	8001cec <BarSet>
 8001fb4:	e049      	b.n	800204a <AccelDetecting+0x24a>
		  }
		  else if (Xcurr - Xinit > Trig2 || Ycurr - Yinit > Trig2 || Zcurr - Zinit > Trig2) {
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	db0b      	blt.n	8001fda <AccelDetecting+0x1da>
 8001fc2:	6a3a      	ldr	r2, [r7, #32]
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	db05      	blt.n	8001fda <AccelDetecting+0x1da>
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	da06      	bge.n	8001fe8 <AccelDetecting+0x1e8>
			  BarSet(1,1,0,0);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fe83 	bl	8001cec <BarSet>
 8001fe6:	e030      	b.n	800204a <AccelDetecting+0x24a>
		  }
		  else if (Xcurr - Xinit > Trig1 || Ycurr - Yinit > Trig1 || Zcurr - Zinit > Trig1) {
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	db0b      	blt.n	800200c <AccelDetecting+0x20c>
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	db05      	blt.n	800200c <AccelDetecting+0x20c>
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	da06      	bge.n	800201a <AccelDetecting+0x21a>
			  BarSet(1,1,1,0);
 800200c:	2300      	movs	r3, #0
 800200e:	2201      	movs	r2, #1
 8002010:	2101      	movs	r1, #1
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff fe6a 	bl	8001cec <BarSet>
 8002018:	e017      	b.n	800204a <AccelDetecting+0x24a>
		  }
		  else if (Xcurr - Xinit < Trig1 || Ycurr - Yinit < Trig1 || Zcurr - Zinit < Trig1) {
 800201a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	dc0b      	bgt.n	800203e <AccelDetecting+0x23e>
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	dc05      	bgt.n	800203e <AccelDetecting+0x23e>
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	dd05      	ble.n	800204a <AccelDetecting+0x24a>
			  BarSet(1,1,1,1);
 800203e:	2301      	movs	r3, #1
 8002040:	2201      	movs	r2, #1
 8002042:	2101      	movs	r1, #1
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff fe51 	bl	8001cec <BarSet>
	  while (j == 1) {
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	2b01      	cmp	r3, #1
 800204e:	d100      	bne.n	8002052 <AccelDetecting+0x252>
 8002050:	e726      	b.n	8001ea0 <AccelDetecting+0xa0>
		  }

	  }
}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b00e      	add	sp, #56	@ 0x38
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000008c 	.word	0x2000008c

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002066:	f000 f905 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206a:	f000 f83a 	bl	80020e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206e:	f7ff f805 	bl	800107c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002072:	f7ff f899 	bl	80011a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  allState(1);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff fc2c 	bl	80018d4 <allState>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Converts button presses to LED toggles
	  buttonsNlights();
 800207c:	f7ff fcb8 	bl	80019f0 <buttonsNlights>
	  // If a code is entered, will convert from binary to decimal (sensitivity level 1-15)
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0) != 1) {
 8002080:	2390      	movs	r3, #144	@ 0x90
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	2101      	movs	r1, #1
 8002086:	0018      	movs	r0, r3
 8002088:	f000 fba0 	bl	80027cc <HAL_GPIO_ReadPin>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d114      	bne.n	80020ba <main+0x5a>
 8002090:	2300      	movs	r3, #0
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fba4 	bl	80017e4 <theCode>
 800209c:	0003      	movs	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d00b      	beq.n	80020ba <main+0x5a>
		  int sense = ButtonToDec();
 80020a2:	f7ff fbdd 	bl	8001860 <ButtonToDec>
 80020a6:	0003      	movs	r3, r0
 80020a8:	607b      	str	r3, [r7, #4]
		  AccelDetecting(sense);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fea7 	bl	8001e00 <AccelDetecting>
		  allState(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff fc0e 	bl	80018d4 <allState>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0) != 1) {
 80020b8:	e012      	b.n	80020e0 <main+0x80>
	  // If no code entered, will display the temperature of the board with the 4 LEDs
	  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0)){
 80020ba:	2390      	movs	r3, #144	@ 0x90
 80020bc:	05db      	lsls	r3, r3, #23
 80020be:	2101      	movs	r1, #1
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fb83 	bl	80027cc <HAL_GPIO_ReadPin>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d1d8      	bne.n	800207c <main+0x1c>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fb87 	bl	80017e4 <theCode>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d0d0      	beq.n	800207c <main+0x1c>
		  while (1) {
			  TempLightBar();
 80020da:	f7ff fe35 	bl	8001d48 <TempLightBar>
 80020de:	e7fc      	b.n	80020da <main+0x7a>
	  buttonsNlights();
 80020e0:	e7cc      	b.n	800207c <main+0x1c>

080020e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b095      	sub	sp, #84	@ 0x54
 80020e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e8:	2420      	movs	r4, #32
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	0018      	movs	r0, r3
 80020ee:	2330      	movs	r3, #48	@ 0x30
 80020f0:	001a      	movs	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	f001 ff68 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	2310      	movs	r3, #16
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	0018      	movs	r0, r3
 80020fe:	2310      	movs	r3, #16
 8002100:	001a      	movs	r2, r3
 8002102:	2100      	movs	r1, #0
 8002104:	f001 ff60 	bl	8003fc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002108:	003b      	movs	r3, r7
 800210a:	0018      	movs	r0, r3
 800210c:	2310      	movs	r3, #16
 800210e:	001a      	movs	r2, r3
 8002110:	2100      	movs	r1, #0
 8002112:	f001 ff59 	bl	8003fc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002116:	0021      	movs	r1, r4
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2201      	movs	r2, #1
 8002122:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2210      	movs	r2, #16
 8002128:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002130:	187b      	adds	r3, r7, r1
 8002132:	0018      	movs	r0, r3
 8002134:	f001 fa3c 	bl	80035b0 <HAL_RCC_OscConfig>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800213c:	f000 f828 	bl	8002190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002140:	2110      	movs	r1, #16
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800215a:	187b      	adds	r3, r7, r1
 800215c:	2100      	movs	r1, #0
 800215e:	0018      	movs	r0, r3
 8002160:	f001 fd40 	bl	8003be4 <HAL_RCC_ClockConfig>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002168:	f000 f812 	bl	8002190 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800216c:	003b      	movs	r3, r7
 800216e:	2220      	movs	r2, #32
 8002170:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002172:	003b      	movs	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	003b      	movs	r3, r7
 800217a:	0018      	movs	r0, r3
 800217c:	f001 fe56 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002184:	f000 f804 	bl	8002190 <Error_Handler>
  }
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b015      	add	sp, #84	@ 0x54
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	e7fd      	b.n	8002198 <Error_Handler+0x8>

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <HAL_MspInit+0x44>)
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_MspInit+0x44>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	619a      	str	r2, [r3, #24]
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_MspInit+0x44>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <HAL_MspInit+0x44>)
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_MspInit+0x44>)
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	0549      	lsls	r1, r1, #21
 80021c4:	430a      	orrs	r2, r1
 80021c6:	61da      	str	r2, [r3, #28]
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_MspInit+0x44>)
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	055b      	lsls	r3, r3, #21
 80021d0:	4013      	ands	r3, r2
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	40021000 	.word	0x40021000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	e7fd      	b.n	80021e8 <NMI_Handler+0x4>

080021ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	e7fd      	b.n	80021f0 <HardFault_Handler+0x4>

080021f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f000 f87a 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002220:	480d      	ldr	r0, [pc, #52]	@ (8002258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002222:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002224:	f7ff fff7 	bl	8002216 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490d      	ldr	r1, [pc, #52]	@ (8002260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0a      	ldr	r4, [pc, #40]	@ (800226c <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800224e:	f001 fec3 	bl	8003fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7ff ff05 	bl	8002060 <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
  ldr   r0, =_estack
 8002258:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002264:	080040ec 	.word	0x080040ec
  ldr r2, =_sbss
 8002268:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800226c:	200000a0 	.word	0x200000a0

08002270 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_IRQHandler>
	...

08002274 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_Init+0x24>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_Init+0x24>)
 800227e:	2110      	movs	r1, #16
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f809 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228a:	f7ff ff87 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_InitTick+0x5c>)
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <HAL_InitTick+0x60>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	0019      	movs	r1, r3
 80022ae:	23fa      	movs	r3, #250	@ 0xfa
 80022b0:	0098      	lsls	r0, r3, #2
 80022b2:	f7fd ff29 	bl	8000108 <__udivsi3>
 80022b6:	0003      	movs	r3, r0
 80022b8:	0019      	movs	r1, r3
 80022ba:	0020      	movs	r0, r4
 80022bc:	f7fd ff24 	bl	8000108 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f905 	bl	80024d2 <HAL_SYSTICK_Config>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e00f      	b.n	80022f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d80b      	bhi.n	80022ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	2301      	movs	r3, #1
 80022da:	425b      	negs	r3, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 f8e2 	bl	80024a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_InitTick+0x64>)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b003      	add	sp, #12
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	20000004 	.word	0x20000004
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_IncTick+0x1c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	001a      	movs	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_IncTick+0x20>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	18d2      	adds	r2, r2, r3
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_IncTick+0x20>)
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	2000000c 	.word	0x2000000c
 8002324:	2000009c 	.word	0x2000009c

08002328 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b02      	ldr	r3, [pc, #8]	@ (8002338 <HAL_GetTick+0x10>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	2000009c 	.word	0x2000009c

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fff0 	bl	8002328 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3301      	adds	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	001a      	movs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	189b      	adds	r3, r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	f7ff ffe0 	bl	8002328 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	46c0      	nop			@ (mov r8, r8)
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	2000000c 	.word	0x2000000c

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b7f      	cmp	r3, #127	@ 0x7f
 8002398:	d828      	bhi.n	80023ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239a:	4a2f      	ldr	r2, [pc, #188]	@ (8002458 <__NVIC_SetPriority+0xd4>)
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	33c0      	adds	r3, #192	@ 0xc0
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	589b      	ldr	r3, [r3, r2]
 80023aa:	1dfa      	adds	r2, r7, #7
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	0011      	movs	r1, r2
 80023b0:	2203      	movs	r2, #3
 80023b2:	400a      	ands	r2, r1
 80023b4:	00d2      	lsls	r2, r2, #3
 80023b6:	21ff      	movs	r1, #255	@ 0xff
 80023b8:	4091      	lsls	r1, r2
 80023ba:	000a      	movs	r2, r1
 80023bc:	43d2      	mvns	r2, r2
 80023be:	401a      	ands	r2, r3
 80023c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	22ff      	movs	r2, #255	@ 0xff
 80023c8:	401a      	ands	r2, r3
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	0018      	movs	r0, r3
 80023d0:	2303      	movs	r3, #3
 80023d2:	4003      	ands	r3, r0
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d8:	481f      	ldr	r0, [pc, #124]	@ (8002458 <__NVIC_SetPriority+0xd4>)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	430a      	orrs	r2, r1
 80023e4:	33c0      	adds	r3, #192	@ 0xc0
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ea:	e031      	b.n	8002450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ec:	4a1b      	ldr	r2, [pc, #108]	@ (800245c <__NVIC_SetPriority+0xd8>)
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	0019      	movs	r1, r3
 80023f4:	230f      	movs	r3, #15
 80023f6:	400b      	ands	r3, r1
 80023f8:	3b08      	subs	r3, #8
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3306      	adds	r3, #6
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	18d3      	adds	r3, r2, r3
 8002402:	3304      	adds	r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1dfa      	adds	r2, r7, #7
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	0011      	movs	r1, r2
 800240c:	2203      	movs	r2, #3
 800240e:	400a      	ands	r2, r1
 8002410:	00d2      	lsls	r2, r2, #3
 8002412:	21ff      	movs	r1, #255	@ 0xff
 8002414:	4091      	lsls	r1, r2
 8002416:	000a      	movs	r2, r1
 8002418:	43d2      	mvns	r2, r2
 800241a:	401a      	ands	r2, r3
 800241c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	22ff      	movs	r2, #255	@ 0xff
 8002424:	401a      	ands	r2, r3
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	0018      	movs	r0, r3
 800242c:	2303      	movs	r3, #3
 800242e:	4003      	ands	r3, r0
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	4809      	ldr	r0, [pc, #36]	@ (800245c <__NVIC_SetPriority+0xd8>)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	001c      	movs	r4, r3
 800243c:	230f      	movs	r3, #15
 800243e:	4023      	ands	r3, r4
 8002440:	3b08      	subs	r3, #8
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	3306      	adds	r3, #6
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	18c3      	adds	r3, r0, r3
 800244c:	3304      	adds	r3, #4
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b003      	add	sp, #12
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	045b      	lsls	r3, r3, #17
 8002470:	429a      	cmp	r2, r3
 8002472:	d301      	bcc.n	8002478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002474:	2301      	movs	r3, #1
 8002476:	e010      	b.n	800249a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002478:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <SysTick_Config+0x44>)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	3a01      	subs	r2, #1
 800247e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002480:	2301      	movs	r3, #1
 8002482:	425b      	negs	r3, r3
 8002484:	2103      	movs	r1, #3
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff ff7c 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <SysTick_Config+0x44>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <SysTick_Config+0x44>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	210f      	movs	r1, #15
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	1c02      	adds	r2, r0, #0
 80024b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b004      	add	sp, #16
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff ffbf 	bl	8002460 <SysTick_Config>
 80024e2:	0003      	movs	r3, r0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e14f      	b.n	800279c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4091      	lsls	r1, r2
 8002506:	000a      	movs	r2, r1
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d100      	bne.n	8002514 <HAL_GPIO_Init+0x28>
 8002512:	e140      	b.n	8002796 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2203      	movs	r2, #3
 800251a:	4013      	ands	r3, r2
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	409a      	lsls	r2, r3
 800253a:	0013      	movs	r3, r2
 800253c:	43da      	mvns	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	409a      	lsls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
 8002568:	0013      	movs	r3, r2
 800256a:	43da      	mvns	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	2201      	movs	r2, #1
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	4013      	ands	r3, r2
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	58d3      	ldr	r3, [r2, r3]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	43da      	mvns	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2107      	movs	r1, #7
 8002602:	400b      	ands	r3, r1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	409a      	lsls	r2, r3
 800262c:	0013      	movs	r3, r2
 800262e:	43da      	mvns	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	401a      	ands	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	23c0      	movs	r3, #192	@ 0xc0
 8002658:	029b      	lsls	r3, r3, #10
 800265a:	4013      	ands	r3, r2
 800265c:	d100      	bne.n	8002660 <HAL_GPIO_Init+0x174>
 800265e:	e09a      	b.n	8002796 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b54      	ldr	r3, [pc, #336]	@ (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_GPIO_Init+0x2c8>)
 8002666:	2101      	movs	r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	4b51      	ldr	r3, [pc, #324]	@ (80027b4 <HAL_GPIO_Init+0x2c8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x2cc>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	589b      	ldr	r3, [r3, r2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2203      	movs	r2, #3
 800268a:	4013      	ands	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	43da      	mvns	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	2390      	movs	r3, #144	@ 0x90
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x1e2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a44      	ldr	r2, [pc, #272]	@ (80027bc <HAL_GPIO_Init+0x2d0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x1de>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a43      	ldr	r2, [pc, #268]	@ (80027c0 <HAL_GPIO_Init+0x2d4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x1da>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a42      	ldr	r2, [pc, #264]	@ (80027c4 <HAL_GPIO_Init+0x2d8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x1d6>
 80026be:	2303      	movs	r3, #3
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026ce:	2300      	movs	r3, #0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	2103      	movs	r1, #3
 80026d4:	400a      	ands	r2, r1
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	@ (80027b8 <HAL_GPIO_Init+0x2cc>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ee:	4b36      	ldr	r3, [pc, #216]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	035b      	lsls	r3, r3, #13
 8002706:	4013      	ands	r3, r2
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002712:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002718:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	039b      	lsls	r3, r3, #14
 8002730:	4013      	ands	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002742:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43da      	mvns	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	4013      	ands	r3, r2
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002790:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	d000      	beq.n	80027aa <HAL_GPIO_Init+0x2be>
 80027a8:	e6a8      	b.n	80024fc <HAL_GPIO_Init+0x10>
  } 
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b006      	add	sp, #24
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010000 	.word	0x40010000
 80027bc:	48000400 	.word	0x48000400
 80027c0:	48000800 	.word	0x48000800
 80027c4:	48000c00 	.word	0x48000c00
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	000a      	movs	r2, r1
 80027d6:	1cbb      	adds	r3, r7, #2
 80027d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	1cba      	adds	r2, r7, #2
 80027e0:	8812      	ldrh	r2, [r2, #0]
 80027e2:	4013      	ands	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027e6:	230f      	movs	r3, #15
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
  }
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	0008      	movs	r0, r1
 8002810:	0011      	movs	r1, r2
 8002812:	1cbb      	adds	r3, r7, #2
 8002814:	1c02      	adds	r2, r0, #0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	1c7b      	adds	r3, r7, #1
 800281a:	1c0a      	adds	r2, r1, #0
 800281c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002826:	1cbb      	adds	r3, r7, #2
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800282e:	e003      	b.n	8002838 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	000a      	movs	r2, r1
 800284a:	1cbb      	adds	r3, r7, #2
 800284c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002854:	1cbb      	adds	r3, r7, #2
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43db      	mvns	r3, r3
 8002862:	1cb9      	adds	r1, r7, #2
 8002864:	8809      	ldrh	r1, [r1, #0]
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e08f      	b.n	80029aa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2241      	movs	r2, #65	@ 0x41
 800288e:	5c9b      	ldrb	r3, [r3, r2]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2240      	movs	r2, #64	@ 0x40
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7fe fcc1 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2241      	movs	r2, #65	@ 0x41
 80028aa:	2124      	movs	r1, #36	@ 0x24
 80028ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	438a      	bics	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	493b      	ldr	r1, [pc, #236]	@ (80029b4 <HAL_I2C_Init+0x13c>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4938      	ldr	r1, [pc, #224]	@ (80029b8 <HAL_I2C_Init+0x140>)
 80028d8:	400a      	ands	r2, r1
 80028da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d108      	bne.n	80028f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	0209      	lsls	r1, r1, #8
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e007      	b.n	8002906 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2184      	movs	r1, #132	@ 0x84
 8002900:	0209      	lsls	r1, r1, #8
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d109      	bne.n	8002922 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2180      	movs	r1, #128	@ 0x80
 800291a:	0109      	lsls	r1, r1, #4
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	e007      	b.n	8002932 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4923      	ldr	r1, [pc, #140]	@ (80029bc <HAL_I2C_Init+0x144>)
 800292e:	400a      	ands	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4920      	ldr	r1, [pc, #128]	@ (80029c0 <HAL_I2C_Init+0x148>)
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	491a      	ldr	r1, [pc, #104]	@ (80029b8 <HAL_I2C_Init+0x140>)
 800294e:	400a      	ands	r2, r1
 8002950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	431a      	orrs	r2, r3
 800295c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69d9      	ldr	r1, [r3, #28]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2241      	movs	r2, #65	@ 0x41
 8002996:	2120      	movs	r1, #32
 8002998:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2242      	movs	r2, #66	@ 0x42
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	f0ffffff 	.word	0xf0ffffff
 80029b8:	ffff7fff 	.word	0xffff7fff
 80029bc:	fffff7ff 	.word	0xfffff7ff
 80029c0:	02008000 	.word	0x02008000

080029c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	000c      	movs	r4, r1
 80029ce:	0010      	movs	r0, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	230a      	movs	r3, #10
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	1c22      	adds	r2, r4, #0
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	2308      	movs	r3, #8
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	1c02      	adds	r2, r0, #0
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	1dbb      	adds	r3, r7, #6
 80029e4:	1c0a      	adds	r2, r1, #0
 80029e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2241      	movs	r2, #65	@ 0x41
 80029ec:	5c9b      	ldrb	r3, [r3, r2]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d000      	beq.n	80029f6 <HAL_I2C_Mem_Write+0x32>
 80029f4:	e10c      	b.n	8002c10 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_I2C_Mem_Write+0x42>
 80029fc:	232c      	movs	r3, #44	@ 0x2c
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0ff      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2240      	movs	r2, #64	@ 0x40
 8002a16:	5c9b      	ldrb	r3, [r3, r2]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2C_Mem_Write+0x5c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0f8      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	@ 0x40
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a28:	f7ff fc7e 	bl	8002328 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	0219      	lsls	r1, r3, #8
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2319      	movs	r3, #25
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f000 fb0b 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e3      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2241      	movs	r2, #65	@ 0x41
 8002a4e:	2121      	movs	r1, #33	@ 0x21
 8002a50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2242      	movs	r2, #66	@ 0x42
 8002a56:	2140      	movs	r1, #64	@ 0x40
 8002a58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	222c      	movs	r2, #44	@ 0x2c
 8002a6a:	18ba      	adds	r2, r7, r2
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a76:	1dbb      	adds	r3, r7, #6
 8002a78:	881c      	ldrh	r4, [r3, #0]
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	230a      	movs	r3, #10
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	8819      	ldrh	r1, [r3, #0]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	0023      	movs	r3, r4
 8002a92:	f000 f9f9 	bl	8002e88 <I2C_RequestMemoryWrite>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2240      	movs	r2, #64	@ 0x40
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0b5      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2bff      	cmp	r3, #255	@ 0xff
 8002aae:	d911      	bls.n	8002ad4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	22ff      	movs	r2, #255	@ 0xff
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	045c      	lsls	r4, r3, #17
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	8819      	ldrh	r1, [r3, #0]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	0023      	movs	r3, r4
 8002ace:	f000 fc9d 	bl	800340c <I2C_TransferConfig>
 8002ad2:	e012      	b.n	8002afa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	049c      	lsls	r4, r3, #18
 8002ae8:	230a      	movs	r3, #10
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	8819      	ldrh	r1, [r3, #0]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	0023      	movs	r3, r4
 8002af6:	f000 fc89 	bl	800340c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 fb01 	bl	8003108 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e081      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03a      	beq.n	8002bbe <HAL_I2C_Mem_Write+0x1fa>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d136      	bne.n	8002bbe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0013      	movs	r3, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	f000 fa7b 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e053      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2bff      	cmp	r3, #255	@ 0xff
 8002b72:	d911      	bls.n	8002b98 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	045c      	lsls	r4, r3, #17
 8002b84:	230a      	movs	r3, #10
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	8819      	ldrh	r1, [r3, #0]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	0023      	movs	r3, r4
 8002b92:	f000 fc3b 	bl	800340c <I2C_TransferConfig>
 8002b96:	e012      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	049c      	lsls	r4, r3, #18
 8002bac:	230a      	movs	r3, #10
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	8819      	ldrh	r1, [r3, #0]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	0023      	movs	r3, r4
 8002bba:	f000 fc27 	bl	800340c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d198      	bne.n	8002afa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fae0 	bl	8003194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01a      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2220      	movs	r2, #32
 8002be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	490b      	ldr	r1, [pc, #44]	@ (8002c1c <HAL_I2C_Mem_Write+0x258>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2241      	movs	r2, #65	@ 0x41
 8002bf8:	2120      	movs	r1, #32
 8002bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2242      	movs	r2, #66	@ 0x42
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b007      	add	sp, #28
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	000c      	movs	r4, r1
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	230a      	movs	r3, #10
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	1c22      	adds	r2, r4, #0
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	2308      	movs	r3, #8
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	1c02      	adds	r2, r0, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	1c0a      	adds	r2, r1, #0
 8002c42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2241      	movs	r2, #65	@ 0x41
 8002c48:	5c9b      	ldrb	r3, [r3, r2]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d000      	beq.n	8002c52 <HAL_I2C_Mem_Read+0x32>
 8002c50:	e110      	b.n	8002e74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_I2C_Mem_Read+0x42>
 8002c58:	232c      	movs	r3, #44	@ 0x2c
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e103      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2240      	movs	r2, #64	@ 0x40
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x5c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0fc      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	@ 0x40
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c84:	f7ff fb50 	bl	8002328 <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	0219      	lsls	r1, r3, #8
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2319      	movs	r3, #25
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f000 f9dd 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0e7      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2241      	movs	r2, #65	@ 0x41
 8002caa:	2122      	movs	r1, #34	@ 0x22
 8002cac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2242      	movs	r2, #66	@ 0x42
 8002cb2:	2140      	movs	r1, #64	@ 0x40
 8002cb4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	222c      	movs	r2, #44	@ 0x2c
 8002cc6:	18ba      	adds	r2, r7, r2
 8002cc8:	8812      	ldrh	r2, [r2, #0]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd2:	1dbb      	adds	r3, r7, #6
 8002cd4:	881c      	ldrh	r4, [r3, #0]
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	881a      	ldrh	r2, [r3, #0]
 8002cdc:	230a      	movs	r3, #10
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	8819      	ldrh	r1, [r3, #0]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	0023      	movs	r3, r4
 8002cee:	f000 f92f 	bl	8002f50 <I2C_RequestMemoryRead>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2240      	movs	r2, #64	@ 0x40
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0b9      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2bff      	cmp	r3, #255	@ 0xff
 8002d0a:	d911      	bls.n	8002d30 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	045c      	lsls	r4, r3, #17
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	8819      	ldrh	r1, [r3, #0]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	4b56      	ldr	r3, [pc, #344]	@ (8002e80 <HAL_I2C_Mem_Read+0x260>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	0023      	movs	r3, r4
 8002d2a:	f000 fb6f 	bl	800340c <I2C_TransferConfig>
 8002d2e:	e012      	b.n	8002d56 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	049c      	lsls	r4, r3, #18
 8002d44:	230a      	movs	r3, #10
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	8819      	ldrh	r1, [r3, #0]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e80 <HAL_I2C_Mem_Read+0x260>)
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	0023      	movs	r3, r4
 8002d52:	f000 fb5b 	bl	800340c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	0013      	movs	r3, r2
 8002d60:	2200      	movs	r2, #0
 8002d62:	2104      	movs	r1, #4
 8002d64:	f000 f978 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e082      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03a      	beq.n	8002e22 <HAL_I2C_Mem_Read+0x202>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d136      	bne.n	8002e22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	f000 f949 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e053      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2bff      	cmp	r3, #255	@ 0xff
 8002dd6:	d911      	bls.n	8002dfc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	045c      	lsls	r4, r3, #17
 8002de8:	230a      	movs	r3, #10
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	8819      	ldrh	r1, [r3, #0]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	2300      	movs	r3, #0
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	0023      	movs	r3, r4
 8002df6:	f000 fb09 	bl	800340c <I2C_TransferConfig>
 8002dfa:	e012      	b.n	8002e22 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	049c      	lsls	r4, r3, #18
 8002e10:	230a      	movs	r3, #10
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	8819      	ldrh	r1, [r3, #0]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	0023      	movs	r3, r4
 8002e1e:	f000 faf5 	bl	800340c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d194      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f9ae 	bl	8003194 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01a      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2220      	movs	r2, #32
 8002e46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	490c      	ldr	r1, [pc, #48]	@ (8002e84 <HAL_I2C_Mem_Read+0x264>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2241      	movs	r2, #65	@ 0x41
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2242      	movs	r2, #66	@ 0x42
 8002e64:	2100      	movs	r1, #0
 8002e66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	@ 0x40
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b007      	add	sp, #28
 8002e7c:	bd90      	pop	{r4, r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	80002400 	.word	0x80002400
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e88:	b5b0      	push	{r4, r5, r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	000c      	movs	r4, r1
 8002e92:	0010      	movs	r0, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	250a      	movs	r5, #10
 8002e98:	197b      	adds	r3, r7, r5
 8002e9a:	1c22      	adds	r2, r4, #0
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	1c02      	adds	r2, r0, #0
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	1dbb      	adds	r3, r7, #6
 8002ea8:	1c0a      	adds	r2, r1, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	045c      	lsls	r4, r3, #17
 8002eb6:	197b      	adds	r3, r7, r5
 8002eb8:	8819      	ldrh	r1, [r3, #0]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <I2C_RequestMemoryWrite+0xc4>)
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	0023      	movs	r3, r4
 8002ec2:	f000 faa3 	bl	800340c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f91b 	bl	8003108 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e033      	b.n	8002f42 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eda:	1dbb      	adds	r3, r7, #6
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ef0:	e019      	b.n	8002f26 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f06:	6a39      	ldr	r1, [r7, #32]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f8fc 	bl	8003108 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e014      	b.n	8002f42 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f18:	2308      	movs	r3, #8
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	0013      	movs	r3, r2
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	f000 f890 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	80002000 	.word	0x80002000

08002f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	000c      	movs	r4, r1
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	250a      	movs	r5, #10
 8002f60:	197b      	adds	r3, r7, r5
 8002f62:	1c22      	adds	r2, r4, #0
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	2308      	movs	r3, #8
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	1c02      	adds	r2, r0, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	1dbb      	adds	r3, r7, #6
 8002f70:	1c0a      	adds	r2, r1, #0
 8002f72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	197b      	adds	r3, r7, r5
 8002f7c:	8819      	ldrh	r1, [r3, #0]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <I2C_RequestMemoryRead+0xc0>)
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	f000 fa41 	bl	800340c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f8b9 	bl	8003108 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e033      	b.n	8003006 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fb4:	e019      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f89a 	bl	8003108 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d001      	beq.n	8002fdc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e014      	b.n	8003006 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fdc:	2308      	movs	r3, #8
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2140      	movs	r1, #64	@ 0x40
 8002ff8:	f000 f82e 	bl	8003058 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bdb0      	pop	{r4, r5, r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	80002000 	.word	0x80002000

08003014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2201      	movs	r2, #1
 800303a:	4013      	ands	r3, r2
 800303c:	2b01      	cmp	r3, #1
 800303e:	d007      	beq.n	8003050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	619a      	str	r2, [r3, #24]
  }
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003068:	e03a      	b.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 f8d3 	bl	800321c <I2C_IsErrorOccurred>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e040      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	d02d      	beq.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7ff f950 	bl	8002328 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d122      	bne.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	425a      	negs	r2, r3
 80030aa:	4153      	adcs	r3, r2
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	001a      	movs	r2, r3
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d113      	bne.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	2220      	movs	r2, #32
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2241      	movs	r2, #65	@ 0x41
 80030c8:	2120      	movs	r1, #32
 80030ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2242      	movs	r2, #66	@ 0x42
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2240      	movs	r2, #64	@ 0x40
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e00f      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	425a      	negs	r2, r3
 80030f0:	4153      	adcs	r3, r2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	001a      	movs	r2, r3
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d0b5      	beq.n	800306a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b004      	add	sp, #16
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003114:	e032      	b.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 f87d 	bl	800321c <I2C_IsErrorOccurred>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e030      	b.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	3301      	adds	r3, #1
 800312e:	d025      	beq.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7ff f8fa 	bl	8002328 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d302      	bcc.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11a      	bne.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d013      	beq.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	2220      	movs	r2, #32
 800315a:	431a      	orrs	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2241      	movs	r2, #65	@ 0x41
 8003164:	2120      	movs	r1, #32
 8003166:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2242      	movs	r2, #66	@ 0x42
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2202      	movs	r2, #2
 8003184:	4013      	ands	r3, r2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d1c5      	bne.n	8003116 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	0018      	movs	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	b004      	add	sp, #16
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a0:	e02f      	b.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f837 	bl	800321c <I2C_IsErrorOccurred>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e02d      	b.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7ff f8b7 	bl	8002328 <HAL_GetTick>
 80031ba:	0002      	movs	r2, r0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11a      	bne.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2220      	movs	r2, #32
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d013      	beq.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	2220      	movs	r2, #32
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2241      	movs	r2, #65	@ 0x41
 80031ea:	2120      	movs	r1, #32
 80031ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2242      	movs	r2, #66	@ 0x42
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2240      	movs	r2, #64	@ 0x40
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e007      	b.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2220      	movs	r2, #32
 800320a:	4013      	ands	r3, r2
 800320c:	2b20      	cmp	r3, #32
 800320e:	d1c8      	bne.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2327      	movs	r3, #39	@ 0x27
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2210      	movs	r2, #16
 8003244:	4013      	ands	r3, r2
 8003246:	d100      	bne.n	800324a <I2C_IsErrorOccurred+0x2e>
 8003248:	e079      	b.n	800333e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003252:	e057      	b.n	8003304 <I2C_IsErrorOccurred+0xe8>
 8003254:	2227      	movs	r2, #39	@ 0x27
 8003256:	18bb      	adds	r3, r7, r2
 8003258:	18ba      	adds	r2, r7, r2
 800325a:	7812      	ldrb	r2, [r2, #0]
 800325c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3301      	adds	r3, #1
 8003262:	d04f      	beq.n	8003304 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7ff f860 	bl	8002328 <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_IsErrorOccurred+0x5e>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d144      	bne.n	8003304 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	01db      	lsls	r3, r3, #7
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003288:	2013      	movs	r0, #19
 800328a:	183b      	adds	r3, r7, r0
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	2142      	movs	r1, #66	@ 0x42
 8003290:	5c52      	ldrb	r2, [r2, r1]
 8003292:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	401a      	ands	r2, r3
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d126      	bne.n	80032f6 <I2C_IsErrorOccurred+0xda>
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d021      	beq.n	80032f6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80032b2:	183b      	adds	r3, r7, r0
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d01d      	beq.n	80032f6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	01c9      	lsls	r1, r1, #7
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032cc:	f7ff f82c 	bl	8002328 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d4:	e00f      	b.n	80032f6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032d6:	f7ff f827 	bl	8002328 <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b19      	cmp	r3, #25
 80032e2:	d908      	bls.n	80032f6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2220      	movs	r2, #32
 80032e8:	4313      	orrs	r3, r2
 80032ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032ec:	2327      	movs	r3, #39	@ 0x27
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]

              break;
 80032f4:	e006      	b.n	8003304 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4013      	ands	r3, r2
 8003300:	2b20      	cmp	r3, #32
 8003302:	d1e8      	bne.n	80032d6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2220      	movs	r2, #32
 800330c:	4013      	ands	r3, r2
 800330e:	2b20      	cmp	r3, #32
 8003310:	d004      	beq.n	800331c <I2C_IsErrorOccurred+0x100>
 8003312:	2327      	movs	r3, #39	@ 0x27
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d09b      	beq.n	8003254 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800331c:	2327      	movs	r3, #39	@ 0x27
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	2204      	movs	r2, #4
 8003332:	4313      	orrs	r3, r2
 8003334:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003336:	2327      	movs	r3, #39	@ 0x27
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d00c      	beq.n	800336a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2201      	movs	r2, #1
 8003354:	4313      	orrs	r3, r2
 8003356:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2280      	movs	r2, #128	@ 0x80
 800335e:	0052      	lsls	r2, r2, #1
 8003360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003362:	2327      	movs	r3, #39	@ 0x27
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4013      	ands	r3, r2
 8003372:	d00c      	beq.n	800338e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	2208      	movs	r2, #8
 8003378:	4313      	orrs	r3, r2
 800337a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2280      	movs	r2, #128	@ 0x80
 8003382:	00d2      	lsls	r2, r2, #3
 8003384:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003386:	2327      	movs	r3, #39	@ 0x27
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4013      	ands	r3, r2
 8003396:	d00c      	beq.n	80033b2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2202      	movs	r2, #2
 800339c:	4313      	orrs	r3, r2
 800339e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2280      	movs	r2, #128	@ 0x80
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033aa:	2327      	movs	r3, #39	@ 0x27
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80033b2:	2327      	movs	r3, #39	@ 0x27
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01d      	beq.n	80033f8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff fe28 	bl	8003014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	490e      	ldr	r1, [pc, #56]	@ (8003408 <I2C_IsErrorOccurred+0x1ec>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2241      	movs	r2, #65	@ 0x41
 80033e4:	2120      	movs	r1, #32
 80033e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2242      	movs	r2, #66	@ 0x42
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80033f8:	2327      	movs	r3, #39	@ 0x27
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	781b      	ldrb	r3, [r3, #0]
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b00a      	add	sp, #40	@ 0x28
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	fe00e800 	.word	0xfe00e800

0800340c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	0008      	movs	r0, r1
 8003416:	0011      	movs	r1, r2
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	240a      	movs	r4, #10
 800341c:	193b      	adds	r3, r7, r4
 800341e:	1c02      	adds	r2, r0, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	2009      	movs	r0, #9
 8003424:	183b      	adds	r3, r7, r0
 8003426:	1c0a      	adds	r2, r1, #0
 8003428:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800342a:	193b      	adds	r3, r7, r4
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	059b      	lsls	r3, r3, #22
 8003430:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003432:	183b      	adds	r3, r7, r0
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	0419      	lsls	r1, r3, #16
 8003438:	23ff      	movs	r3, #255	@ 0xff
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800343e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	4313      	orrs	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003456:	0d51      	lsrs	r1, r2, #21
 8003458:	2280      	movs	r2, #128	@ 0x80
 800345a:	00d2      	lsls	r2, r2, #3
 800345c:	400a      	ands	r2, r1
 800345e:	4907      	ldr	r1, [pc, #28]	@ (800347c <I2C_TransferConfig+0x70>)
 8003460:	430a      	orrs	r2, r1
 8003462:	43d2      	mvns	r2, r2
 8003464:	401a      	ands	r2, r3
 8003466:	0011      	movs	r1, r2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b007      	add	sp, #28
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	03ff63ff 	.word	0x03ff63ff

08003480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2241      	movs	r2, #65	@ 0x41
 800348e:	5c9b      	ldrb	r3, [r3, r2]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	d138      	bne.n	8003508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e032      	b.n	800350a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2240      	movs	r2, #64	@ 0x40
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2241      	movs	r2, #65	@ 0x41
 80034b0:	2124      	movs	r1, #36	@ 0x24
 80034b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	438a      	bics	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4911      	ldr	r1, [pc, #68]	@ (8003514 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2241      	movs	r2, #65	@ 0x41
 80034f8:	2120      	movs	r1, #32
 80034fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2240      	movs	r2, #64	@ 0x40
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b002      	add	sp, #8
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	ffffefff 	.word	0xffffefff

08003518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2241      	movs	r2, #65	@ 0x41
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d139      	bne.n	80035a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2240      	movs	r2, #64	@ 0x40
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003538:	2302      	movs	r3, #2
 800353a:	e033      	b.n	80035a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2241      	movs	r2, #65	@ 0x41
 8003548:	2124      	movs	r1, #36	@ 0x24
 800354a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2101      	movs	r1, #1
 8003558:	438a      	bics	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a11      	ldr	r2, [pc, #68]	@ (80035ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2241      	movs	r2, #65	@ 0x41
 8003592:	2120      	movs	r1, #32
 8003594:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2240      	movs	r2, #64	@ 0x40
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffff0ff 	.word	0xfffff0ff

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e301      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	d100      	bne.n	80035ce <HAL_RCC_OscConfig+0x1e>
 80035cc:	e08d      	b.n	80036ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035ce:	4bc3      	ldr	r3, [pc, #780]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	220c      	movs	r2, #12
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d00e      	beq.n	80035f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035da:	4bc0      	ldr	r3, [pc, #768]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	220c      	movs	r2, #12
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d116      	bne.n	8003614 <HAL_RCC_OscConfig+0x64>
 80035e6:	4bbd      	ldr	r3, [pc, #756]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	025b      	lsls	r3, r3, #9
 80035ee:	401a      	ands	r2, r3
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d10d      	bne.n	8003614 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	4bb8      	ldr	r3, [pc, #736]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	029b      	lsls	r3, r3, #10
 8003600:	4013      	ands	r3, r2
 8003602:	d100      	bne.n	8003606 <HAL_RCC_OscConfig+0x56>
 8003604:	e070      	b.n	80036e8 <HAL_RCC_OscConfig+0x138>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <HAL_RCC_OscConfig+0x60>
 800360e:	e06b      	b.n	80036e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e2d8      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_RCC_OscConfig+0x7c>
 800361c:	4baf      	ldr	r3, [pc, #700]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4bae      	ldr	r3, [pc, #696]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003622:	2180      	movs	r1, #128	@ 0x80
 8003624:	0249      	lsls	r1, r1, #9
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e02f      	b.n	800368c <HAL_RCC_OscConfig+0xdc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10c      	bne.n	800364e <HAL_RCC_OscConfig+0x9e>
 8003634:	4ba9      	ldr	r3, [pc, #676]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4ba8      	ldr	r3, [pc, #672]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800363a:	49a9      	ldr	r1, [pc, #676]	@ (80038e0 <HAL_RCC_OscConfig+0x330>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	4ba6      	ldr	r3, [pc, #664]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4ba5      	ldr	r3, [pc, #660]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003646:	49a7      	ldr	r1, [pc, #668]	@ (80038e4 <HAL_RCC_OscConfig+0x334>)
 8003648:	400a      	ands	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e01e      	b.n	800368c <HAL_RCC_OscConfig+0xdc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10e      	bne.n	8003674 <HAL_RCC_OscConfig+0xc4>
 8003656:	4ba1      	ldr	r3, [pc, #644]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4ba0      	ldr	r3, [pc, #640]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800365c:	2180      	movs	r1, #128	@ 0x80
 800365e:	02c9      	lsls	r1, r1, #11
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4b9d      	ldr	r3, [pc, #628]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b9c      	ldr	r3, [pc, #624]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	0249      	lsls	r1, r1, #9
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0xdc>
 8003674:	4b99      	ldr	r3, [pc, #612]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b98      	ldr	r3, [pc, #608]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800367a:	4999      	ldr	r1, [pc, #612]	@ (80038e0 <HAL_RCC_OscConfig+0x330>)
 800367c:	400a      	ands	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	4b96      	ldr	r3, [pc, #600]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b95      	ldr	r3, [pc, #596]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003686:	4997      	ldr	r1, [pc, #604]	@ (80038e4 <HAL_RCC_OscConfig+0x334>)
 8003688:	400a      	ands	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d014      	beq.n	80036be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fe48 	bl	8002328 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800369e:	f7fe fe43 	bl	8002328 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e28a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b0:	4b8a      	ldr	r3, [pc, #552]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	@ 0x80
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0xee>
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe fe33 	bl	8002328 <HAL_GetTick>
 80036c2:	0003      	movs	r3, r0
 80036c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fe2e 	bl	8002328 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	@ 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e275      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b80      	ldr	r3, [pc, #512]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	029b      	lsls	r3, r3, #10
 80036e2:	4013      	ands	r3, r2
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x118>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d100      	bne.n	80036f6 <HAL_RCC_OscConfig+0x146>
 80036f4:	e069      	b.n	80037ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036f6:	4b79      	ldr	r3, [pc, #484]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	220c      	movs	r2, #12
 80036fc:	4013      	ands	r3, r2
 80036fe:	d00b      	beq.n	8003718 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003700:	4b76      	ldr	r3, [pc, #472]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	220c      	movs	r2, #12
 8003706:	4013      	ands	r3, r2
 8003708:	2b08      	cmp	r3, #8
 800370a:	d11c      	bne.n	8003746 <HAL_RCC_OscConfig+0x196>
 800370c:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	2380      	movs	r3, #128	@ 0x80
 8003712:	025b      	lsls	r3, r3, #9
 8003714:	4013      	ands	r3, r2
 8003716:	d116      	bne.n	8003746 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003718:	4b70      	ldr	r3, [pc, #448]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x17e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e24b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b6b      	ldr	r3, [pc, #428]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	22f8      	movs	r2, #248	@ 0xf8
 8003734:	4393      	bics	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	00da      	lsls	r2, r3, #3
 800373e:	4b67      	ldr	r3, [pc, #412]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003744:	e041      	b.n	80037ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374e:	4b63      	ldr	r3, [pc, #396]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b62      	ldr	r3, [pc, #392]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003754:	2101      	movs	r1, #1
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fde5 	bl	8002328 <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003764:	f7fe fde0 	bl	8002328 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e227      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d0f1      	beq.n	8003764 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b56      	ldr	r3, [pc, #344]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	22f8      	movs	r2, #248	@ 0xf8
 8003786:	4393      	bics	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00da      	lsls	r2, r3, #3
 8003790:	4b52      	ldr	r3, [pc, #328]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e018      	b.n	80037ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003798:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800379e:	2101      	movs	r1, #1
 80037a0:	438a      	bics	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fdc0 	bl	8002328 <HAL_GetTick>
 80037a8:	0003      	movs	r3, r0
 80037aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fe fdbb 	bl	8002328 <HAL_GetTick>
 80037b2:	0002      	movs	r2, r0
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e202      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c0:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2202      	movs	r2, #2
 80037c6:	4013      	ands	r3, r2
 80037c8:	d1f1      	bne.n	80037ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2208      	movs	r2, #8
 80037d0:	4013      	ands	r3, r2
 80037d2:	d036      	beq.n	8003842 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d019      	beq.n	8003810 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037dc:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80037de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037e0:	4b3e      	ldr	r3, [pc, #248]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	430a      	orrs	r2, r1
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7fe fd9e 	bl	8002328 <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe fd99 	bl	8002328 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e1e0      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003804:	4b35      	ldr	r3, [pc, #212]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2202      	movs	r2, #2
 800380a:	4013      	ands	r3, r2
 800380c:	d0f1      	beq.n	80037f2 <HAL_RCC_OscConfig+0x242>
 800380e:	e018      	b.n	8003842 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003810:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003812:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003816:	2101      	movs	r1, #1
 8003818:	438a      	bics	r2, r1
 800381a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381c:	f7fe fd84 	bl	8002328 <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003826:	f7fe fd7f 	bl	8002328 <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1c6      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	2202      	movs	r2, #2
 800383e:	4013      	ands	r3, r2
 8003840:	d1f1      	bne.n	8003826 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d100      	bne.n	800384e <HAL_RCC_OscConfig+0x29e>
 800384c:	e0b4      	b.n	80039b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	201f      	movs	r0, #31
 8003850:	183b      	adds	r3, r7, r0
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003856:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	055b      	lsls	r3, r3, #21
 800385e:	4013      	ands	r3, r2
 8003860:	d110      	bne.n	8003884 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	0549      	lsls	r1, r1, #21
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	055b      	lsls	r3, r3, #21
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800387e:	183b      	adds	r3, r7, r0
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b18      	ldr	r3, [pc, #96]	@ (80038e8 <HAL_RCC_OscConfig+0x338>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d11a      	bne.n	80038c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003890:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_RCC_OscConfig+0x338>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <HAL_RCC_OscConfig+0x338>)
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	0049      	lsls	r1, r1, #1
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe fd43 	bl	8002328 <HAL_GetTick>
 80038a2:	0003      	movs	r3, r0
 80038a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a8:	f7fe fd3e 	bl	8002328 <HAL_GetTick>
 80038ac:	0002      	movs	r2, r0
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	@ 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e185      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_RCC_OscConfig+0x338>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_RCC_OscConfig+0x33c>
 80038ce:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	4b02      	ldr	r3, [pc, #8]	@ (80038dc <HAL_RCC_OscConfig+0x32c>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	e035      	b.n	8003948 <HAL_RCC_OscConfig+0x398>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	fffeffff 	.word	0xfffeffff
 80038e4:	fffbffff 	.word	0xfffbffff
 80038e8:	40007000 	.word	0x40007000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10c      	bne.n	800390e <HAL_RCC_OscConfig+0x35e>
 80038f4:	4bb6      	ldr	r3, [pc, #728]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	4bb5      	ldr	r3, [pc, #724]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	621a      	str	r2, [r3, #32]
 8003900:	4bb3      	ldr	r3, [pc, #716]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	4bb2      	ldr	r3, [pc, #712]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003906:	2104      	movs	r1, #4
 8003908:	438a      	bics	r2, r1
 800390a:	621a      	str	r2, [r3, #32]
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x398>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x380>
 8003916:	4bae      	ldr	r3, [pc, #696]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	4bad      	ldr	r3, [pc, #692]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 800391c:	2104      	movs	r1, #4
 800391e:	430a      	orrs	r2, r1
 8003920:	621a      	str	r2, [r3, #32]
 8003922:	4bab      	ldr	r3, [pc, #684]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003924:	6a1a      	ldr	r2, [r3, #32]
 8003926:	4baa      	ldr	r3, [pc, #680]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003928:	2101      	movs	r1, #1
 800392a:	430a      	orrs	r2, r1
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x398>
 8003930:	4ba7      	ldr	r3, [pc, #668]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	4ba6      	ldr	r3, [pc, #664]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003936:	2101      	movs	r1, #1
 8003938:	438a      	bics	r2, r1
 800393a:	621a      	str	r2, [r3, #32]
 800393c:	4ba4      	ldr	r3, [pc, #656]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	4ba3      	ldr	r3, [pc, #652]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003942:	2104      	movs	r1, #4
 8003944:	438a      	bics	r2, r1
 8003946:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d014      	beq.n	800397a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe fcea 	bl	8002328 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	e009      	b.n	800396e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fce5 	bl	8002328 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4a9b      	ldr	r2, [pc, #620]	@ (8003bd4 <HAL_RCC_OscConfig+0x624>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e12b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b98      	ldr	r3, [pc, #608]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x3aa>
 8003978:	e013      	b.n	80039a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fe fcd5 	bl	8002328 <HAL_GetTick>
 800397e:	0003      	movs	r3, r0
 8003980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	e009      	b.n	8003998 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe fcd0 	bl	8002328 <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	4a91      	ldr	r2, [pc, #580]	@ (8003bd4 <HAL_RCC_OscConfig+0x624>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e116      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	2202      	movs	r2, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039a2:	231f      	movs	r3, #31
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b88      	ldr	r3, [pc, #544]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	4b87      	ldr	r3, [pc, #540]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039b2:	4989      	ldr	r1, [pc, #548]	@ (8003bd8 <HAL_RCC_OscConfig+0x628>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2210      	movs	r2, #16
 80039be:	4013      	ands	r3, r2
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d12a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80039ca:	4b81      	ldr	r3, [pc, #516]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ce:	4b80      	ldr	r3, [pc, #512]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039d0:	2104      	movs	r1, #4
 80039d2:	430a      	orrs	r2, r1
 80039d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80039d6:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039da:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 80039dc:	2101      	movs	r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fe fca1 	bl	8002328 <HAL_GetTick>
 80039e6:	0003      	movs	r3, r0
 80039e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039ec:	f7fe fc9c 	bl	8002328 <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e0e3      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80039fe:	4b74      	ldr	r3, [pc, #464]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	2202      	movs	r2, #2
 8003a04:	4013      	ands	r3, r2
 8003a06:	d0f1      	beq.n	80039ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a08:	4b71      	ldr	r3, [pc, #452]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0c:	22f8      	movs	r2, #248	@ 0xf8
 8003a0e:	4393      	bics	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	00da      	lsls	r2, r3, #3
 8003a18:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a1e:	e034      	b.n	8003a8a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	3305      	adds	r3, #5
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003a28:	4b69      	ldr	r3, [pc, #420]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a2c:	4b68      	ldr	r3, [pc, #416]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a2e:	2104      	movs	r1, #4
 8003a30:	438a      	bics	r2, r1
 8003a32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a34:	4b66      	ldr	r3, [pc, #408]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	22f8      	movs	r2, #248	@ 0xf8
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	00da      	lsls	r2, r3, #3
 8003a44:	4b62      	ldr	r3, [pc, #392]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a46:	430a      	orrs	r2, r1
 8003a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a4a:	e01e      	b.n	8003a8a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a4c:	4b60      	ldr	r3, [pc, #384]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a50:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a52:	2104      	movs	r1, #4
 8003a54:	430a      	orrs	r2, r1
 8003a56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003a58:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a5e:	2101      	movs	r1, #1
 8003a60:	438a      	bics	r2, r1
 8003a62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fe fc60 	bl	8002328 <HAL_GetTick>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a6e:	f7fe fc5b 	bl	8002328 <HAL_GetTick>
 8003a72:	0002      	movs	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0a2      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a80:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	2202      	movs	r2, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	d1f1      	bne.n	8003a6e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d100      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4e4>
 8003a92:	e097      	b.n	8003bc4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a94:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d100      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4f2>
 8003aa0:	e06b      	b.n	8003b7a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d14c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b49      	ldr	r3, [pc, #292]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b48      	ldr	r3, [pc, #288]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003ab0:	494a      	ldr	r1, [pc, #296]	@ (8003bdc <HAL_RCC_OscConfig+0x62c>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fc37 	bl	8002328 <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fc32 	bl	8002328 <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e079      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	2380      	movs	r3, #128	@ 0x80
 8003ad8:	049b      	lsls	r3, r3, #18
 8003ada:	4013      	ands	r3, r2
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ade:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	4393      	bics	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aec:	4b38      	ldr	r3, [pc, #224]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003af2:	4b37      	ldr	r3, [pc, #220]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a3a      	ldr	r2, [pc, #232]	@ (8003be0 <HAL_RCC_OscConfig+0x630>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	4b32      	ldr	r3, [pc, #200]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b12:	2180      	movs	r1, #128	@ 0x80
 8003b14:	0449      	lsls	r1, r1, #17
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fc05 	bl	8002328 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fc00 	bl	8002328 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e047      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b36:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	049b      	lsls	r3, r3, #18
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x574>
 8003b42:	e03f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	4b22      	ldr	r3, [pc, #136]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b4a:	4924      	ldr	r1, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x62c>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fbea 	bl	8002328 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fe fbe5 	bl	8002328 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e02c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	049b      	lsls	r3, r3, #18
 8003b74:	4013      	ands	r3, r2
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x5aa>
 8003b78:	e024      	b.n	8003bc4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e01f      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCC_OscConfig+0x620>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	401a      	ands	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	23f0      	movs	r3, #240	@ 0xf0
 8003bb4:	039b      	lsls	r3, r3, #14
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b008      	add	sp, #32
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	00001388 	.word	0x00001388
 8003bd8:	efffffff 	.word	0xefffffff
 8003bdc:	feffffff 	.word	0xfeffffff
 8003be0:	ffc2ffff 	.word	0xffc2ffff

08003be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b3      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4013      	ands	r3, r2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d911      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b58      	ldr	r3, [pc, #352]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	4b55      	ldr	r3, [pc, #340]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e09a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d006      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4b4a      	ldr	r3, [pc, #296]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c44:	21e0      	movs	r1, #224	@ 0xe0
 8003c46:	00c9      	lsls	r1, r1, #3
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b47      	ldr	r3, [pc, #284]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	22f0      	movs	r2, #240	@ 0xf0
 8003c52:	4393      	bics	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	4b44      	ldr	r3, [pc, #272]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4013      	ands	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b3e      	ldr	r3, [pc, #248]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	029b      	lsls	r3, r3, #10
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d114      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06e      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b38      	ldr	r3, [pc, #224]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	@ 0x80
 8003c90:	049b      	lsls	r3, r3, #18
 8003c92:	4013      	ands	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e062      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e05b      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca8:	4b30      	ldr	r3, [pc, #192]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	4393      	bics	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fe fb34 	bl	8002328 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc4:	e009      	b.n	8003cda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc6:	f7fe fb2f 	bl	8002328 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	4a27      	ldr	r2, [pc, #156]	@ (8003d70 <HAL_RCC_ClockConfig+0x18c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e042      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	220c      	movs	r2, #12
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1ec      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d211      	bcs.n	8003d1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4393      	bics	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0c:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <HAL_RCC_ClockConfig+0x184>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e020      	b.n	8003d60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a11      	ldr	r2, [pc, #68]	@ (8003d74 <HAL_RCC_ClockConfig+0x190>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d3c:	f000 f820 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d40:	0001      	movs	r1, r0
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <HAL_RCC_ClockConfig+0x188>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	220f      	movs	r2, #15
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <HAL_RCC_ClockConfig+0x194>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	000a      	movs	r2, r1
 8003d52:	40da      	lsrs	r2, r3
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_RCC_ClockConfig+0x198>)
 8003d56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f7fe fa9f 	bl	800229c <HAL_InitTick>
  
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b004      	add	sp, #16
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	00001388 	.word	0x00001388
 8003d74:	fffff8ff 	.word	0xfffff8ff
 8003d78:	080040b4 	.word	0x080040b4
 8003d7c:	20000004 	.word	0x20000004

08003d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	220c      	movs	r2, #12
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x30>
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dae:	e02c      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003db2:	613b      	str	r3, [r7, #16]
      break;
 8003db4:	e02c      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	220f      	movs	r2, #15
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dc0:	5cd3      	ldrb	r3, [r2, r3]
 8003dc2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003dc4:	4b15      	ldr	r3, [pc, #84]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	220f      	movs	r2, #15
 8003dca:	4013      	ands	r3, r2
 8003dcc:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4810      	ldr	r0, [pc, #64]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003de0:	f7fc f992 	bl	8000108 <__udivsi3>
 8003de4:	0003      	movs	r3, r0
 8003de6:	001a      	movs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4353      	muls	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e009      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	000a      	movs	r2, r1
 8003df4:	0152      	lsls	r2, r2, #5
 8003df6:	1a52      	subs	r2, r2, r1
 8003df8:	0193      	lsls	r3, r2, #6
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	185b      	adds	r3, r3, r1
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	613b      	str	r3, [r7, #16]
      break;
 8003e08:	e002      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0a:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e0c:	613b      	str	r3, [r7, #16]
      break;
 8003e0e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e10:	693b      	ldr	r3, [r7, #16]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b006      	add	sp, #24
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	007a1200 	.word	0x007a1200
 8003e24:	080040c4 	.word	0x080040c4
 8003e28:	080040d4 	.word	0x080040d4

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003e48:	e08e      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2017      	movs	r0, #23
 8003e4c:	183b      	adds	r3, r7, r0
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b57      	ldr	r3, [pc, #348]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	2380      	movs	r3, #128	@ 0x80
 8003e58:	055b      	lsls	r3, r3, #21
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d110      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b54      	ldr	r3, [pc, #336]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	0549      	lsls	r1, r1, #21
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]
 8003e6c:	4b50      	ldr	r3, [pc, #320]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	055b      	lsls	r3, r3, #21
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8c:	4b49      	ldr	r3, [pc, #292]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b48      	ldr	r3, [pc, #288]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	0049      	lsls	r1, r1, #1
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fa45 	bl	8002328 <HAL_GetTick>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fe fa40 	bl	8002328 <HAL_GetTick>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	@ 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e077      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	23c0      	movs	r3, #192	@ 0xc0
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d034      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	23c0      	movs	r3, #192	@ 0xc0
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d02c      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee4:	4b32      	ldr	r3, [pc, #200]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eee:	4b30      	ldr	r3, [pc, #192]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	0249      	lsls	r1, r1, #9
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003efc:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f02:	492e      	ldr	r1, [pc, #184]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f08:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4013      	ands	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7fe fa07 	bl	8002328 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	e009      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f7fe fa02 	bl	8002328 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	4a25      	ldr	r2, [pc, #148]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e038      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f52:	2317      	movs	r3, #23
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f62:	4918      	ldr	r1, [pc, #96]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003f64:	400a      	ands	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	2203      	movs	r2, #3
 8003f78:	4393      	bics	r3, r2
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f82:	430a      	orrs	r2, r1
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f90:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	2210      	movs	r2, #16
 8003f96:	4393      	bics	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b006      	add	sp, #24
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	fffffcff 	.word	0xfffffcff
 8003fbc:	fffeffff 	.word	0xfffeffff
 8003fc0:	00001388 	.word	0x00001388
 8003fc4:	efffffff 	.word	0xefffffff

08003fc8 <memset>:
 8003fc8:	0003      	movs	r3, r0
 8003fca:	1882      	adds	r2, r0, r2
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	7019      	strb	r1, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <__libc_init_array>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	2600      	movs	r6, #0
 8003fdc:	4c0c      	ldr	r4, [pc, #48]	@ (8004010 <__libc_init_array+0x38>)
 8003fde:	4d0d      	ldr	r5, [pc, #52]	@ (8004014 <__libc_init_array+0x3c>)
 8003fe0:	1b64      	subs	r4, r4, r5
 8003fe2:	10a4      	asrs	r4, r4, #2
 8003fe4:	42a6      	cmp	r6, r4
 8003fe6:	d109      	bne.n	8003ffc <__libc_init_array+0x24>
 8003fe8:	2600      	movs	r6, #0
 8003fea:	f000 f819 	bl	8004020 <_init>
 8003fee:	4c0a      	ldr	r4, [pc, #40]	@ (8004018 <__libc_init_array+0x40>)
 8003ff0:	4d0a      	ldr	r5, [pc, #40]	@ (800401c <__libc_init_array+0x44>)
 8003ff2:	1b64      	subs	r4, r4, r5
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	42a6      	cmp	r6, r4
 8003ff8:	d105      	bne.n	8004006 <__libc_init_array+0x2e>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	00b3      	lsls	r3, r6, #2
 8003ffe:	58eb      	ldr	r3, [r5, r3]
 8004000:	4798      	blx	r3
 8004002:	3601      	adds	r6, #1
 8004004:	e7ee      	b.n	8003fe4 <__libc_init_array+0xc>
 8004006:	00b3      	lsls	r3, r6, #2
 8004008:	58eb      	ldr	r3, [r5, r3]
 800400a:	4798      	blx	r3
 800400c:	3601      	adds	r6, #1
 800400e:	e7f2      	b.n	8003ff6 <__libc_init_array+0x1e>
 8004010:	080040e4 	.word	0x080040e4
 8004014:	080040e4 	.word	0x080040e4
 8004018:	080040e8 	.word	0x080040e8
 800401c:	080040e4 	.word	0x080040e4

08004020 <_init>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr

0800402c <_fini>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr
