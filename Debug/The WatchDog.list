
The WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000606c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800612c  0800612c  0000712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006218  08006218  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006218  08006218  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00007218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800621c  0800621c  0000721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006220  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08006230  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08006230  000080e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c262  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a3  00000000  00000000  0001429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00016340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000986  00000000  00000000  00016fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010268  00000000  00000000  0001795e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f82f  00000000  00000000  00027bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d71b  00000000  00000000  000373f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  00094b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00097b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006114 	.word	0x08006114

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006114 	.word	0x08006114

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fb15 	bl	8001860 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fa55 	bl	80016f0 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fb07 	bl	8001860 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fafd 	bl	8001860 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fa7f 	bl	8001778 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fa75 	bl	8001778 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb6d 	bl	8000984 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 faed 	bl	8000894 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb5f 	bl	8000984 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb55 	bl	8000984 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			@ (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fafb 	bl	80008e4 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faf1 	bl	80008e4 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	@ 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fe5f 	bl	8000fe4 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	@ 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fcb5 	bl	8000c9c <__aeabi_fsub>
 8000332:	f000 fe57 	bl	8000fe4 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	@ 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_fadd>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	46ce      	mov	lr, r9
 8000344:	4647      	mov	r7, r8
 8000346:	0243      	lsls	r3, r0, #9
 8000348:	0a5a      	lsrs	r2, r3, #9
 800034a:	024e      	lsls	r6, r1, #9
 800034c:	0045      	lsls	r5, r0, #1
 800034e:	0fc4      	lsrs	r4, r0, #31
 8000350:	0048      	lsls	r0, r1, #1
 8000352:	4691      	mov	r9, r2
 8000354:	0e2d      	lsrs	r5, r5, #24
 8000356:	0a72      	lsrs	r2, r6, #9
 8000358:	0e00      	lsrs	r0, r0, #24
 800035a:	4694      	mov	ip, r2
 800035c:	b580      	push	{r7, lr}
 800035e:	099b      	lsrs	r3, r3, #6
 8000360:	0fc9      	lsrs	r1, r1, #31
 8000362:	09b6      	lsrs	r6, r6, #6
 8000364:	1a2a      	subs	r2, r5, r0
 8000366:	428c      	cmp	r4, r1
 8000368:	d021      	beq.n	80003ae <__aeabi_fadd+0x6e>
 800036a:	2a00      	cmp	r2, #0
 800036c:	dd0d      	ble.n	800038a <__aeabi_fadd+0x4a>
 800036e:	2800      	cmp	r0, #0
 8000370:	d12d      	bne.n	80003ce <__aeabi_fadd+0x8e>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_fadd+0x38>
 8000376:	e08d      	b.n	8000494 <__aeabi_fadd+0x154>
 8000378:	1e51      	subs	r1, r2, #1
 800037a:	2a01      	cmp	r2, #1
 800037c:	d100      	bne.n	8000380 <__aeabi_fadd+0x40>
 800037e:	e11d      	b.n	80005bc <__aeabi_fadd+0x27c>
 8000380:	2aff      	cmp	r2, #255	@ 0xff
 8000382:	d100      	bne.n	8000386 <__aeabi_fadd+0x46>
 8000384:	e0ab      	b.n	80004de <__aeabi_fadd+0x19e>
 8000386:	000a      	movs	r2, r1
 8000388:	e027      	b.n	80003da <__aeabi_fadd+0x9a>
 800038a:	2a00      	cmp	r2, #0
 800038c:	d04d      	beq.n	800042a <__aeabi_fadd+0xea>
 800038e:	1b42      	subs	r2, r0, r5
 8000390:	2d00      	cmp	r5, #0
 8000392:	d000      	beq.n	8000396 <__aeabi_fadd+0x56>
 8000394:	e0cc      	b.n	8000530 <__aeabi_fadd+0x1f0>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d100      	bne.n	800039c <__aeabi_fadd+0x5c>
 800039a:	e079      	b.n	8000490 <__aeabi_fadd+0x150>
 800039c:	1e54      	subs	r4, r2, #1
 800039e:	2a01      	cmp	r2, #1
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fadd+0x64>
 80003a2:	e128      	b.n	80005f6 <__aeabi_fadd+0x2b6>
 80003a4:	2aff      	cmp	r2, #255	@ 0xff
 80003a6:	d100      	bne.n	80003aa <__aeabi_fadd+0x6a>
 80003a8:	e097      	b.n	80004da <__aeabi_fadd+0x19a>
 80003aa:	0022      	movs	r2, r4
 80003ac:	e0c5      	b.n	800053a <__aeabi_fadd+0x1fa>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	dc00      	bgt.n	80003b4 <__aeabi_fadd+0x74>
 80003b2:	e096      	b.n	80004e2 <__aeabi_fadd+0x1a2>
 80003b4:	2800      	cmp	r0, #0
 80003b6:	d04f      	beq.n	8000458 <__aeabi_fadd+0x118>
 80003b8:	2dff      	cmp	r5, #255	@ 0xff
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0x7e>
 80003bc:	e08f      	b.n	80004de <__aeabi_fadd+0x19e>
 80003be:	2180      	movs	r1, #128	@ 0x80
 80003c0:	04c9      	lsls	r1, r1, #19
 80003c2:	430e      	orrs	r6, r1
 80003c4:	2a1b      	cmp	r2, #27
 80003c6:	dd51      	ble.n	800046c <__aeabi_fadd+0x12c>
 80003c8:	002a      	movs	r2, r5
 80003ca:	3301      	adds	r3, #1
 80003cc:	e018      	b.n	8000400 <__aeabi_fadd+0xc0>
 80003ce:	2dff      	cmp	r5, #255	@ 0xff
 80003d0:	d100      	bne.n	80003d4 <__aeabi_fadd+0x94>
 80003d2:	e084      	b.n	80004de <__aeabi_fadd+0x19e>
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	04c9      	lsls	r1, r1, #19
 80003d8:	430e      	orrs	r6, r1
 80003da:	2101      	movs	r1, #1
 80003dc:	2a1b      	cmp	r2, #27
 80003de:	dc08      	bgt.n	80003f2 <__aeabi_fadd+0xb2>
 80003e0:	0031      	movs	r1, r6
 80003e2:	2020      	movs	r0, #32
 80003e4:	40d1      	lsrs	r1, r2
 80003e6:	1a82      	subs	r2, r0, r2
 80003e8:	4096      	lsls	r6, r2
 80003ea:	0032      	movs	r2, r6
 80003ec:	1e50      	subs	r0, r2, #1
 80003ee:	4182      	sbcs	r2, r0
 80003f0:	4311      	orrs	r1, r2
 80003f2:	1a5b      	subs	r3, r3, r1
 80003f4:	015a      	lsls	r2, r3, #5
 80003f6:	d459      	bmi.n	80004ac <__aeabi_fadd+0x16c>
 80003f8:	2107      	movs	r1, #7
 80003fa:	002a      	movs	r2, r5
 80003fc:	4019      	ands	r1, r3
 80003fe:	d049      	beq.n	8000494 <__aeabi_fadd+0x154>
 8000400:	210f      	movs	r1, #15
 8000402:	4019      	ands	r1, r3
 8000404:	2904      	cmp	r1, #4
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0xca>
 8000408:	3304      	adds	r3, #4
 800040a:	0159      	lsls	r1, r3, #5
 800040c:	d542      	bpl.n	8000494 <__aeabi_fadd+0x154>
 800040e:	1c50      	adds	r0, r2, #1
 8000410:	2afe      	cmp	r2, #254	@ 0xfe
 8000412:	d03a      	beq.n	800048a <__aeabi_fadd+0x14a>
 8000414:	019b      	lsls	r3, r3, #6
 8000416:	b2c0      	uxtb	r0, r0
 8000418:	0a5b      	lsrs	r3, r3, #9
 800041a:	05c0      	lsls	r0, r0, #23
 800041c:	4318      	orrs	r0, r3
 800041e:	07e4      	lsls	r4, r4, #31
 8000420:	4320      	orrs	r0, r4
 8000422:	bcc0      	pop	{r6, r7}
 8000424:	46b9      	mov	r9, r7
 8000426:	46b0      	mov	r8, r6
 8000428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800042a:	20fe      	movs	r0, #254	@ 0xfe
 800042c:	4680      	mov	r8, r0
 800042e:	1c6f      	adds	r7, r5, #1
 8000430:	0038      	movs	r0, r7
 8000432:	4647      	mov	r7, r8
 8000434:	4207      	tst	r7, r0
 8000436:	d000      	beq.n	800043a <__aeabi_fadd+0xfa>
 8000438:	e08e      	b.n	8000558 <__aeabi_fadd+0x218>
 800043a:	2d00      	cmp	r5, #0
 800043c:	d000      	beq.n	8000440 <__aeabi_fadd+0x100>
 800043e:	e0b4      	b.n	80005aa <__aeabi_fadd+0x26a>
 8000440:	2b00      	cmp	r3, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_fadd+0x106>
 8000444:	e0db      	b.n	80005fe <__aeabi_fadd+0x2be>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d06c      	beq.n	8000524 <__aeabi_fadd+0x1e4>
 800044a:	1b98      	subs	r0, r3, r6
 800044c:	0145      	lsls	r5, r0, #5
 800044e:	d400      	bmi.n	8000452 <__aeabi_fadd+0x112>
 8000450:	e0f7      	b.n	8000642 <__aeabi_fadd+0x302>
 8000452:	000c      	movs	r4, r1
 8000454:	1af3      	subs	r3, r6, r3
 8000456:	e03d      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d01b      	beq.n	8000494 <__aeabi_fadd+0x154>
 800045c:	1e51      	subs	r1, r2, #1
 800045e:	2a01      	cmp	r2, #1
 8000460:	d100      	bne.n	8000464 <__aeabi_fadd+0x124>
 8000462:	e082      	b.n	800056a <__aeabi_fadd+0x22a>
 8000464:	2aff      	cmp	r2, #255	@ 0xff
 8000466:	d03a      	beq.n	80004de <__aeabi_fadd+0x19e>
 8000468:	000a      	movs	r2, r1
 800046a:	e7ab      	b.n	80003c4 <__aeabi_fadd+0x84>
 800046c:	0031      	movs	r1, r6
 800046e:	2020      	movs	r0, #32
 8000470:	40d1      	lsrs	r1, r2
 8000472:	1a82      	subs	r2, r0, r2
 8000474:	4096      	lsls	r6, r2
 8000476:	0032      	movs	r2, r6
 8000478:	1e50      	subs	r0, r2, #1
 800047a:	4182      	sbcs	r2, r0
 800047c:	430a      	orrs	r2, r1
 800047e:	189b      	adds	r3, r3, r2
 8000480:	015a      	lsls	r2, r3, #5
 8000482:	d5b9      	bpl.n	80003f8 <__aeabi_fadd+0xb8>
 8000484:	1c6a      	adds	r2, r5, #1
 8000486:	2dfe      	cmp	r5, #254	@ 0xfe
 8000488:	d175      	bne.n	8000576 <__aeabi_fadd+0x236>
 800048a:	20ff      	movs	r0, #255	@ 0xff
 800048c:	2300      	movs	r3, #0
 800048e:	e7c4      	b.n	800041a <__aeabi_fadd+0xda>
 8000490:	000c      	movs	r4, r1
 8000492:	0033      	movs	r3, r6
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	2aff      	cmp	r2, #255	@ 0xff
 8000498:	d146      	bne.n	8000528 <__aeabi_fadd+0x1e8>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f5      	beq.n	800048a <__aeabi_fadd+0x14a>
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	03d2      	lsls	r2, r2, #15
 80004a2:	4313      	orrs	r3, r2
 80004a4:	025b      	lsls	r3, r3, #9
 80004a6:	20ff      	movs	r0, #255	@ 0xff
 80004a8:	0a5b      	lsrs	r3, r3, #9
 80004aa:	e7b6      	b.n	800041a <__aeabi_fadd+0xda>
 80004ac:	019f      	lsls	r7, r3, #6
 80004ae:	09bf      	lsrs	r7, r7, #6
 80004b0:	0038      	movs	r0, r7
 80004b2:	f001 fe09 	bl	80020c8 <__clzsi2>
 80004b6:	3805      	subs	r0, #5
 80004b8:	4087      	lsls	r7, r0
 80004ba:	4285      	cmp	r5, r0
 80004bc:	dc24      	bgt.n	8000508 <__aeabi_fadd+0x1c8>
 80004be:	003b      	movs	r3, r7
 80004c0:	2120      	movs	r1, #32
 80004c2:	1b42      	subs	r2, r0, r5
 80004c4:	3201      	adds	r2, #1
 80004c6:	40d3      	lsrs	r3, r2
 80004c8:	1a8a      	subs	r2, r1, r2
 80004ca:	4097      	lsls	r7, r2
 80004cc:	1e7a      	subs	r2, r7, #1
 80004ce:	4197      	sbcs	r7, r2
 80004d0:	2200      	movs	r2, #0
 80004d2:	433b      	orrs	r3, r7
 80004d4:	0759      	lsls	r1, r3, #29
 80004d6:	d193      	bne.n	8000400 <__aeabi_fadd+0xc0>
 80004d8:	e797      	b.n	800040a <__aeabi_fadd+0xca>
 80004da:	000c      	movs	r4, r1
 80004dc:	0033      	movs	r3, r6
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	e7db      	b.n	800049a <__aeabi_fadd+0x15a>
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d014      	beq.n	8000510 <__aeabi_fadd+0x1d0>
 80004e6:	1b42      	subs	r2, r0, r5
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d14b      	bne.n	8000584 <__aeabi_fadd+0x244>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0d0      	beq.n	8000492 <__aeabi_fadd+0x152>
 80004f0:	1e51      	subs	r1, r2, #1
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fadd+0x1b8>
 80004f6:	e09e      	b.n	8000636 <__aeabi_fadd+0x2f6>
 80004f8:	2aff      	cmp	r2, #255	@ 0xff
 80004fa:	d0ef      	beq.n	80004dc <__aeabi_fadd+0x19c>
 80004fc:	000a      	movs	r2, r1
 80004fe:	2a1b      	cmp	r2, #27
 8000500:	dd5f      	ble.n	80005c2 <__aeabi_fadd+0x282>
 8000502:	0002      	movs	r2, r0
 8000504:	1c73      	adds	r3, r6, #1
 8000506:	e77b      	b.n	8000400 <__aeabi_fadd+0xc0>
 8000508:	4b50      	ldr	r3, [pc, #320]	@ (800064c <__aeabi_fadd+0x30c>)
 800050a:	1a2a      	subs	r2, r5, r0
 800050c:	403b      	ands	r3, r7
 800050e:	e7e1      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000510:	21fe      	movs	r1, #254	@ 0xfe
 8000512:	1c6a      	adds	r2, r5, #1
 8000514:	4211      	tst	r1, r2
 8000516:	d13b      	bne.n	8000590 <__aeabi_fadd+0x250>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d15d      	bne.n	80005d8 <__aeabi_fadd+0x298>
 800051c:	2b00      	cmp	r3, #0
 800051e:	d07f      	beq.n	8000620 <__aeabi_fadd+0x2e0>
 8000520:	2e00      	cmp	r6, #0
 8000522:	d17f      	bne.n	8000624 <__aeabi_fadd+0x2e4>
 8000524:	2200      	movs	r2, #0
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	025b      	lsls	r3, r3, #9
 800052a:	0a5b      	lsrs	r3, r3, #9
 800052c:	b2d0      	uxtb	r0, r2
 800052e:	e774      	b.n	800041a <__aeabi_fadd+0xda>
 8000530:	28ff      	cmp	r0, #255	@ 0xff
 8000532:	d0d2      	beq.n	80004da <__aeabi_fadd+0x19a>
 8000534:	2480      	movs	r4, #128	@ 0x80
 8000536:	04e4      	lsls	r4, r4, #19
 8000538:	4323      	orrs	r3, r4
 800053a:	2401      	movs	r4, #1
 800053c:	2a1b      	cmp	r2, #27
 800053e:	dc07      	bgt.n	8000550 <__aeabi_fadd+0x210>
 8000540:	001c      	movs	r4, r3
 8000542:	2520      	movs	r5, #32
 8000544:	40d4      	lsrs	r4, r2
 8000546:	1aaa      	subs	r2, r5, r2
 8000548:	4093      	lsls	r3, r2
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	4193      	sbcs	r3, r2
 800054e:	431c      	orrs	r4, r3
 8000550:	1b33      	subs	r3, r6, r4
 8000552:	0005      	movs	r5, r0
 8000554:	000c      	movs	r4, r1
 8000556:	e74d      	b.n	80003f4 <__aeabi_fadd+0xb4>
 8000558:	1b9f      	subs	r7, r3, r6
 800055a:	017a      	lsls	r2, r7, #5
 800055c:	d422      	bmi.n	80005a4 <__aeabi_fadd+0x264>
 800055e:	2f00      	cmp	r7, #0
 8000560:	d1a6      	bne.n	80004b0 <__aeabi_fadd+0x170>
 8000562:	2400      	movs	r4, #0
 8000564:	2000      	movs	r0, #0
 8000566:	2300      	movs	r3, #0
 8000568:	e757      	b.n	800041a <__aeabi_fadd+0xda>
 800056a:	199b      	adds	r3, r3, r6
 800056c:	2501      	movs	r5, #1
 800056e:	3201      	adds	r2, #1
 8000570:	0159      	lsls	r1, r3, #5
 8000572:	d400      	bmi.n	8000576 <__aeabi_fadd+0x236>
 8000574:	e740      	b.n	80003f8 <__aeabi_fadd+0xb8>
 8000576:	2101      	movs	r1, #1
 8000578:	4835      	ldr	r0, [pc, #212]	@ (8000650 <__aeabi_fadd+0x310>)
 800057a:	4019      	ands	r1, r3
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	4003      	ands	r3, r0
 8000580:	430b      	orrs	r3, r1
 8000582:	e7a7      	b.n	80004d4 <__aeabi_fadd+0x194>
 8000584:	28ff      	cmp	r0, #255	@ 0xff
 8000586:	d0a9      	beq.n	80004dc <__aeabi_fadd+0x19c>
 8000588:	2180      	movs	r1, #128	@ 0x80
 800058a:	04c9      	lsls	r1, r1, #19
 800058c:	430b      	orrs	r3, r1
 800058e:	e7b6      	b.n	80004fe <__aeabi_fadd+0x1be>
 8000590:	2aff      	cmp	r2, #255	@ 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x256>
 8000594:	e779      	b.n	800048a <__aeabi_fadd+0x14a>
 8000596:	199b      	adds	r3, r3, r6
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	0759      	lsls	r1, r3, #29
 800059c:	d000      	beq.n	80005a0 <__aeabi_fadd+0x260>
 800059e:	e72f      	b.n	8000400 <__aeabi_fadd+0xc0>
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	e7c1      	b.n	8000528 <__aeabi_fadd+0x1e8>
 80005a4:	000c      	movs	r4, r1
 80005a6:	1af7      	subs	r7, r6, r3
 80005a8:	e782      	b.n	80004b0 <__aeabi_fadd+0x170>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d12c      	bne.n	8000608 <__aeabi_fadd+0x2c8>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d193      	bne.n	80004da <__aeabi_fadd+0x19a>
 80005b2:	2380      	movs	r3, #128	@ 0x80
 80005b4:	2400      	movs	r4, #0
 80005b6:	20ff      	movs	r0, #255	@ 0xff
 80005b8:	03db      	lsls	r3, r3, #15
 80005ba:	e72e      	b.n	800041a <__aeabi_fadd+0xda>
 80005bc:	2501      	movs	r5, #1
 80005be:	1b9b      	subs	r3, r3, r6
 80005c0:	e718      	b.n	80003f4 <__aeabi_fadd+0xb4>
 80005c2:	0019      	movs	r1, r3
 80005c4:	2520      	movs	r5, #32
 80005c6:	40d1      	lsrs	r1, r2
 80005c8:	1aaa      	subs	r2, r5, r2
 80005ca:	4093      	lsls	r3, r2
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	4193      	sbcs	r3, r2
 80005d0:	430b      	orrs	r3, r1
 80005d2:	0005      	movs	r5, r0
 80005d4:	199b      	adds	r3, r3, r6
 80005d6:	e753      	b.n	8000480 <__aeabi_fadd+0x140>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x29e>
 80005dc:	e77e      	b.n	80004dc <__aeabi_fadd+0x19c>
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fadd+0x2a4>
 80005e2:	e77c      	b.n	80004de <__aeabi_fadd+0x19e>
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	4591      	cmp	r9, r2
 80005ea:	d302      	bcc.n	80005f2 <__aeabi_fadd+0x2b2>
 80005ec:	4594      	cmp	ip, r2
 80005ee:	d200      	bcs.n	80005f2 <__aeabi_fadd+0x2b2>
 80005f0:	0033      	movs	r3, r6
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	e753      	b.n	800049e <__aeabi_fadd+0x15e>
 80005f6:	000c      	movs	r4, r1
 80005f8:	1af3      	subs	r3, r6, r3
 80005fa:	3501      	adds	r5, #1
 80005fc:	e6fa      	b.n	80003f4 <__aeabi_fadd+0xb4>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d0af      	beq.n	8000562 <__aeabi_fadd+0x222>
 8000602:	000c      	movs	r4, r1
 8000604:	0033      	movs	r3, r6
 8000606:	e78d      	b.n	8000524 <__aeabi_fadd+0x1e4>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x2ce>
 800060c:	e767      	b.n	80004de <__aeabi_fadd+0x19e>
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	03d2      	lsls	r2, r2, #15
 8000612:	4591      	cmp	r9, r2
 8000614:	d3ed      	bcc.n	80005f2 <__aeabi_fadd+0x2b2>
 8000616:	4594      	cmp	ip, r2
 8000618:	d2eb      	bcs.n	80005f2 <__aeabi_fadd+0x2b2>
 800061a:	000c      	movs	r4, r1
 800061c:	0033      	movs	r3, r6
 800061e:	e7e8      	b.n	80005f2 <__aeabi_fadd+0x2b2>
 8000620:	0033      	movs	r3, r6
 8000622:	e77f      	b.n	8000524 <__aeabi_fadd+0x1e4>
 8000624:	199b      	adds	r3, r3, r6
 8000626:	2200      	movs	r2, #0
 8000628:	0159      	lsls	r1, r3, #5
 800062a:	d5b9      	bpl.n	80005a0 <__aeabi_fadd+0x260>
 800062c:	4a07      	ldr	r2, [pc, #28]	@ (800064c <__aeabi_fadd+0x30c>)
 800062e:	4013      	ands	r3, r2
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	2201      	movs	r2, #1
 8000634:	e778      	b.n	8000528 <__aeabi_fadd+0x1e8>
 8000636:	199b      	adds	r3, r3, r6
 8000638:	3201      	adds	r2, #1
 800063a:	3501      	adds	r5, #1
 800063c:	0159      	lsls	r1, r3, #5
 800063e:	d49a      	bmi.n	8000576 <__aeabi_fadd+0x236>
 8000640:	e6da      	b.n	80003f8 <__aeabi_fadd+0xb8>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d08d      	beq.n	8000562 <__aeabi_fadd+0x222>
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	e76e      	b.n	8000528 <__aeabi_fadd+0x1e8>
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	fbffffff 	.word	0xfbffffff
 8000650:	7dffffff 	.word	0x7dffffff

08000654 <__aeabi_fdiv>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	464f      	mov	r7, r9
 8000658:	4646      	mov	r6, r8
 800065a:	46d6      	mov	lr, sl
 800065c:	0244      	lsls	r4, r0, #9
 800065e:	b5c0      	push	{r6, r7, lr}
 8000660:	0047      	lsls	r7, r0, #1
 8000662:	1c0e      	adds	r6, r1, #0
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	0e3f      	lsrs	r7, r7, #24
 8000668:	0fc5      	lsrs	r5, r0, #31
 800066a:	2f00      	cmp	r7, #0
 800066c:	d03c      	beq.n	80006e8 <__aeabi_fdiv+0x94>
 800066e:	2fff      	cmp	r7, #255	@ 0xff
 8000670:	d042      	beq.n	80006f8 <__aeabi_fdiv+0xa4>
 8000672:	2300      	movs	r3, #0
 8000674:	2280      	movs	r2, #128	@ 0x80
 8000676:	4699      	mov	r9, r3
 8000678:	469a      	mov	sl, r3
 800067a:	00e4      	lsls	r4, r4, #3
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	4314      	orrs	r4, r2
 8000680:	3f7f      	subs	r7, #127	@ 0x7f
 8000682:	0273      	lsls	r3, r6, #9
 8000684:	0a5b      	lsrs	r3, r3, #9
 8000686:	4698      	mov	r8, r3
 8000688:	0073      	lsls	r3, r6, #1
 800068a:	0e1b      	lsrs	r3, r3, #24
 800068c:	0ff6      	lsrs	r6, r6, #31
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01b      	beq.n	80006ca <__aeabi_fdiv+0x76>
 8000692:	2bff      	cmp	r3, #255	@ 0xff
 8000694:	d013      	beq.n	80006be <__aeabi_fdiv+0x6a>
 8000696:	4642      	mov	r2, r8
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	00d2      	lsls	r2, r2, #3
 800069c:	04c9      	lsls	r1, r1, #19
 800069e:	4311      	orrs	r1, r2
 80006a0:	4688      	mov	r8, r1
 80006a2:	2000      	movs	r0, #0
 80006a4:	3b7f      	subs	r3, #127	@ 0x7f
 80006a6:	0029      	movs	r1, r5
 80006a8:	1aff      	subs	r7, r7, r3
 80006aa:	464b      	mov	r3, r9
 80006ac:	4071      	eors	r1, r6
 80006ae:	b2c9      	uxtb	r1, r1
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d900      	bls.n	80006b6 <__aeabi_fdiv+0x62>
 80006b4:	e0b5      	b.n	8000822 <__aeabi_fdiv+0x1ce>
 80006b6:	4a74      	ldr	r2, [pc, #464]	@ (8000888 <__aeabi_fdiv+0x234>)
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	58d3      	ldr	r3, [r2, r3]
 80006bc:	469f      	mov	pc, r3
 80006be:	4643      	mov	r3, r8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d13f      	bne.n	8000744 <__aeabi_fdiv+0xf0>
 80006c4:	3fff      	subs	r7, #255	@ 0xff
 80006c6:	3302      	adds	r3, #2
 80006c8:	e003      	b.n	80006d2 <__aeabi_fdiv+0x7e>
 80006ca:	4643      	mov	r3, r8
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d12d      	bne.n	800072c <__aeabi_fdiv+0xd8>
 80006d0:	2301      	movs	r3, #1
 80006d2:	0029      	movs	r1, r5
 80006d4:	464a      	mov	r2, r9
 80006d6:	4071      	eors	r1, r6
 80006d8:	b2c9      	uxtb	r1, r1
 80006da:	431a      	orrs	r2, r3
 80006dc:	2a0e      	cmp	r2, #14
 80006de:	d838      	bhi.n	8000752 <__aeabi_fdiv+0xfe>
 80006e0:	486a      	ldr	r0, [pc, #424]	@ (800088c <__aeabi_fdiv+0x238>)
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	5882      	ldr	r2, [r0, r2]
 80006e6:	4697      	mov	pc, r2
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d113      	bne.n	8000714 <__aeabi_fdiv+0xc0>
 80006ec:	2304      	movs	r3, #4
 80006ee:	4699      	mov	r9, r3
 80006f0:	3b03      	subs	r3, #3
 80006f2:	2700      	movs	r7, #0
 80006f4:	469a      	mov	sl, r3
 80006f6:	e7c4      	b.n	8000682 <__aeabi_fdiv+0x2e>
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d105      	bne.n	8000708 <__aeabi_fdiv+0xb4>
 80006fc:	2308      	movs	r3, #8
 80006fe:	4699      	mov	r9, r3
 8000700:	3b06      	subs	r3, #6
 8000702:	27ff      	movs	r7, #255	@ 0xff
 8000704:	469a      	mov	sl, r3
 8000706:	e7bc      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000708:	230c      	movs	r3, #12
 800070a:	4699      	mov	r9, r3
 800070c:	3b09      	subs	r3, #9
 800070e:	27ff      	movs	r7, #255	@ 0xff
 8000710:	469a      	mov	sl, r3
 8000712:	e7b6      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000714:	0020      	movs	r0, r4
 8000716:	f001 fcd7 	bl	80020c8 <__clzsi2>
 800071a:	2776      	movs	r7, #118	@ 0x76
 800071c:	1f43      	subs	r3, r0, #5
 800071e:	409c      	lsls	r4, r3
 8000720:	2300      	movs	r3, #0
 8000722:	427f      	negs	r7, r7
 8000724:	4699      	mov	r9, r3
 8000726:	469a      	mov	sl, r3
 8000728:	1a3f      	subs	r7, r7, r0
 800072a:	e7aa      	b.n	8000682 <__aeabi_fdiv+0x2e>
 800072c:	4640      	mov	r0, r8
 800072e:	f001 fccb 	bl	80020c8 <__clzsi2>
 8000732:	4642      	mov	r2, r8
 8000734:	1f43      	subs	r3, r0, #5
 8000736:	409a      	lsls	r2, r3
 8000738:	2376      	movs	r3, #118	@ 0x76
 800073a:	425b      	negs	r3, r3
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	4690      	mov	r8, r2
 8000740:	2000      	movs	r0, #0
 8000742:	e7b0      	b.n	80006a6 <__aeabi_fdiv+0x52>
 8000744:	2303      	movs	r3, #3
 8000746:	464a      	mov	r2, r9
 8000748:	431a      	orrs	r2, r3
 800074a:	4691      	mov	r9, r2
 800074c:	2003      	movs	r0, #3
 800074e:	33fc      	adds	r3, #252	@ 0xfc
 8000750:	e7a9      	b.n	80006a6 <__aeabi_fdiv+0x52>
 8000752:	000d      	movs	r5, r1
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	2200      	movs	r2, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	07ed      	lsls	r5, r5, #31
 800075c:	4310      	orrs	r0, r2
 800075e:	4328      	orrs	r0, r5
 8000760:	bce0      	pop	{r5, r6, r7}
 8000762:	46ba      	mov	sl, r7
 8000764:	46b1      	mov	r9, r6
 8000766:	46a8      	mov	r8, r5
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	000d      	movs	r5, r1
 800076c:	2000      	movs	r0, #0
 800076e:	2200      	movs	r2, #0
 8000770:	e7f2      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000772:	4653      	mov	r3, sl
 8000774:	2b02      	cmp	r3, #2
 8000776:	d0ed      	beq.n	8000754 <__aeabi_fdiv+0x100>
 8000778:	2b03      	cmp	r3, #3
 800077a:	d033      	beq.n	80007e4 <__aeabi_fdiv+0x190>
 800077c:	46a0      	mov	r8, r4
 800077e:	2b01      	cmp	r3, #1
 8000780:	d105      	bne.n	800078e <__aeabi_fdiv+0x13a>
 8000782:	2000      	movs	r0, #0
 8000784:	2200      	movs	r2, #0
 8000786:	e7e7      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000788:	0035      	movs	r5, r6
 800078a:	2803      	cmp	r0, #3
 800078c:	d07a      	beq.n	8000884 <__aeabi_fdiv+0x230>
 800078e:	003b      	movs	r3, r7
 8000790:	337f      	adds	r3, #127	@ 0x7f
 8000792:	2b00      	cmp	r3, #0
 8000794:	dd2d      	ble.n	80007f2 <__aeabi_fdiv+0x19e>
 8000796:	4642      	mov	r2, r8
 8000798:	0752      	lsls	r2, r2, #29
 800079a:	d007      	beq.n	80007ac <__aeabi_fdiv+0x158>
 800079c:	220f      	movs	r2, #15
 800079e:	4641      	mov	r1, r8
 80007a0:	400a      	ands	r2, r1
 80007a2:	2a04      	cmp	r2, #4
 80007a4:	d002      	beq.n	80007ac <__aeabi_fdiv+0x158>
 80007a6:	2204      	movs	r2, #4
 80007a8:	4694      	mov	ip, r2
 80007aa:	44e0      	add	r8, ip
 80007ac:	4642      	mov	r2, r8
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	d505      	bpl.n	80007be <__aeabi_fdiv+0x16a>
 80007b2:	4642      	mov	r2, r8
 80007b4:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <__aeabi_fdiv+0x23c>)
 80007b6:	401a      	ands	r2, r3
 80007b8:	003b      	movs	r3, r7
 80007ba:	4690      	mov	r8, r2
 80007bc:	3380      	adds	r3, #128	@ 0x80
 80007be:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c0:	dcc8      	bgt.n	8000754 <__aeabi_fdiv+0x100>
 80007c2:	4642      	mov	r2, r8
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	0a52      	lsrs	r2, r2, #9
 80007c8:	b2d8      	uxtb	r0, r3
 80007ca:	e7c5      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	2500      	movs	r5, #0
 80007d0:	20ff      	movs	r0, #255	@ 0xff
 80007d2:	03d2      	lsls	r2, r2, #15
 80007d4:	e7c0      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	03d2      	lsls	r2, r2, #15
 80007da:	4214      	tst	r4, r2
 80007dc:	d002      	beq.n	80007e4 <__aeabi_fdiv+0x190>
 80007de:	4643      	mov	r3, r8
 80007e0:	4213      	tst	r3, r2
 80007e2:	d049      	beq.n	8000878 <__aeabi_fdiv+0x224>
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	03d2      	lsls	r2, r2, #15
 80007e8:	4322      	orrs	r2, r4
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	20ff      	movs	r0, #255	@ 0xff
 80007ee:	0a52      	lsrs	r2, r2, #9
 80007f0:	e7b2      	b.n	8000758 <__aeabi_fdiv+0x104>
 80007f2:	2201      	movs	r2, #1
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	2b1b      	cmp	r3, #27
 80007f8:	dcc3      	bgt.n	8000782 <__aeabi_fdiv+0x12e>
 80007fa:	4642      	mov	r2, r8
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	4643      	mov	r3, r8
 8000800:	379e      	adds	r7, #158	@ 0x9e
 8000802:	40bb      	lsls	r3, r7
 8000804:	1e59      	subs	r1, r3, #1
 8000806:	418b      	sbcs	r3, r1
 8000808:	431a      	orrs	r2, r3
 800080a:	0753      	lsls	r3, r2, #29
 800080c:	d004      	beq.n	8000818 <__aeabi_fdiv+0x1c4>
 800080e:	230f      	movs	r3, #15
 8000810:	4013      	ands	r3, r2
 8000812:	2b04      	cmp	r3, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_fdiv+0x1c4>
 8000816:	3204      	adds	r2, #4
 8000818:	0153      	lsls	r3, r2, #5
 800081a:	d529      	bpl.n	8000870 <__aeabi_fdiv+0x21c>
 800081c:	2001      	movs	r0, #1
 800081e:	2200      	movs	r2, #0
 8000820:	e79a      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000822:	4642      	mov	r2, r8
 8000824:	0163      	lsls	r3, r4, #5
 8000826:	0155      	lsls	r5, r2, #5
 8000828:	42ab      	cmp	r3, r5
 800082a:	d215      	bcs.n	8000858 <__aeabi_fdiv+0x204>
 800082c:	201b      	movs	r0, #27
 800082e:	2200      	movs	r2, #0
 8000830:	3f01      	subs	r7, #1
 8000832:	2601      	movs	r6, #1
 8000834:	001c      	movs	r4, r3
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2c00      	cmp	r4, #0
 800083c:	db01      	blt.n	8000842 <__aeabi_fdiv+0x1ee>
 800083e:	429d      	cmp	r5, r3
 8000840:	d801      	bhi.n	8000846 <__aeabi_fdiv+0x1f2>
 8000842:	1b5b      	subs	r3, r3, r5
 8000844:	4332      	orrs	r2, r6
 8000846:	3801      	subs	r0, #1
 8000848:	2800      	cmp	r0, #0
 800084a:	d1f3      	bne.n	8000834 <__aeabi_fdiv+0x1e0>
 800084c:	1e58      	subs	r0, r3, #1
 800084e:	4183      	sbcs	r3, r0
 8000850:	4313      	orrs	r3, r2
 8000852:	4698      	mov	r8, r3
 8000854:	000d      	movs	r5, r1
 8000856:	e79a      	b.n	800078e <__aeabi_fdiv+0x13a>
 8000858:	201a      	movs	r0, #26
 800085a:	2201      	movs	r2, #1
 800085c:	1b5b      	subs	r3, r3, r5
 800085e:	e7e8      	b.n	8000832 <__aeabi_fdiv+0x1de>
 8000860:	3b02      	subs	r3, #2
 8000862:	425a      	negs	r2, r3
 8000864:	4153      	adcs	r3, r2
 8000866:	425b      	negs	r3, r3
 8000868:	0035      	movs	r5, r6
 800086a:	2200      	movs	r2, #0
 800086c:	b2d8      	uxtb	r0, r3
 800086e:	e773      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	2000      	movs	r0, #0
 8000874:	0a52      	lsrs	r2, r2, #9
 8000876:	e76f      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000878:	431a      	orrs	r2, r3
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	0035      	movs	r5, r6
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	0a52      	lsrs	r2, r2, #9
 8000882:	e769      	b.n	8000758 <__aeabi_fdiv+0x104>
 8000884:	4644      	mov	r4, r8
 8000886:	e7ad      	b.n	80007e4 <__aeabi_fdiv+0x190>
 8000888:	0800612c 	.word	0x0800612c
 800088c:	0800616c 	.word	0x0800616c
 8000890:	f7ffffff 	.word	0xf7ffffff

08000894 <__eqsf2>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0042      	lsls	r2, r0, #1
 8000898:	024e      	lsls	r6, r1, #9
 800089a:	004c      	lsls	r4, r1, #1
 800089c:	0245      	lsls	r5, r0, #9
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	0e12      	lsrs	r2, r2, #24
 80008a2:	0fc3      	lsrs	r3, r0, #31
 80008a4:	0a76      	lsrs	r6, r6, #9
 80008a6:	0e24      	lsrs	r4, r4, #24
 80008a8:	0fc9      	lsrs	r1, r1, #31
 80008aa:	2aff      	cmp	r2, #255	@ 0xff
 80008ac:	d010      	beq.n	80008d0 <__eqsf2+0x3c>
 80008ae:	2cff      	cmp	r4, #255	@ 0xff
 80008b0:	d00c      	beq.n	80008cc <__eqsf2+0x38>
 80008b2:	2001      	movs	r0, #1
 80008b4:	42a2      	cmp	r2, r4
 80008b6:	d10a      	bne.n	80008ce <__eqsf2+0x3a>
 80008b8:	42b5      	cmp	r5, r6
 80008ba:	d108      	bne.n	80008ce <__eqsf2+0x3a>
 80008bc:	428b      	cmp	r3, r1
 80008be:	d00f      	beq.n	80008e0 <__eqsf2+0x4c>
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d104      	bne.n	80008ce <__eqsf2+0x3a>
 80008c4:	0028      	movs	r0, r5
 80008c6:	1e43      	subs	r3, r0, #1
 80008c8:	4198      	sbcs	r0, r3
 80008ca:	e000      	b.n	80008ce <__eqsf2+0x3a>
 80008cc:	2001      	movs	r0, #1
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	2001      	movs	r0, #1
 80008d2:	2cff      	cmp	r4, #255	@ 0xff
 80008d4:	d1fb      	bne.n	80008ce <__eqsf2+0x3a>
 80008d6:	4335      	orrs	r5, r6
 80008d8:	d1f9      	bne.n	80008ce <__eqsf2+0x3a>
 80008da:	404b      	eors	r3, r1
 80008dc:	0018      	movs	r0, r3
 80008de:	e7f6      	b.n	80008ce <__eqsf2+0x3a>
 80008e0:	2000      	movs	r0, #0
 80008e2:	e7f4      	b.n	80008ce <__eqsf2+0x3a>

080008e4 <__gesf2>:
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	0042      	lsls	r2, r0, #1
 80008e8:	0244      	lsls	r4, r0, #9
 80008ea:	024d      	lsls	r5, r1, #9
 80008ec:	0fc3      	lsrs	r3, r0, #31
 80008ee:	0048      	lsls	r0, r1, #1
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	0e12      	lsrs	r2, r2, #24
 80008f4:	0a6d      	lsrs	r5, r5, #9
 80008f6:	0e00      	lsrs	r0, r0, #24
 80008f8:	0fc9      	lsrs	r1, r1, #31
 80008fa:	2aff      	cmp	r2, #255	@ 0xff
 80008fc:	d019      	beq.n	8000932 <__gesf2+0x4e>
 80008fe:	28ff      	cmp	r0, #255	@ 0xff
 8000900:	d00b      	beq.n	800091a <__gesf2+0x36>
 8000902:	2a00      	cmp	r2, #0
 8000904:	d11e      	bne.n	8000944 <__gesf2+0x60>
 8000906:	2800      	cmp	r0, #0
 8000908:	d10b      	bne.n	8000922 <__gesf2+0x3e>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d027      	beq.n	800095e <__gesf2+0x7a>
 800090e:	2c00      	cmp	r4, #0
 8000910:	d134      	bne.n	800097c <__gesf2+0x98>
 8000912:	2900      	cmp	r1, #0
 8000914:	d02f      	beq.n	8000976 <__gesf2+0x92>
 8000916:	0008      	movs	r0, r1
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	2d00      	cmp	r5, #0
 800091c:	d128      	bne.n	8000970 <__gesf2+0x8c>
 800091e:	2a00      	cmp	r2, #0
 8000920:	d101      	bne.n	8000926 <__gesf2+0x42>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d0f5      	beq.n	8000912 <__gesf2+0x2e>
 8000926:	428b      	cmp	r3, r1
 8000928:	d107      	bne.n	800093a <__gesf2+0x56>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d023      	beq.n	8000976 <__gesf2+0x92>
 800092e:	0018      	movs	r0, r3
 8000930:	e7f2      	b.n	8000918 <__gesf2+0x34>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d11c      	bne.n	8000970 <__gesf2+0x8c>
 8000936:	28ff      	cmp	r0, #255	@ 0xff
 8000938:	d014      	beq.n	8000964 <__gesf2+0x80>
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	2302      	movs	r3, #2
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	e7e9      	b.n	8000918 <__gesf2+0x34>
 8000944:	2800      	cmp	r0, #0
 8000946:	d0f8      	beq.n	800093a <__gesf2+0x56>
 8000948:	428b      	cmp	r3, r1
 800094a:	d1f6      	bne.n	800093a <__gesf2+0x56>
 800094c:	4282      	cmp	r2, r0
 800094e:	dcf4      	bgt.n	800093a <__gesf2+0x56>
 8000950:	dbeb      	blt.n	800092a <__gesf2+0x46>
 8000952:	42ac      	cmp	r4, r5
 8000954:	d8f1      	bhi.n	800093a <__gesf2+0x56>
 8000956:	2000      	movs	r0, #0
 8000958:	42ac      	cmp	r4, r5
 800095a:	d2dd      	bcs.n	8000918 <__gesf2+0x34>
 800095c:	e7e5      	b.n	800092a <__gesf2+0x46>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d0da      	beq.n	8000918 <__gesf2+0x34>
 8000962:	e7ea      	b.n	800093a <__gesf2+0x56>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d103      	bne.n	8000970 <__gesf2+0x8c>
 8000968:	428b      	cmp	r3, r1
 800096a:	d1e6      	bne.n	800093a <__gesf2+0x56>
 800096c:	2000      	movs	r0, #0
 800096e:	e7d3      	b.n	8000918 <__gesf2+0x34>
 8000970:	2002      	movs	r0, #2
 8000972:	4240      	negs	r0, r0
 8000974:	e7d0      	b.n	8000918 <__gesf2+0x34>
 8000976:	2001      	movs	r0, #1
 8000978:	4240      	negs	r0, r0
 800097a:	e7cd      	b.n	8000918 <__gesf2+0x34>
 800097c:	428b      	cmp	r3, r1
 800097e:	d0e8      	beq.n	8000952 <__gesf2+0x6e>
 8000980:	e7db      	b.n	800093a <__gesf2+0x56>
 8000982:	46c0      	nop			@ (mov r8, r8)

08000984 <__lesf2>:
 8000984:	b530      	push	{r4, r5, lr}
 8000986:	0042      	lsls	r2, r0, #1
 8000988:	0244      	lsls	r4, r0, #9
 800098a:	024d      	lsls	r5, r1, #9
 800098c:	0fc3      	lsrs	r3, r0, #31
 800098e:	0048      	lsls	r0, r1, #1
 8000990:	0a64      	lsrs	r4, r4, #9
 8000992:	0e12      	lsrs	r2, r2, #24
 8000994:	0a6d      	lsrs	r5, r5, #9
 8000996:	0e00      	lsrs	r0, r0, #24
 8000998:	0fc9      	lsrs	r1, r1, #31
 800099a:	2aff      	cmp	r2, #255	@ 0xff
 800099c:	d01a      	beq.n	80009d4 <__lesf2+0x50>
 800099e:	28ff      	cmp	r0, #255	@ 0xff
 80009a0:	d00e      	beq.n	80009c0 <__lesf2+0x3c>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d11e      	bne.n	80009e4 <__lesf2+0x60>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d10e      	bne.n	80009c8 <__lesf2+0x44>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d02a      	beq.n	8000a04 <__lesf2+0x80>
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d00c      	beq.n	80009cc <__lesf2+0x48>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d01d      	beq.n	80009f2 <__lesf2+0x6e>
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	2302      	movs	r3, #2
 80009ba:	4018      	ands	r0, r3
 80009bc:	3801      	subs	r0, #1
 80009be:	e010      	b.n	80009e2 <__lesf2+0x5e>
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d10d      	bne.n	80009e0 <__lesf2+0x5c>
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d120      	bne.n	8000a0a <__lesf2+0x86>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d11e      	bne.n	8000a0a <__lesf2+0x86>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	d023      	beq.n	8000a18 <__lesf2+0x94>
 80009d0:	0008      	movs	r0, r1
 80009d2:	e006      	b.n	80009e2 <__lesf2+0x5e>
 80009d4:	2c00      	cmp	r4, #0
 80009d6:	d103      	bne.n	80009e0 <__lesf2+0x5c>
 80009d8:	28ff      	cmp	r0, #255	@ 0xff
 80009da:	d1ec      	bne.n	80009b6 <__lesf2+0x32>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d017      	beq.n	8000a10 <__lesf2+0x8c>
 80009e0:	2002      	movs	r0, #2
 80009e2:	bd30      	pop	{r4, r5, pc}
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d0e6      	beq.n	80009b6 <__lesf2+0x32>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d1e4      	bne.n	80009b6 <__lesf2+0x32>
 80009ec:	4282      	cmp	r2, r0
 80009ee:	dce2      	bgt.n	80009b6 <__lesf2+0x32>
 80009f0:	db04      	blt.n	80009fc <__lesf2+0x78>
 80009f2:	42ac      	cmp	r4, r5
 80009f4:	d8df      	bhi.n	80009b6 <__lesf2+0x32>
 80009f6:	2000      	movs	r0, #0
 80009f8:	42ac      	cmp	r4, r5
 80009fa:	d2f2      	bcs.n	80009e2 <__lesf2+0x5e>
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00b      	beq.n	8000a18 <__lesf2+0x94>
 8000a00:	0018      	movs	r0, r3
 8000a02:	e7ee      	b.n	80009e2 <__lesf2+0x5e>
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	d0ec      	beq.n	80009e2 <__lesf2+0x5e>
 8000a08:	e7d5      	b.n	80009b6 <__lesf2+0x32>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d1d3      	bne.n	80009b6 <__lesf2+0x32>
 8000a0e:	e7f5      	b.n	80009fc <__lesf2+0x78>
 8000a10:	2000      	movs	r0, #0
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d0e5      	beq.n	80009e2 <__lesf2+0x5e>
 8000a16:	e7ce      	b.n	80009b6 <__lesf2+0x32>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	4240      	negs	r0, r0
 8000a1c:	e7e1      	b.n	80009e2 <__lesf2+0x5e>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__aeabi_fmul>:
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	464f      	mov	r7, r9
 8000a24:	4646      	mov	r6, r8
 8000a26:	46d6      	mov	lr, sl
 8000a28:	0243      	lsls	r3, r0, #9
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	0045      	lsls	r5, r0, #1
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	4699      	mov	r9, r3
 8000a32:	1c0f      	adds	r7, r1, #0
 8000a34:	0e2d      	lsrs	r5, r5, #24
 8000a36:	0fc6      	lsrs	r6, r0, #31
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fmul+0x1e>
 8000a3c:	e088      	b.n	8000b50 <__aeabi_fmul+0x130>
 8000a3e:	2dff      	cmp	r5, #255	@ 0xff
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fmul+0x24>
 8000a42:	e08d      	b.n	8000b60 <__aeabi_fmul+0x140>
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	04d2      	lsls	r2, r2, #19
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4691      	mov	r9, r2
 8000a50:	4698      	mov	r8, r3
 8000a52:	469a      	mov	sl, r3
 8000a54:	3d7f      	subs	r5, #127	@ 0x7f
 8000a56:	027c      	lsls	r4, r7, #9
 8000a58:	007b      	lsls	r3, r7, #1
 8000a5a:	0a64      	lsrs	r4, r4, #9
 8000a5c:	0e1b      	lsrs	r3, r3, #24
 8000a5e:	0fff      	lsrs	r7, r7, #31
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d068      	beq.n	8000b36 <__aeabi_fmul+0x116>
 8000a64:	2bff      	cmp	r3, #255	@ 0xff
 8000a66:	d021      	beq.n	8000aac <__aeabi_fmul+0x8c>
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	00e4      	lsls	r4, r4, #3
 8000a6c:	04d2      	lsls	r2, r2, #19
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	4642      	mov	r2, r8
 8000a72:	3b7f      	subs	r3, #127	@ 0x7f
 8000a74:	195b      	adds	r3, r3, r5
 8000a76:	2100      	movs	r1, #0
 8000a78:	1c5d      	adds	r5, r3, #1
 8000a7a:	2a0a      	cmp	r2, #10
 8000a7c:	dc2e      	bgt.n	8000adc <__aeabi_fmul+0xbc>
 8000a7e:	407e      	eors	r6, r7
 8000a80:	4642      	mov	r2, r8
 8000a82:	2a02      	cmp	r2, #2
 8000a84:	dc23      	bgt.n	8000ace <__aeabi_fmul+0xae>
 8000a86:	3a01      	subs	r2, #1
 8000a88:	2a01      	cmp	r2, #1
 8000a8a:	d900      	bls.n	8000a8e <__aeabi_fmul+0x6e>
 8000a8c:	e0bd      	b.n	8000c0a <__aeabi_fmul+0x1ea>
 8000a8e:	2902      	cmp	r1, #2
 8000a90:	d06e      	beq.n	8000b70 <__aeabi_fmul+0x150>
 8000a92:	2901      	cmp	r1, #1
 8000a94:	d12c      	bne.n	8000af0 <__aeabi_fmul+0xd0>
 8000a96:	2000      	movs	r0, #0
 8000a98:	2200      	movs	r2, #0
 8000a9a:	05c0      	lsls	r0, r0, #23
 8000a9c:	07f6      	lsls	r6, r6, #31
 8000a9e:	4310      	orrs	r0, r2
 8000aa0:	4330      	orrs	r0, r6
 8000aa2:	bce0      	pop	{r5, r6, r7}
 8000aa4:	46ba      	mov	sl, r7
 8000aa6:	46b1      	mov	r9, r6
 8000aa8:	46a8      	mov	r8, r5
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	002b      	movs	r3, r5
 8000aae:	33ff      	adds	r3, #255	@ 0xff
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	d065      	beq.n	8000b80 <__aeabi_fmul+0x160>
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	4311      	orrs	r1, r2
 8000aba:	0032      	movs	r2, r6
 8000abc:	3501      	adds	r5, #1
 8000abe:	4688      	mov	r8, r1
 8000ac0:	407a      	eors	r2, r7
 8000ac2:	35ff      	adds	r5, #255	@ 0xff
 8000ac4:	290a      	cmp	r1, #10
 8000ac6:	dd00      	ble.n	8000aca <__aeabi_fmul+0xaa>
 8000ac8:	e0d8      	b.n	8000c7c <__aeabi_fmul+0x25c>
 8000aca:	0016      	movs	r6, r2
 8000acc:	2103      	movs	r1, #3
 8000ace:	4640      	mov	r0, r8
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4082      	lsls	r2, r0
 8000ad4:	20a6      	movs	r0, #166	@ 0xa6
 8000ad6:	00c0      	lsls	r0, r0, #3
 8000ad8:	4202      	tst	r2, r0
 8000ada:	d020      	beq.n	8000b1e <__aeabi_fmul+0xfe>
 8000adc:	4653      	mov	r3, sl
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d046      	beq.n	8000b70 <__aeabi_fmul+0x150>
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fmul+0xc8>
 8000ae6:	e0bb      	b.n	8000c60 <__aeabi_fmul+0x240>
 8000ae8:	4651      	mov	r1, sl
 8000aea:	464c      	mov	r4, r9
 8000aec:	2901      	cmp	r1, #1
 8000aee:	d0d2      	beq.n	8000a96 <__aeabi_fmul+0x76>
 8000af0:	002b      	movs	r3, r5
 8000af2:	337f      	adds	r3, #127	@ 0x7f
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	dd70      	ble.n	8000bda <__aeabi_fmul+0x1ba>
 8000af8:	0762      	lsls	r2, r4, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fmul+0xe6>
 8000afc:	220f      	movs	r2, #15
 8000afe:	4022      	ands	r2, r4
 8000b00:	2a04      	cmp	r2, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fmul+0xe6>
 8000b04:	3404      	adds	r4, #4
 8000b06:	0122      	lsls	r2, r4, #4
 8000b08:	d503      	bpl.n	8000b12 <__aeabi_fmul+0xf2>
 8000b0a:	4b63      	ldr	r3, [pc, #396]	@ (8000c98 <__aeabi_fmul+0x278>)
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	002b      	movs	r3, r5
 8000b10:	3380      	adds	r3, #128	@ 0x80
 8000b12:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b14:	dc2c      	bgt.n	8000b70 <__aeabi_fmul+0x150>
 8000b16:	01a2      	lsls	r2, r4, #6
 8000b18:	0a52      	lsrs	r2, r2, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e7bd      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b1e:	2090      	movs	r0, #144	@ 0x90
 8000b20:	0080      	lsls	r0, r0, #2
 8000b22:	4202      	tst	r2, r0
 8000b24:	d127      	bne.n	8000b76 <__aeabi_fmul+0x156>
 8000b26:	38b9      	subs	r0, #185	@ 0xb9
 8000b28:	38ff      	subs	r0, #255	@ 0xff
 8000b2a:	4210      	tst	r0, r2
 8000b2c:	d06d      	beq.n	8000c0a <__aeabi_fmul+0x1ea>
 8000b2e:	003e      	movs	r6, r7
 8000b30:	46a1      	mov	r9, r4
 8000b32:	468a      	mov	sl, r1
 8000b34:	e7d2      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d141      	bne.n	8000bbe <__aeabi_fmul+0x19e>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	4642      	mov	r2, r8
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	4690      	mov	r8, r2
 8000b42:	002b      	movs	r3, r5
 8000b44:	4642      	mov	r2, r8
 8000b46:	2101      	movs	r1, #1
 8000b48:	1c5d      	adds	r5, r3, #1
 8000b4a:	2a0a      	cmp	r2, #10
 8000b4c:	dd97      	ble.n	8000a7e <__aeabi_fmul+0x5e>
 8000b4e:	e7c5      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d126      	bne.n	8000ba2 <__aeabi_fmul+0x182>
 8000b54:	2304      	movs	r3, #4
 8000b56:	4698      	mov	r8, r3
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	e77a      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d118      	bne.n	8000b96 <__aeabi_fmul+0x176>
 8000b64:	2308      	movs	r3, #8
 8000b66:	4698      	mov	r8, r3
 8000b68:	3b06      	subs	r3, #6
 8000b6a:	25ff      	movs	r5, #255	@ 0xff
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	e772      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000b70:	20ff      	movs	r0, #255	@ 0xff
 8000b72:	2200      	movs	r2, #0
 8000b74:	e791      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	2600      	movs	r6, #0
 8000b7a:	20ff      	movs	r0, #255	@ 0xff
 8000b7c:	03d2      	lsls	r2, r2, #15
 8000b7e:	e78c      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000b80:	4641      	mov	r1, r8
 8000b82:	2202      	movs	r2, #2
 8000b84:	3501      	adds	r5, #1
 8000b86:	4311      	orrs	r1, r2
 8000b88:	4688      	mov	r8, r1
 8000b8a:	35ff      	adds	r5, #255	@ 0xff
 8000b8c:	290a      	cmp	r1, #10
 8000b8e:	dca5      	bgt.n	8000adc <__aeabi_fmul+0xbc>
 8000b90:	2102      	movs	r1, #2
 8000b92:	407e      	eors	r6, r7
 8000b94:	e774      	b.n	8000a80 <__aeabi_fmul+0x60>
 8000b96:	230c      	movs	r3, #12
 8000b98:	4698      	mov	r8, r3
 8000b9a:	3b09      	subs	r3, #9
 8000b9c:	25ff      	movs	r5, #255	@ 0xff
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	e759      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fa90 	bl	80020c8 <__clzsi2>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	1f43      	subs	r3, r0, #5
 8000bac:	2576      	movs	r5, #118	@ 0x76
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	426d      	negs	r5, r5
 8000bb4:	4691      	mov	r9, r2
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	469a      	mov	sl, r3
 8000bba:	1a2d      	subs	r5, r5, r0
 8000bbc:	e74b      	b.n	8000a56 <__aeabi_fmul+0x36>
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f001 fa82 	bl	80020c8 <__clzsi2>
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	1f43      	subs	r3, r0, #5
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	1a2b      	subs	r3, r5, r0
 8000bcc:	3b76      	subs	r3, #118	@ 0x76
 8000bce:	2100      	movs	r1, #0
 8000bd0:	1c5d      	adds	r5, r3, #1
 8000bd2:	2a0a      	cmp	r2, #10
 8000bd4:	dc00      	bgt.n	8000bd8 <__aeabi_fmul+0x1b8>
 8000bd6:	e752      	b.n	8000a7e <__aeabi_fmul+0x5e>
 8000bd8:	e780      	b.n	8000adc <__aeabi_fmul+0xbc>
 8000bda:	2201      	movs	r2, #1
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b1b      	cmp	r3, #27
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_fmul+0x1c4>
 8000be2:	e758      	b.n	8000a96 <__aeabi_fmul+0x76>
 8000be4:	359e      	adds	r5, #158	@ 0x9e
 8000be6:	0022      	movs	r2, r4
 8000be8:	40ac      	lsls	r4, r5
 8000bea:	40da      	lsrs	r2, r3
 8000bec:	1e63      	subs	r3, r4, #1
 8000bee:	419c      	sbcs	r4, r3
 8000bf0:	4322      	orrs	r2, r4
 8000bf2:	0753      	lsls	r3, r2, #29
 8000bf4:	d004      	beq.n	8000c00 <__aeabi_fmul+0x1e0>
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x1e0>
 8000bfe:	3204      	adds	r2, #4
 8000c00:	0153      	lsls	r3, r2, #5
 8000c02:	d537      	bpl.n	8000c74 <__aeabi_fmul+0x254>
 8000c04:	2001      	movs	r0, #1
 8000c06:	2200      	movs	r2, #0
 8000c08:	e747      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	0424      	lsls	r4, r4, #16
 8000c10:	0c24      	lsrs	r4, r4, #16
 8000c12:	0027      	movs	r7, r4
 8000c14:	0c10      	lsrs	r0, r2, #16
 8000c16:	0412      	lsls	r2, r2, #16
 8000c18:	0c12      	lsrs	r2, r2, #16
 8000c1a:	4344      	muls	r4, r0
 8000c1c:	4357      	muls	r7, r2
 8000c1e:	4348      	muls	r0, r1
 8000c20:	4351      	muls	r1, r2
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	1909      	adds	r1, r1, r4
 8000c26:	1852      	adds	r2, r2, r1
 8000c28:	4294      	cmp	r4, r2
 8000c2a:	d903      	bls.n	8000c34 <__aeabi_fmul+0x214>
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	0249      	lsls	r1, r1, #9
 8000c30:	468c      	mov	ip, r1
 8000c32:	4460      	add	r0, ip
 8000c34:	043f      	lsls	r7, r7, #16
 8000c36:	0411      	lsls	r1, r2, #16
 8000c38:	0c3f      	lsrs	r7, r7, #16
 8000c3a:	19c9      	adds	r1, r1, r7
 8000c3c:	018c      	lsls	r4, r1, #6
 8000c3e:	1e67      	subs	r7, r4, #1
 8000c40:	41bc      	sbcs	r4, r7
 8000c42:	0c12      	lsrs	r2, r2, #16
 8000c44:	0e89      	lsrs	r1, r1, #26
 8000c46:	1812      	adds	r2, r2, r0
 8000c48:	430c      	orrs	r4, r1
 8000c4a:	0192      	lsls	r2, r2, #6
 8000c4c:	4314      	orrs	r4, r2
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	d50e      	bpl.n	8000c70 <__aeabi_fmul+0x250>
 8000c52:	2301      	movs	r3, #1
 8000c54:	0862      	lsrs	r2, r4, #1
 8000c56:	401c      	ands	r4, r3
 8000c58:	4314      	orrs	r4, r2
 8000c5a:	e749      	b.n	8000af0 <__aeabi_fmul+0xd0>
 8000c5c:	003e      	movs	r6, r7
 8000c5e:	46a1      	mov	r9, r4
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	464b      	mov	r3, r9
 8000c64:	03d2      	lsls	r2, r2, #15
 8000c66:	431a      	orrs	r2, r3
 8000c68:	0252      	lsls	r2, r2, #9
 8000c6a:	20ff      	movs	r0, #255	@ 0xff
 8000c6c:	0a52      	lsrs	r2, r2, #9
 8000c6e:	e714      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c70:	001d      	movs	r5, r3
 8000c72:	e73d      	b.n	8000af0 <__aeabi_fmul+0xd0>
 8000c74:	0192      	lsls	r2, r2, #6
 8000c76:	2000      	movs	r0, #0
 8000c78:	0a52      	lsrs	r2, r2, #9
 8000c7a:	e70e      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c7c:	290f      	cmp	r1, #15
 8000c7e:	d1ed      	bne.n	8000c5c <__aeabi_fmul+0x23c>
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	464b      	mov	r3, r9
 8000c84:	03d2      	lsls	r2, r2, #15
 8000c86:	4213      	tst	r3, r2
 8000c88:	d0ea      	beq.n	8000c60 <__aeabi_fmul+0x240>
 8000c8a:	4214      	tst	r4, r2
 8000c8c:	d1e8      	bne.n	8000c60 <__aeabi_fmul+0x240>
 8000c8e:	003e      	movs	r6, r7
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	4322      	orrs	r2, r4
 8000c94:	e701      	b.n	8000a9a <__aeabi_fmul+0x7a>
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	f7ffffff 	.word	0xf7ffffff

08000c9c <__aeabi_fsub>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	46ce      	mov	lr, r9
 8000ca2:	024e      	lsls	r6, r1, #9
 8000ca4:	0243      	lsls	r3, r0, #9
 8000ca6:	0045      	lsls	r5, r0, #1
 8000ca8:	0a72      	lsrs	r2, r6, #9
 8000caa:	0fc4      	lsrs	r4, r0, #31
 8000cac:	0048      	lsls	r0, r1, #1
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	0a5f      	lsrs	r7, r3, #9
 8000cb4:	0e2d      	lsrs	r5, r5, #24
 8000cb6:	099b      	lsrs	r3, r3, #6
 8000cb8:	0e00      	lsrs	r0, r0, #24
 8000cba:	0fc9      	lsrs	r1, r1, #31
 8000cbc:	09b6      	lsrs	r6, r6, #6
 8000cbe:	28ff      	cmp	r0, #255	@ 0xff
 8000cc0:	d024      	beq.n	8000d0c <__aeabi_fsub+0x70>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4051      	eors	r1, r2
 8000cc6:	1a2a      	subs	r2, r5, r0
 8000cc8:	428c      	cmp	r4, r1
 8000cca:	d00f      	beq.n	8000cec <__aeabi_fsub+0x50>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_fsub+0x36>
 8000cd0:	e16a      	b.n	8000fa8 <__aeabi_fsub+0x30c>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d135      	bne.n	8000d42 <__aeabi_fsub+0xa6>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x40>
 8000cda:	e0a2      	b.n	8000e22 <__aeabi_fsub+0x186>
 8000cdc:	1e51      	subs	r1, r2, #1
 8000cde:	2a01      	cmp	r2, #1
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x48>
 8000ce2:	e124      	b.n	8000f2e <__aeabi_fsub+0x292>
 8000ce4:	2aff      	cmp	r2, #255	@ 0xff
 8000ce6:	d021      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000ce8:	000a      	movs	r2, r1
 8000cea:	e02f      	b.n	8000d4c <__aeabi_fsub+0xb0>
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0x56>
 8000cf0:	e167      	b.n	8000fc2 <__aeabi_fsub+0x326>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d05e      	beq.n	8000db4 <__aeabi_fsub+0x118>
 8000cf6:	2dff      	cmp	r5, #255	@ 0xff
 8000cf8:	d018      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000cfa:	2180      	movs	r1, #128	@ 0x80
 8000cfc:	04c9      	lsls	r1, r1, #19
 8000cfe:	430e      	orrs	r6, r1
 8000d00:	2a1b      	cmp	r2, #27
 8000d02:	dc00      	bgt.n	8000d06 <__aeabi_fsub+0x6a>
 8000d04:	e076      	b.n	8000df4 <__aeabi_fsub+0x158>
 8000d06:	002a      	movs	r2, r5
 8000d08:	3301      	adds	r3, #1
 8000d0a:	e032      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000d0c:	002a      	movs	r2, r5
 8000d0e:	3aff      	subs	r2, #255	@ 0xff
 8000d10:	4691      	mov	r9, r2
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d042      	beq.n	8000d9c <__aeabi_fsub+0x100>
 8000d16:	428c      	cmp	r4, r1
 8000d18:	d055      	beq.n	8000dc6 <__aeabi_fsub+0x12a>
 8000d1a:	464a      	mov	r2, r9
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_fsub+0x86>
 8000d20:	e09c      	b.n	8000e5c <__aeabi_fsub+0x1c0>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x8c>
 8000d26:	e077      	b.n	8000e18 <__aeabi_fsub+0x17c>
 8000d28:	000c      	movs	r4, r1
 8000d2a:	0033      	movs	r3, r6
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x98>
 8000d32:	e06e      	b.n	8000e12 <__aeabi_fsub+0x176>
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	03d2      	lsls	r2, r2, #15
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	0a5b      	lsrs	r3, r3, #9
 8000d40:	e024      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000d42:	2dff      	cmp	r5, #255	@ 0xff
 8000d44:	d0f2      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000d46:	2180      	movs	r1, #128	@ 0x80
 8000d48:	04c9      	lsls	r1, r1, #19
 8000d4a:	430e      	orrs	r6, r1
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2a1b      	cmp	r2, #27
 8000d50:	dc08      	bgt.n	8000d64 <__aeabi_fsub+0xc8>
 8000d52:	0031      	movs	r1, r6
 8000d54:	2020      	movs	r0, #32
 8000d56:	40d1      	lsrs	r1, r2
 8000d58:	1a82      	subs	r2, r0, r2
 8000d5a:	4096      	lsls	r6, r2
 8000d5c:	0032      	movs	r2, r6
 8000d5e:	1e50      	subs	r0, r2, #1
 8000d60:	4182      	sbcs	r2, r0
 8000d62:	4311      	orrs	r1, r2
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	015a      	lsls	r2, r3, #5
 8000d68:	d460      	bmi.n	8000e2c <__aeabi_fsub+0x190>
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	002a      	movs	r2, r5
 8000d6e:	4019      	ands	r1, r3
 8000d70:	d057      	beq.n	8000e22 <__aeabi_fsub+0x186>
 8000d72:	210f      	movs	r1, #15
 8000d74:	4019      	ands	r1, r3
 8000d76:	2904      	cmp	r1, #4
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0xe0>
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	0159      	lsls	r1, r3, #5
 8000d7e:	d550      	bpl.n	8000e22 <__aeabi_fsub+0x186>
 8000d80:	1c50      	adds	r0, r2, #1
 8000d82:	2afe      	cmp	r2, #254	@ 0xfe
 8000d84:	d045      	beq.n	8000e12 <__aeabi_fsub+0x176>
 8000d86:	019b      	lsls	r3, r3, #6
 8000d88:	b2c0      	uxtb	r0, r0
 8000d8a:	0a5b      	lsrs	r3, r3, #9
 8000d8c:	05c0      	lsls	r0, r0, #23
 8000d8e:	4318      	orrs	r0, r3
 8000d90:	07e4      	lsls	r4, r4, #31
 8000d92:	4320      	orrs	r0, r4
 8000d94:	bcc0      	pop	{r6, r7}
 8000d96:	46b9      	mov	r9, r7
 8000d98:	46b0      	mov	r8, r6
 8000d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4051      	eors	r1, r2
 8000da0:	428c      	cmp	r4, r1
 8000da2:	d1ba      	bne.n	8000d1a <__aeabi_fsub+0x7e>
 8000da4:	464a      	mov	r2, r9
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d010      	beq.n	8000dcc <__aeabi_fsub+0x130>
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x114>
 8000dae:	e098      	b.n	8000ee2 <__aeabi_fsub+0x246>
 8000db0:	2300      	movs	r3, #0
 8000db2:	e7bb      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d034      	beq.n	8000e22 <__aeabi_fsub+0x186>
 8000db8:	1e51      	subs	r1, r2, #1
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	d06e      	beq.n	8000e9c <__aeabi_fsub+0x200>
 8000dbe:	2aff      	cmp	r2, #255	@ 0xff
 8000dc0:	d0b4      	beq.n	8000d2c <__aeabi_fsub+0x90>
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	e79c      	b.n	8000d00 <__aeabi_fsub+0x64>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_fsub+0x130>
 8000dca:	e088      	b.n	8000ede <__aeabi_fsub+0x242>
 8000dcc:	20fe      	movs	r0, #254	@ 0xfe
 8000dce:	1c6a      	adds	r2, r5, #1
 8000dd0:	4210      	tst	r0, r2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fsub+0x13a>
 8000dd4:	e092      	b.n	8000efc <__aeabi_fsub+0x260>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0x140>
 8000dda:	e0a4      	b.n	8000f26 <__aeabi_fsub+0x28a>
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_fsub+0x146>
 8000de0:	e0cb      	b.n	8000f7a <__aeabi_fsub+0x2de>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x14c>
 8000de6:	e0ca      	b.n	8000f7e <__aeabi_fsub+0x2e2>
 8000de8:	2200      	movs	r2, #0
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	b2d0      	uxtb	r0, r2
 8000df2:	e7cb      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000df4:	0031      	movs	r1, r6
 8000df6:	2020      	movs	r0, #32
 8000df8:	40d1      	lsrs	r1, r2
 8000dfa:	1a82      	subs	r2, r0, r2
 8000dfc:	4096      	lsls	r6, r2
 8000dfe:	0032      	movs	r2, r6
 8000e00:	1e50      	subs	r0, r2, #1
 8000e02:	4182      	sbcs	r2, r0
 8000e04:	430a      	orrs	r2, r1
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	015a      	lsls	r2, r3, #5
 8000e0a:	d5ae      	bpl.n	8000d6a <__aeabi_fsub+0xce>
 8000e0c:	1c6a      	adds	r2, r5, #1
 8000e0e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e10:	d14a      	bne.n	8000ea8 <__aeabi_fsub+0x20c>
 8000e12:	20ff      	movs	r0, #255	@ 0xff
 8000e14:	2300      	movs	r3, #0
 8000e16:	e7b9      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000e18:	22ff      	movs	r2, #255	@ 0xff
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d14b      	bne.n	8000eb6 <__aeabi_fsub+0x21a>
 8000e1e:	000c      	movs	r4, r1
 8000e20:	0033      	movs	r3, r6
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2aff      	cmp	r2, #255	@ 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x18e>
 8000e28:	e781      	b.n	8000d2e <__aeabi_fsub+0x92>
 8000e2a:	e7df      	b.n	8000dec <__aeabi_fsub+0x150>
 8000e2c:	019f      	lsls	r7, r3, #6
 8000e2e:	09bf      	lsrs	r7, r7, #6
 8000e30:	0038      	movs	r0, r7
 8000e32:	f001 f949 	bl	80020c8 <__clzsi2>
 8000e36:	3805      	subs	r0, #5
 8000e38:	4087      	lsls	r7, r0
 8000e3a:	4285      	cmp	r5, r0
 8000e3c:	dc21      	bgt.n	8000e82 <__aeabi_fsub+0x1e6>
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2120      	movs	r1, #32
 8000e42:	1b42      	subs	r2, r0, r5
 8000e44:	3201      	adds	r2, #1
 8000e46:	40d3      	lsrs	r3, r2
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	4097      	lsls	r7, r2
 8000e4c:	1e7a      	subs	r2, r7, #1
 8000e4e:	4197      	sbcs	r7, r2
 8000e50:	2200      	movs	r2, #0
 8000e52:	433b      	orrs	r3, r7
 8000e54:	0759      	lsls	r1, r3, #29
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x1be>
 8000e58:	e78b      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fsub+0xe0>
 8000e5c:	20fe      	movs	r0, #254	@ 0xfe
 8000e5e:	1c6a      	adds	r2, r5, #1
 8000e60:	4210      	tst	r0, r2
 8000e62:	d112      	bne.n	8000e8a <__aeabi_fsub+0x1ee>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d152      	bne.n	8000f0e <__aeabi_fsub+0x272>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d07c      	beq.n	8000f66 <__aeabi_fsub+0x2ca>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d0bb      	beq.n	8000de8 <__aeabi_fsub+0x14c>
 8000e70:	1b9a      	subs	r2, r3, r6
 8000e72:	0150      	lsls	r0, r2, #5
 8000e74:	d400      	bmi.n	8000e78 <__aeabi_fsub+0x1dc>
 8000e76:	e08b      	b.n	8000f90 <__aeabi_fsub+0x2f4>
 8000e78:	2401      	movs	r4, #1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	1af3      	subs	r3, r6, r3
 8000e7e:	400c      	ands	r4, r1
 8000e80:	e7e8      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000e82:	4b56      	ldr	r3, [pc, #344]	@ (8000fdc <__aeabi_fsub+0x340>)
 8000e84:	1a2a      	subs	r2, r5, r0
 8000e86:	403b      	ands	r3, r7
 8000e88:	e7e4      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000e8a:	1b9f      	subs	r7, r3, r6
 8000e8c:	017a      	lsls	r2, r7, #5
 8000e8e:	d446      	bmi.n	8000f1e <__aeabi_fsub+0x282>
 8000e90:	2f00      	cmp	r7, #0
 8000e92:	d1cd      	bne.n	8000e30 <__aeabi_fsub+0x194>
 8000e94:	2400      	movs	r4, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e777      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000e9c:	199b      	adds	r3, r3, r6
 8000e9e:	2501      	movs	r5, #1
 8000ea0:	3201      	adds	r2, #1
 8000ea2:	0159      	lsls	r1, r3, #5
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_fsub+0x20c>
 8000ea6:	e760      	b.n	8000d6a <__aeabi_fsub+0xce>
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	484d      	ldr	r0, [pc, #308]	@ (8000fe0 <__aeabi_fsub+0x344>)
 8000eac:	4019      	ands	r1, r3
 8000eae:	085b      	lsrs	r3, r3, #1
 8000eb0:	4003      	ands	r3, r0
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	e7ce      	b.n	8000e54 <__aeabi_fsub+0x1b8>
 8000eb6:	1e57      	subs	r7, r2, #1
 8000eb8:	2a01      	cmp	r2, #1
 8000eba:	d05a      	beq.n	8000f72 <__aeabi_fsub+0x2d6>
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	2aff      	cmp	r2, #255	@ 0xff
 8000ec0:	d033      	beq.n	8000f2a <__aeabi_fsub+0x28e>
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2f1b      	cmp	r7, #27
 8000ec6:	dc07      	bgt.n	8000ed8 <__aeabi_fsub+0x23c>
 8000ec8:	2120      	movs	r1, #32
 8000eca:	1bc9      	subs	r1, r1, r7
 8000ecc:	001a      	movs	r2, r3
 8000ece:	408b      	lsls	r3, r1
 8000ed0:	40fa      	lsrs	r2, r7
 8000ed2:	1e59      	subs	r1, r3, #1
 8000ed4:	418b      	sbcs	r3, r1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	0005      	movs	r5, r0
 8000eda:	1ab3      	subs	r3, r6, r2
 8000edc:	e743      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	d123      	bne.n	8000f2a <__aeabi_fsub+0x28e>
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d09b      	beq.n	8000e20 <__aeabi_fsub+0x184>
 8000ee8:	1e51      	subs	r1, r2, #1
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d0d6      	beq.n	8000e9c <__aeabi_fsub+0x200>
 8000eee:	2aff      	cmp	r2, #255	@ 0xff
 8000ef0:	d01b      	beq.n	8000f2a <__aeabi_fsub+0x28e>
 8000ef2:	291b      	cmp	r1, #27
 8000ef4:	dd2c      	ble.n	8000f50 <__aeabi_fsub+0x2b4>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1c73      	adds	r3, r6, #1
 8000efa:	e73a      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000efc:	2aff      	cmp	r2, #255	@ 0xff
 8000efe:	d088      	beq.n	8000e12 <__aeabi_fsub+0x176>
 8000f00:	199b      	adds	r3, r3, r6
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	0759      	lsls	r1, r3, #29
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fsub+0x26e>
 8000f08:	e733      	b.n	8000d72 <__aeabi_fsub+0xd6>
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	e76e      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d110      	bne.n	8000f34 <__aeabi_fsub+0x298>
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d043      	beq.n	8000f9e <__aeabi_fsub+0x302>
 8000f16:	2401      	movs	r4, #1
 8000f18:	0033      	movs	r3, r6
 8000f1a:	400c      	ands	r4, r1
 8000f1c:	e706      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f1e:	2401      	movs	r4, #1
 8000f20:	1af7      	subs	r7, r6, r3
 8000f22:	400c      	ands	r4, r1
 8000f24:	e784      	b.n	8000e30 <__aeabi_fsub+0x194>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <__aeabi_fsub+0x298>
 8000f2a:	0033      	movs	r3, r6
 8000f2c:	e6fe      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f2e:	2501      	movs	r5, #1
 8000f30:	1b9b      	subs	r3, r3, r6
 8000f32:	e718      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000f34:	2e00      	cmp	r6, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x29e>
 8000f38:	e6f8      	b.n	8000d2c <__aeabi_fsub+0x90>
 8000f3a:	2280      	movs	r2, #128	@ 0x80
 8000f3c:	03d2      	lsls	r2, r2, #15
 8000f3e:	4297      	cmp	r7, r2
 8000f40:	d304      	bcc.n	8000f4c <__aeabi_fsub+0x2b0>
 8000f42:	4594      	cmp	ip, r2
 8000f44:	d202      	bcs.n	8000f4c <__aeabi_fsub+0x2b0>
 8000f46:	2401      	movs	r4, #1
 8000f48:	0033      	movs	r3, r6
 8000f4a:	400c      	ands	r4, r1
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	e6f1      	b.n	8000d34 <__aeabi_fsub+0x98>
 8000f50:	001a      	movs	r2, r3
 8000f52:	2520      	movs	r5, #32
 8000f54:	40ca      	lsrs	r2, r1
 8000f56:	1a69      	subs	r1, r5, r1
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	1e59      	subs	r1, r3, #1
 8000f5c:	418b      	sbcs	r3, r1
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	0005      	movs	r5, r0
 8000f62:	199b      	adds	r3, r3, r6
 8000f64:	e750      	b.n	8000e08 <__aeabi_fsub+0x16c>
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d094      	beq.n	8000e94 <__aeabi_fsub+0x1f8>
 8000f6a:	2401      	movs	r4, #1
 8000f6c:	0033      	movs	r3, r6
 8000f6e:	400c      	ands	r4, r1
 8000f70:	e73a      	b.n	8000de8 <__aeabi_fsub+0x14c>
 8000f72:	000c      	movs	r4, r1
 8000f74:	2501      	movs	r5, #1
 8000f76:	1af3      	subs	r3, r6, r3
 8000f78:	e6f5      	b.n	8000d66 <__aeabi_fsub+0xca>
 8000f7a:	0033      	movs	r3, r6
 8000f7c:	e734      	b.n	8000de8 <__aeabi_fsub+0x14c>
 8000f7e:	199b      	adds	r3, r3, r6
 8000f80:	2200      	movs	r2, #0
 8000f82:	0159      	lsls	r1, r3, #5
 8000f84:	d5c1      	bpl.n	8000f0a <__aeabi_fsub+0x26e>
 8000f86:	4a15      	ldr	r2, [pc, #84]	@ (8000fdc <__aeabi_fsub+0x340>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	e72d      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_fsub+0x2fa>
 8000f94:	e77e      	b.n	8000e94 <__aeabi_fsub+0x1f8>
 8000f96:	0013      	movs	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	e726      	b.n	8000dec <__aeabi_fsub+0x150>
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	2400      	movs	r4, #0
 8000fa2:	20ff      	movs	r0, #255	@ 0xff
 8000fa4:	03db      	lsls	r3, r3, #15
 8000fa6:	e6f1      	b.n	8000d8c <__aeabi_fsub+0xf0>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x312>
 8000fac:	e756      	b.n	8000e5c <__aeabi_fsub+0x1c0>
 8000fae:	1b47      	subs	r7, r0, r5
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	2d00      	cmp	r5, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x31c>
 8000fb6:	e730      	b.n	8000e1a <__aeabi_fsub+0x17e>
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	04d2      	lsls	r2, r2, #19
 8000fbc:	000c      	movs	r4, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	e77f      	b.n	8000ec2 <__aeabi_fsub+0x226>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x32c>
 8000fc6:	e701      	b.n	8000dcc <__aeabi_fsub+0x130>
 8000fc8:	1b41      	subs	r1, r0, r5
 8000fca:	2d00      	cmp	r5, #0
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_fsub+0x336>
 8000fce:	000a      	movs	r2, r1
 8000fd0:	e788      	b.n	8000ee4 <__aeabi_fsub+0x248>
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	04d2      	lsls	r2, r2, #19
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	e78b      	b.n	8000ef2 <__aeabi_fsub+0x256>
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	fbffffff 	.word	0xfbffffff
 8000fe0:	7dffffff 	.word	0x7dffffff

08000fe4 <__aeabi_f2iz>:
 8000fe4:	0241      	lsls	r1, r0, #9
 8000fe6:	0042      	lsls	r2, r0, #1
 8000fe8:	0fc3      	lsrs	r3, r0, #31
 8000fea:	0a49      	lsrs	r1, r1, #9
 8000fec:	2000      	movs	r0, #0
 8000fee:	0e12      	lsrs	r2, r2, #24
 8000ff0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000ff2:	dd03      	ble.n	8000ffc <__aeabi_f2iz+0x18>
 8000ff4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000ff6:	dd02      	ble.n	8000ffe <__aeabi_f2iz+0x1a>
 8000ff8:	4a09      	ldr	r2, [pc, #36]	@ (8001020 <__aeabi_f2iz+0x3c>)
 8000ffa:	1898      	adds	r0, r3, r2
 8000ffc:	4770      	bx	lr
 8000ffe:	2080      	movs	r0, #128	@ 0x80
 8001000:	0400      	lsls	r0, r0, #16
 8001002:	4301      	orrs	r1, r0
 8001004:	2a95      	cmp	r2, #149	@ 0x95
 8001006:	dc07      	bgt.n	8001018 <__aeabi_f2iz+0x34>
 8001008:	2096      	movs	r0, #150	@ 0x96
 800100a:	1a82      	subs	r2, r0, r2
 800100c:	40d1      	lsrs	r1, r2
 800100e:	4248      	negs	r0, r1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f3      	bne.n	8000ffc <__aeabi_f2iz+0x18>
 8001014:	0008      	movs	r0, r1
 8001016:	e7f1      	b.n	8000ffc <__aeabi_f2iz+0x18>
 8001018:	3a96      	subs	r2, #150	@ 0x96
 800101a:	4091      	lsls	r1, r2
 800101c:	e7f7      	b.n	800100e <__aeabi_f2iz+0x2a>
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	7fffffff 	.word	0x7fffffff

08001024 <__aeabi_i2f>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	2800      	cmp	r0, #0
 8001028:	d013      	beq.n	8001052 <__aeabi_i2f+0x2e>
 800102a:	17c3      	asrs	r3, r0, #31
 800102c:	18c5      	adds	r5, r0, r3
 800102e:	405d      	eors	r5, r3
 8001030:	0fc4      	lsrs	r4, r0, #31
 8001032:	0028      	movs	r0, r5
 8001034:	f001 f848 	bl	80020c8 <__clzsi2>
 8001038:	239e      	movs	r3, #158	@ 0x9e
 800103a:	0001      	movs	r1, r0
 800103c:	1a1b      	subs	r3, r3, r0
 800103e:	2b96      	cmp	r3, #150	@ 0x96
 8001040:	dc0f      	bgt.n	8001062 <__aeabi_i2f+0x3e>
 8001042:	2808      	cmp	r0, #8
 8001044:	d034      	beq.n	80010b0 <__aeabi_i2f+0x8c>
 8001046:	3908      	subs	r1, #8
 8001048:	408d      	lsls	r5, r1
 800104a:	026d      	lsls	r5, r5, #9
 800104c:	0a6d      	lsrs	r5, r5, #9
 800104e:	b2d8      	uxtb	r0, r3
 8001050:	e002      	b.n	8001058 <__aeabi_i2f+0x34>
 8001052:	2400      	movs	r4, #0
 8001054:	2000      	movs	r0, #0
 8001056:	2500      	movs	r5, #0
 8001058:	05c0      	lsls	r0, r0, #23
 800105a:	4328      	orrs	r0, r5
 800105c:	07e4      	lsls	r4, r4, #31
 800105e:	4320      	orrs	r0, r4
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	2b99      	cmp	r3, #153	@ 0x99
 8001064:	dc16      	bgt.n	8001094 <__aeabi_i2f+0x70>
 8001066:	1f42      	subs	r2, r0, #5
 8001068:	2805      	cmp	r0, #5
 800106a:	d000      	beq.n	800106e <__aeabi_i2f+0x4a>
 800106c:	4095      	lsls	r5, r2
 800106e:	002a      	movs	r2, r5
 8001070:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <__aeabi_i2f+0x94>)
 8001072:	4002      	ands	r2, r0
 8001074:	076e      	lsls	r6, r5, #29
 8001076:	d009      	beq.n	800108c <__aeabi_i2f+0x68>
 8001078:	260f      	movs	r6, #15
 800107a:	4035      	ands	r5, r6
 800107c:	2d04      	cmp	r5, #4
 800107e:	d005      	beq.n	800108c <__aeabi_i2f+0x68>
 8001080:	3204      	adds	r2, #4
 8001082:	0155      	lsls	r5, r2, #5
 8001084:	d502      	bpl.n	800108c <__aeabi_i2f+0x68>
 8001086:	239f      	movs	r3, #159	@ 0x9f
 8001088:	4002      	ands	r2, r0
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	0192      	lsls	r2, r2, #6
 800108e:	0a55      	lsrs	r5, r2, #9
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	e7e1      	b.n	8001058 <__aeabi_i2f+0x34>
 8001094:	2205      	movs	r2, #5
 8001096:	1a12      	subs	r2, r2, r0
 8001098:	0028      	movs	r0, r5
 800109a:	40d0      	lsrs	r0, r2
 800109c:	0002      	movs	r2, r0
 800109e:	0008      	movs	r0, r1
 80010a0:	301b      	adds	r0, #27
 80010a2:	4085      	lsls	r5, r0
 80010a4:	0028      	movs	r0, r5
 80010a6:	1e45      	subs	r5, r0, #1
 80010a8:	41a8      	sbcs	r0, r5
 80010aa:	4302      	orrs	r2, r0
 80010ac:	0015      	movs	r5, r2
 80010ae:	e7de      	b.n	800106e <__aeabi_i2f+0x4a>
 80010b0:	026d      	lsls	r5, r5, #9
 80010b2:	2096      	movs	r0, #150	@ 0x96
 80010b4:	0a6d      	lsrs	r5, r5, #9
 80010b6:	e7cf      	b.n	8001058 <__aeabi_i2f+0x34>
 80010b8:	fbffffff 	.word	0xfbffffff

080010bc <__aeabi_ddiv>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	46de      	mov	lr, fp
 80010c0:	4645      	mov	r5, r8
 80010c2:	4657      	mov	r7, sl
 80010c4:	464e      	mov	r6, r9
 80010c6:	b5e0      	push	{r5, r6, r7, lr}
 80010c8:	b087      	sub	sp, #28
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	030b      	lsls	r3, r1, #12
 80010d0:	0b1b      	lsrs	r3, r3, #12
 80010d2:	469b      	mov	fp, r3
 80010d4:	0fca      	lsrs	r2, r1, #31
 80010d6:	004b      	lsls	r3, r1, #1
 80010d8:	0004      	movs	r4, r0
 80010da:	4680      	mov	r8, r0
 80010dc:	0d5b      	lsrs	r3, r3, #21
 80010de:	9202      	str	r2, [sp, #8]
 80010e0:	d100      	bne.n	80010e4 <__aeabi_ddiv+0x28>
 80010e2:	e16a      	b.n	80013ba <__aeabi_ddiv+0x2fe>
 80010e4:	4ad4      	ldr	r2, [pc, #848]	@ (8001438 <__aeabi_ddiv+0x37c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x30>
 80010ea:	e18c      	b.n	8001406 <__aeabi_ddiv+0x34a>
 80010ec:	4659      	mov	r1, fp
 80010ee:	0f42      	lsrs	r2, r0, #29
 80010f0:	00c9      	lsls	r1, r1, #3
 80010f2:	430a      	orrs	r2, r1
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0409      	lsls	r1, r1, #16
 80010f8:	4311      	orrs	r1, r2
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	4690      	mov	r8, r2
 80010fe:	4acf      	ldr	r2, [pc, #828]	@ (800143c <__aeabi_ddiv+0x380>)
 8001100:	4689      	mov	r9, r1
 8001102:	4692      	mov	sl, r2
 8001104:	449a      	add	sl, r3
 8001106:	2300      	movs	r3, #0
 8001108:	2400      	movs	r4, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9e00      	ldr	r6, [sp, #0]
 800110e:	9f01      	ldr	r7, [sp, #4]
 8001110:	033b      	lsls	r3, r7, #12
 8001112:	0b1b      	lsrs	r3, r3, #12
 8001114:	469b      	mov	fp, r3
 8001116:	007b      	lsls	r3, r7, #1
 8001118:	0030      	movs	r0, r6
 800111a:	0d5b      	lsrs	r3, r3, #21
 800111c:	0ffd      	lsrs	r5, r7, #31
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0x68>
 8001122:	e128      	b.n	8001376 <__aeabi_ddiv+0x2ba>
 8001124:	4ac4      	ldr	r2, [pc, #784]	@ (8001438 <__aeabi_ddiv+0x37c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x70>
 800112a:	e177      	b.n	800141c <__aeabi_ddiv+0x360>
 800112c:	4659      	mov	r1, fp
 800112e:	0f72      	lsrs	r2, r6, #29
 8001130:	00c9      	lsls	r1, r1, #3
 8001132:	430a      	orrs	r2, r1
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0409      	lsls	r1, r1, #16
 8001138:	4311      	orrs	r1, r2
 800113a:	468b      	mov	fp, r1
 800113c:	49bf      	ldr	r1, [pc, #764]	@ (800143c <__aeabi_ddiv+0x380>)
 800113e:	00f2      	lsls	r2, r6, #3
 8001140:	468c      	mov	ip, r1
 8001142:	4651      	mov	r1, sl
 8001144:	4463      	add	r3, ip
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	469a      	mov	sl, r3
 800114a:	2300      	movs	r3, #0
 800114c:	9e02      	ldr	r6, [sp, #8]
 800114e:	406e      	eors	r6, r5
 8001150:	2c0f      	cmp	r4, #15
 8001152:	d827      	bhi.n	80011a4 <__aeabi_ddiv+0xe8>
 8001154:	49ba      	ldr	r1, [pc, #744]	@ (8001440 <__aeabi_ddiv+0x384>)
 8001156:	00a4      	lsls	r4, r4, #2
 8001158:	5909      	ldr	r1, [r1, r4]
 800115a:	468f      	mov	pc, r1
 800115c:	46cb      	mov	fp, r9
 800115e:	4642      	mov	r2, r8
 8001160:	9e02      	ldr	r6, [sp, #8]
 8001162:	9b03      	ldr	r3, [sp, #12]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d016      	beq.n	8001196 <__aeabi_ddiv+0xda>
 8001168:	2b03      	cmp	r3, #3
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0xb2>
 800116c:	e2a6      	b.n	80016bc <__aeabi_ddiv+0x600>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d000      	beq.n	8001174 <__aeabi_ddiv+0xb8>
 8001172:	e0df      	b.n	8001334 <__aeabi_ddiv+0x278>
 8001174:	2200      	movs	r2, #0
 8001176:	2300      	movs	r3, #0
 8001178:	2400      	movs	r4, #0
 800117a:	4690      	mov	r8, r2
 800117c:	051b      	lsls	r3, r3, #20
 800117e:	4323      	orrs	r3, r4
 8001180:	07f6      	lsls	r6, r6, #31
 8001182:	4333      	orrs	r3, r6
 8001184:	4640      	mov	r0, r8
 8001186:	0019      	movs	r1, r3
 8001188:	b007      	add	sp, #28
 800118a:	bcf0      	pop	{r4, r5, r6, r7}
 800118c:	46bb      	mov	fp, r7
 800118e:	46b2      	mov	sl, r6
 8001190:	46a9      	mov	r9, r5
 8001192:	46a0      	mov	r8, r4
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001196:	2200      	movs	r2, #0
 8001198:	2400      	movs	r4, #0
 800119a:	4690      	mov	r8, r2
 800119c:	4ba6      	ldr	r3, [pc, #664]	@ (8001438 <__aeabi_ddiv+0x37c>)
 800119e:	e7ed      	b.n	800117c <__aeabi_ddiv+0xc0>
 80011a0:	002e      	movs	r6, r5
 80011a2:	e7df      	b.n	8001164 <__aeabi_ddiv+0xa8>
 80011a4:	45cb      	cmp	fp, r9
 80011a6:	d200      	bcs.n	80011aa <__aeabi_ddiv+0xee>
 80011a8:	e1d4      	b.n	8001554 <__aeabi_ddiv+0x498>
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0xf2>
 80011ac:	e1cf      	b.n	800154e <__aeabi_ddiv+0x492>
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
 80011b2:	469c      	mov	ip, r3
 80011b4:	4644      	mov	r4, r8
 80011b6:	4648      	mov	r0, r9
 80011b8:	2700      	movs	r7, #0
 80011ba:	44e2      	add	sl, ip
 80011bc:	465b      	mov	r3, fp
 80011be:	0e15      	lsrs	r5, r2, #24
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	431d      	orrs	r5, r3
 80011c4:	0c19      	lsrs	r1, r3, #16
 80011c6:	042b      	lsls	r3, r5, #16
 80011c8:	0212      	lsls	r2, r2, #8
 80011ca:	9500      	str	r5, [sp, #0]
 80011cc:	0c1d      	lsrs	r5, r3, #16
 80011ce:	4691      	mov	r9, r2
 80011d0:	9102      	str	r1, [sp, #8]
 80011d2:	9503      	str	r5, [sp, #12]
 80011d4:	f7ff f81e 	bl	8000214 <__aeabi_uidivmod>
 80011d8:	0002      	movs	r2, r0
 80011da:	436a      	muls	r2, r5
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	4680      	mov	r8, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d909      	bls.n	80011fc <__aeabi_ddiv+0x140>
 80011e8:	9d00      	ldr	r5, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	46ac      	mov	ip, r5
 80011ee:	425b      	negs	r3, r3
 80011f0:	4461      	add	r1, ip
 80011f2:	469c      	mov	ip, r3
 80011f4:	44e0      	add	r8, ip
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x140>
 80011fa:	e1fb      	b.n	80015f4 <__aeabi_ddiv+0x538>
 80011fc:	1a88      	subs	r0, r1, r2
 80011fe:	9902      	ldr	r1, [sp, #8]
 8001200:	f7ff f808 	bl	8000214 <__aeabi_uidivmod>
 8001204:	9a03      	ldr	r2, [sp, #12]
 8001206:	0424      	lsls	r4, r4, #16
 8001208:	4342      	muls	r2, r0
 800120a:	0409      	lsls	r1, r1, #16
 800120c:	0c24      	lsrs	r4, r4, #16
 800120e:	0003      	movs	r3, r0
 8001210:	430c      	orrs	r4, r1
 8001212:	42a2      	cmp	r2, r4
 8001214:	d906      	bls.n	8001224 <__aeabi_ddiv+0x168>
 8001216:	9900      	ldr	r1, [sp, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	468c      	mov	ip, r1
 800121c:	4464      	add	r4, ip
 800121e:	42a1      	cmp	r1, r4
 8001220:	d800      	bhi.n	8001224 <__aeabi_ddiv+0x168>
 8001222:	e1e1      	b.n	80015e8 <__aeabi_ddiv+0x52c>
 8001224:	1aa0      	subs	r0, r4, r2
 8001226:	4642      	mov	r2, r8
 8001228:	0412      	lsls	r2, r2, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	4693      	mov	fp, r2
 800122e:	464b      	mov	r3, r9
 8001230:	4659      	mov	r1, fp
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	001d      	movs	r5, r3
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	040b      	lsls	r3, r1, #16
 800123a:	4649      	mov	r1, r9
 800123c:	0409      	lsls	r1, r1, #16
 800123e:	0c09      	lsrs	r1, r1, #16
 8001240:	000c      	movs	r4, r1
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	435c      	muls	r4, r3
 8001246:	0c12      	lsrs	r2, r2, #16
 8001248:	436b      	muls	r3, r5
 800124a:	4688      	mov	r8, r1
 800124c:	4351      	muls	r1, r2
 800124e:	436a      	muls	r2, r5
 8001250:	0c25      	lsrs	r5, r4, #16
 8001252:	46ac      	mov	ip, r5
 8001254:	185b      	adds	r3, r3, r1
 8001256:	4463      	add	r3, ip
 8001258:	4299      	cmp	r1, r3
 800125a:	d903      	bls.n	8001264 <__aeabi_ddiv+0x1a8>
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0249      	lsls	r1, r1, #9
 8001260:	468c      	mov	ip, r1
 8001262:	4462      	add	r2, ip
 8001264:	0c19      	lsrs	r1, r3, #16
 8001266:	0424      	lsls	r4, r4, #16
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	0c24      	lsrs	r4, r4, #16
 800126c:	188a      	adds	r2, r1, r2
 800126e:	191c      	adds	r4, r3, r4
 8001270:	4290      	cmp	r0, r2
 8001272:	d302      	bcc.n	800127a <__aeabi_ddiv+0x1be>
 8001274:	d116      	bne.n	80012a4 <__aeabi_ddiv+0x1e8>
 8001276:	42a7      	cmp	r7, r4
 8001278:	d214      	bcs.n	80012a4 <__aeabi_ddiv+0x1e8>
 800127a:	465b      	mov	r3, fp
 800127c:	9d00      	ldr	r5, [sp, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	444f      	add	r7, r9
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	454f      	cmp	r7, r9
 8001286:	419b      	sbcs	r3, r3
 8001288:	46ac      	mov	ip, r5
 800128a:	425b      	negs	r3, r3
 800128c:	4463      	add	r3, ip
 800128e:	18c0      	adds	r0, r0, r3
 8001290:	4285      	cmp	r5, r0
 8001292:	d300      	bcc.n	8001296 <__aeabi_ddiv+0x1da>
 8001294:	e1a1      	b.n	80015da <__aeabi_ddiv+0x51e>
 8001296:	4282      	cmp	r2, r0
 8001298:	d900      	bls.n	800129c <__aeabi_ddiv+0x1e0>
 800129a:	e1f6      	b.n	800168a <__aeabi_ddiv+0x5ce>
 800129c:	d100      	bne.n	80012a0 <__aeabi_ddiv+0x1e4>
 800129e:	e1f1      	b.n	8001684 <__aeabi_ddiv+0x5c8>
 80012a0:	9b05      	ldr	r3, [sp, #20]
 80012a2:	469b      	mov	fp, r3
 80012a4:	1b3c      	subs	r4, r7, r4
 80012a6:	42a7      	cmp	r7, r4
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	9d00      	ldr	r5, [sp, #0]
 80012ac:	1a80      	subs	r0, r0, r2
 80012ae:	427f      	negs	r7, r7
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	4285      	cmp	r5, r0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_ddiv+0x1fc>
 80012b6:	e1d0      	b.n	800165a <__aeabi_ddiv+0x59e>
 80012b8:	9902      	ldr	r1, [sp, #8]
 80012ba:	f7fe ffab 	bl	8000214 <__aeabi_uidivmod>
 80012be:	9a03      	ldr	r2, [sp, #12]
 80012c0:	040b      	lsls	r3, r1, #16
 80012c2:	4342      	muls	r2, r0
 80012c4:	0c21      	lsrs	r1, r4, #16
 80012c6:	0007      	movs	r7, r0
 80012c8:	4319      	orrs	r1, r3
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d900      	bls.n	80012d0 <__aeabi_ddiv+0x214>
 80012ce:	e178      	b.n	80015c2 <__aeabi_ddiv+0x506>
 80012d0:	1a88      	subs	r0, r1, r2
 80012d2:	9902      	ldr	r1, [sp, #8]
 80012d4:	f7fe ff9e 	bl	8000214 <__aeabi_uidivmod>
 80012d8:	9a03      	ldr	r2, [sp, #12]
 80012da:	0424      	lsls	r4, r4, #16
 80012dc:	4342      	muls	r2, r0
 80012de:	0409      	lsls	r1, r1, #16
 80012e0:	0c24      	lsrs	r4, r4, #16
 80012e2:	0003      	movs	r3, r0
 80012e4:	430c      	orrs	r4, r1
 80012e6:	42a2      	cmp	r2, r4
 80012e8:	d900      	bls.n	80012ec <__aeabi_ddiv+0x230>
 80012ea:	e15d      	b.n	80015a8 <__aeabi_ddiv+0x4ec>
 80012ec:	4641      	mov	r1, r8
 80012ee:	1aa4      	subs	r4, r4, r2
 80012f0:	043a      	lsls	r2, r7, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	9d04      	ldr	r5, [sp, #16]
 80012f6:	0413      	lsls	r3, r2, #16
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	4359      	muls	r1, r3
 80012fc:	4647      	mov	r7, r8
 80012fe:	436b      	muls	r3, r5
 8001300:	469c      	mov	ip, r3
 8001302:	0c10      	lsrs	r0, r2, #16
 8001304:	4347      	muls	r7, r0
 8001306:	0c0b      	lsrs	r3, r1, #16
 8001308:	44bc      	add	ip, r7
 800130a:	4463      	add	r3, ip
 800130c:	4368      	muls	r0, r5
 800130e:	429f      	cmp	r7, r3
 8001310:	d903      	bls.n	800131a <__aeabi_ddiv+0x25e>
 8001312:	2580      	movs	r5, #128	@ 0x80
 8001314:	026d      	lsls	r5, r5, #9
 8001316:	46ac      	mov	ip, r5
 8001318:	4460      	add	r0, ip
 800131a:	0c1f      	lsrs	r7, r3, #16
 800131c:	0409      	lsls	r1, r1, #16
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	0c09      	lsrs	r1, r1, #16
 8001322:	183f      	adds	r7, r7, r0
 8001324:	185b      	adds	r3, r3, r1
 8001326:	42bc      	cmp	r4, r7
 8001328:	d200      	bcs.n	800132c <__aeabi_ddiv+0x270>
 800132a:	e102      	b.n	8001532 <__aeabi_ddiv+0x476>
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x274>
 800132e:	e0fd      	b.n	800152c <__aeabi_ddiv+0x470>
 8001330:	2301      	movs	r3, #1
 8001332:	431a      	orrs	r2, r3
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <__aeabi_ddiv+0x388>)
 8001336:	4453      	add	r3, sl
 8001338:	2b00      	cmp	r3, #0
 800133a:	dc00      	bgt.n	800133e <__aeabi_ddiv+0x282>
 800133c:	e0ae      	b.n	800149c <__aeabi_ddiv+0x3e0>
 800133e:	0751      	lsls	r1, r2, #29
 8001340:	d000      	beq.n	8001344 <__aeabi_ddiv+0x288>
 8001342:	e198      	b.n	8001676 <__aeabi_ddiv+0x5ba>
 8001344:	4659      	mov	r1, fp
 8001346:	01c9      	lsls	r1, r1, #7
 8001348:	d506      	bpl.n	8001358 <__aeabi_ddiv+0x29c>
 800134a:	4659      	mov	r1, fp
 800134c:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <__aeabi_ddiv+0x38c>)
 800134e:	4019      	ands	r1, r3
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	468b      	mov	fp, r1
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4453      	add	r3, sl
 8001358:	493c      	ldr	r1, [pc, #240]	@ (800144c <__aeabi_ddiv+0x390>)
 800135a:	428b      	cmp	r3, r1
 800135c:	dd00      	ble.n	8001360 <__aeabi_ddiv+0x2a4>
 800135e:	e71a      	b.n	8001196 <__aeabi_ddiv+0xda>
 8001360:	4659      	mov	r1, fp
 8001362:	08d2      	lsrs	r2, r2, #3
 8001364:	0749      	lsls	r1, r1, #29
 8001366:	4311      	orrs	r1, r2
 8001368:	465a      	mov	r2, fp
 800136a:	055b      	lsls	r3, r3, #21
 800136c:	0254      	lsls	r4, r2, #9
 800136e:	4688      	mov	r8, r1
 8001370:	0b24      	lsrs	r4, r4, #12
 8001372:	0d5b      	lsrs	r3, r3, #21
 8001374:	e702      	b.n	800117c <__aeabi_ddiv+0xc0>
 8001376:	465a      	mov	r2, fp
 8001378:	9b00      	ldr	r3, [sp, #0]
 800137a:	431a      	orrs	r2, r3
 800137c:	d100      	bne.n	8001380 <__aeabi_ddiv+0x2c4>
 800137e:	e07e      	b.n	800147e <__aeabi_ddiv+0x3c2>
 8001380:	465b      	mov	r3, fp
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x2cc>
 8001386:	e100      	b.n	800158a <__aeabi_ddiv+0x4ce>
 8001388:	4658      	mov	r0, fp
 800138a:	f000 fe9d 	bl	80020c8 <__clzsi2>
 800138e:	0002      	movs	r2, r0
 8001390:	0003      	movs	r3, r0
 8001392:	3a0b      	subs	r2, #11
 8001394:	271d      	movs	r7, #29
 8001396:	9e00      	ldr	r6, [sp, #0]
 8001398:	1aba      	subs	r2, r7, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4658      	mov	r0, fp
 800139e:	40d6      	lsrs	r6, r2
 80013a0:	3908      	subs	r1, #8
 80013a2:	4088      	lsls	r0, r1
 80013a4:	0032      	movs	r2, r6
 80013a6:	4302      	orrs	r2, r0
 80013a8:	4693      	mov	fp, r2
 80013aa:	9a00      	ldr	r2, [sp, #0]
 80013ac:	408a      	lsls	r2, r1
 80013ae:	4928      	ldr	r1, [pc, #160]	@ (8001450 <__aeabi_ddiv+0x394>)
 80013b0:	4453      	add	r3, sl
 80013b2:	468a      	mov	sl, r1
 80013b4:	449a      	add	sl, r3
 80013b6:	2300      	movs	r3, #0
 80013b8:	e6c8      	b.n	800114c <__aeabi_ddiv+0x90>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4303      	orrs	r3, r0
 80013be:	4699      	mov	r9, r3
 80013c0:	d056      	beq.n	8001470 <__aeabi_ddiv+0x3b4>
 80013c2:	465b      	mov	r3, fp
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x30e>
 80013c8:	e0cd      	b.n	8001566 <__aeabi_ddiv+0x4aa>
 80013ca:	4658      	mov	r0, fp
 80013cc:	f000 fe7c 	bl	80020c8 <__clzsi2>
 80013d0:	230b      	movs	r3, #11
 80013d2:	425b      	negs	r3, r3
 80013d4:	469c      	mov	ip, r3
 80013d6:	0002      	movs	r2, r0
 80013d8:	4484      	add	ip, r0
 80013da:	4666      	mov	r6, ip
 80013dc:	231d      	movs	r3, #29
 80013de:	1b9b      	subs	r3, r3, r6
 80013e0:	0026      	movs	r6, r4
 80013e2:	0011      	movs	r1, r2
 80013e4:	4658      	mov	r0, fp
 80013e6:	40de      	lsrs	r6, r3
 80013e8:	3908      	subs	r1, #8
 80013ea:	4088      	lsls	r0, r1
 80013ec:	0033      	movs	r3, r6
 80013ee:	4303      	orrs	r3, r0
 80013f0:	4699      	mov	r9, r3
 80013f2:	0023      	movs	r3, r4
 80013f4:	408b      	lsls	r3, r1
 80013f6:	4698      	mov	r8, r3
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <__aeabi_ddiv+0x398>)
 80013fa:	2400      	movs	r4, #0
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	469a      	mov	sl, r3
 8001400:	2300      	movs	r3, #0
 8001402:	9303      	str	r3, [sp, #12]
 8001404:	e682      	b.n	800110c <__aeabi_ddiv+0x50>
 8001406:	465a      	mov	r2, fp
 8001408:	4302      	orrs	r2, r0
 800140a:	4691      	mov	r9, r2
 800140c:	d12a      	bne.n	8001464 <__aeabi_ddiv+0x3a8>
 800140e:	2200      	movs	r2, #0
 8001410:	469a      	mov	sl, r3
 8001412:	2302      	movs	r3, #2
 8001414:	4690      	mov	r8, r2
 8001416:	2408      	movs	r4, #8
 8001418:	9303      	str	r3, [sp, #12]
 800141a:	e677      	b.n	800110c <__aeabi_ddiv+0x50>
 800141c:	465a      	mov	r2, fp
 800141e:	9b00      	ldr	r3, [sp, #0]
 8001420:	431a      	orrs	r2, r3
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <__aeabi_ddiv+0x39c>)
 8001424:	469c      	mov	ip, r3
 8001426:	44e2      	add	sl, ip
 8001428:	2a00      	cmp	r2, #0
 800142a:	d117      	bne.n	800145c <__aeabi_ddiv+0x3a0>
 800142c:	2302      	movs	r3, #2
 800142e:	431c      	orrs	r4, r3
 8001430:	2300      	movs	r3, #0
 8001432:	469b      	mov	fp, r3
 8001434:	3302      	adds	r3, #2
 8001436:	e689      	b.n	800114c <__aeabi_ddiv+0x90>
 8001438:	000007ff 	.word	0x000007ff
 800143c:	fffffc01 	.word	0xfffffc01
 8001440:	080061a8 	.word	0x080061a8
 8001444:	000003ff 	.word	0x000003ff
 8001448:	feffffff 	.word	0xfeffffff
 800144c:	000007fe 	.word	0x000007fe
 8001450:	000003f3 	.word	0x000003f3
 8001454:	fffffc0d 	.word	0xfffffc0d
 8001458:	fffff801 	.word	0xfffff801
 800145c:	2303      	movs	r3, #3
 800145e:	0032      	movs	r2, r6
 8001460:	431c      	orrs	r4, r3
 8001462:	e673      	b.n	800114c <__aeabi_ddiv+0x90>
 8001464:	469a      	mov	sl, r3
 8001466:	2303      	movs	r3, #3
 8001468:	46d9      	mov	r9, fp
 800146a:	240c      	movs	r4, #12
 800146c:	9303      	str	r3, [sp, #12]
 800146e:	e64d      	b.n	800110c <__aeabi_ddiv+0x50>
 8001470:	2300      	movs	r3, #0
 8001472:	4698      	mov	r8, r3
 8001474:	469a      	mov	sl, r3
 8001476:	3301      	adds	r3, #1
 8001478:	2404      	movs	r4, #4
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	e646      	b.n	800110c <__aeabi_ddiv+0x50>
 800147e:	2301      	movs	r3, #1
 8001480:	431c      	orrs	r4, r3
 8001482:	2300      	movs	r3, #0
 8001484:	469b      	mov	fp, r3
 8001486:	3301      	adds	r3, #1
 8001488:	e660      	b.n	800114c <__aeabi_ddiv+0x90>
 800148a:	2300      	movs	r3, #0
 800148c:	2480      	movs	r4, #128	@ 0x80
 800148e:	4698      	mov	r8, r3
 8001490:	2600      	movs	r6, #0
 8001492:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001494:	0324      	lsls	r4, r4, #12
 8001496:	e671      	b.n	800117c <__aeabi_ddiv+0xc0>
 8001498:	2201      	movs	r2, #1
 800149a:	4252      	negs	r2, r2
 800149c:	2101      	movs	r1, #1
 800149e:	1ac9      	subs	r1, r1, r3
 80014a0:	2938      	cmp	r1, #56	@ 0x38
 80014a2:	dd00      	ble.n	80014a6 <__aeabi_ddiv+0x3ea>
 80014a4:	e666      	b.n	8001174 <__aeabi_ddiv+0xb8>
 80014a6:	291f      	cmp	r1, #31
 80014a8:	dc00      	bgt.n	80014ac <__aeabi_ddiv+0x3f0>
 80014aa:	e0ab      	b.n	8001604 <__aeabi_ddiv+0x548>
 80014ac:	201f      	movs	r0, #31
 80014ae:	4240      	negs	r0, r0
 80014b0:	1ac3      	subs	r3, r0, r3
 80014b2:	4658      	mov	r0, fp
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	0003      	movs	r3, r0
 80014b8:	2920      	cmp	r1, #32
 80014ba:	d004      	beq.n	80014c6 <__aeabi_ddiv+0x40a>
 80014bc:	4658      	mov	r0, fp
 80014be:	4988      	ldr	r1, [pc, #544]	@ (80016e0 <__aeabi_ddiv+0x624>)
 80014c0:	4451      	add	r1, sl
 80014c2:	4088      	lsls	r0, r1
 80014c4:	4302      	orrs	r2, r0
 80014c6:	1e51      	subs	r1, r2, #1
 80014c8:	418a      	sbcs	r2, r1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	2307      	movs	r3, #7
 80014ce:	0019      	movs	r1, r3
 80014d0:	2400      	movs	r4, #0
 80014d2:	4011      	ands	r1, r2
 80014d4:	4213      	tst	r3, r2
 80014d6:	d00c      	beq.n	80014f2 <__aeabi_ddiv+0x436>
 80014d8:	230f      	movs	r3, #15
 80014da:	4013      	ands	r3, r2
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d100      	bne.n	80014e2 <__aeabi_ddiv+0x426>
 80014e0:	e0f9      	b.n	80016d6 <__aeabi_ddiv+0x61a>
 80014e2:	1d11      	adds	r1, r2, #4
 80014e4:	4291      	cmp	r1, r2
 80014e6:	419b      	sbcs	r3, r3
 80014e8:	000a      	movs	r2, r1
 80014ea:	425b      	negs	r3, r3
 80014ec:	0759      	lsls	r1, r3, #29
 80014ee:	025b      	lsls	r3, r3, #9
 80014f0:	0b1c      	lsrs	r4, r3, #12
 80014f2:	08d2      	lsrs	r2, r2, #3
 80014f4:	430a      	orrs	r2, r1
 80014f6:	4690      	mov	r8, r2
 80014f8:	2300      	movs	r3, #0
 80014fa:	e63f      	b.n	800117c <__aeabi_ddiv+0xc0>
 80014fc:	2480      	movs	r4, #128	@ 0x80
 80014fe:	464b      	mov	r3, r9
 8001500:	0324      	lsls	r4, r4, #12
 8001502:	4223      	tst	r3, r4
 8001504:	d009      	beq.n	800151a <__aeabi_ddiv+0x45e>
 8001506:	465b      	mov	r3, fp
 8001508:	4223      	tst	r3, r4
 800150a:	d106      	bne.n	800151a <__aeabi_ddiv+0x45e>
 800150c:	431c      	orrs	r4, r3
 800150e:	0324      	lsls	r4, r4, #12
 8001510:	002e      	movs	r6, r5
 8001512:	4690      	mov	r8, r2
 8001514:	4b71      	ldr	r3, [pc, #452]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e630      	b.n	800117c <__aeabi_ddiv+0xc0>
 800151a:	2480      	movs	r4, #128	@ 0x80
 800151c:	464b      	mov	r3, r9
 800151e:	0324      	lsls	r4, r4, #12
 8001520:	431c      	orrs	r4, r3
 8001522:	0324      	lsls	r4, r4, #12
 8001524:	9e02      	ldr	r6, [sp, #8]
 8001526:	4b6d      	ldr	r3, [pc, #436]	@ (80016dc <__aeabi_ddiv+0x620>)
 8001528:	0b24      	lsrs	r4, r4, #12
 800152a:	e627      	b.n	800117c <__aeabi_ddiv+0xc0>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x476>
 8001530:	e700      	b.n	8001334 <__aeabi_ddiv+0x278>
 8001532:	9800      	ldr	r0, [sp, #0]
 8001534:	1e51      	subs	r1, r2, #1
 8001536:	4684      	mov	ip, r0
 8001538:	4464      	add	r4, ip
 800153a:	4284      	cmp	r4, r0
 800153c:	d200      	bcs.n	8001540 <__aeabi_ddiv+0x484>
 800153e:	e084      	b.n	800164a <__aeabi_ddiv+0x58e>
 8001540:	42bc      	cmp	r4, r7
 8001542:	d200      	bcs.n	8001546 <__aeabi_ddiv+0x48a>
 8001544:	e0ae      	b.n	80016a4 <__aeabi_ddiv+0x5e8>
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x48e>
 8001548:	e0c1      	b.n	80016ce <__aeabi_ddiv+0x612>
 800154a:	000a      	movs	r2, r1
 800154c:	e6f0      	b.n	8001330 <__aeabi_ddiv+0x274>
 800154e:	4542      	cmp	r2, r8
 8001550:	d900      	bls.n	8001554 <__aeabi_ddiv+0x498>
 8001552:	e62c      	b.n	80011ae <__aeabi_ddiv+0xf2>
 8001554:	464b      	mov	r3, r9
 8001556:	07dc      	lsls	r4, r3, #31
 8001558:	0858      	lsrs	r0, r3, #1
 800155a:	4643      	mov	r3, r8
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	431c      	orrs	r4, r3
 8001560:	4643      	mov	r3, r8
 8001562:	07df      	lsls	r7, r3, #31
 8001564:	e62a      	b.n	80011bc <__aeabi_ddiv+0x100>
 8001566:	f000 fdaf 	bl	80020c8 <__clzsi2>
 800156a:	2315      	movs	r3, #21
 800156c:	469c      	mov	ip, r3
 800156e:	4484      	add	ip, r0
 8001570:	0002      	movs	r2, r0
 8001572:	4663      	mov	r3, ip
 8001574:	3220      	adds	r2, #32
 8001576:	2b1c      	cmp	r3, #28
 8001578:	dc00      	bgt.n	800157c <__aeabi_ddiv+0x4c0>
 800157a:	e72e      	b.n	80013da <__aeabi_ddiv+0x31e>
 800157c:	0023      	movs	r3, r4
 800157e:	3808      	subs	r0, #8
 8001580:	4083      	lsls	r3, r0
 8001582:	4699      	mov	r9, r3
 8001584:	2300      	movs	r3, #0
 8001586:	4698      	mov	r8, r3
 8001588:	e736      	b.n	80013f8 <__aeabi_ddiv+0x33c>
 800158a:	f000 fd9d 	bl	80020c8 <__clzsi2>
 800158e:	0002      	movs	r2, r0
 8001590:	0003      	movs	r3, r0
 8001592:	3215      	adds	r2, #21
 8001594:	3320      	adds	r3, #32
 8001596:	2a1c      	cmp	r2, #28
 8001598:	dc00      	bgt.n	800159c <__aeabi_ddiv+0x4e0>
 800159a:	e6fb      	b.n	8001394 <__aeabi_ddiv+0x2d8>
 800159c:	9900      	ldr	r1, [sp, #0]
 800159e:	3808      	subs	r0, #8
 80015a0:	4081      	lsls	r1, r0
 80015a2:	2200      	movs	r2, #0
 80015a4:	468b      	mov	fp, r1
 80015a6:	e702      	b.n	80013ae <__aeabi_ddiv+0x2f2>
 80015a8:	9900      	ldr	r1, [sp, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	468c      	mov	ip, r1
 80015ae:	4464      	add	r4, ip
 80015b0:	42a1      	cmp	r1, r4
 80015b2:	d900      	bls.n	80015b6 <__aeabi_ddiv+0x4fa>
 80015b4:	e69a      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015b6:	42a2      	cmp	r2, r4
 80015b8:	d800      	bhi.n	80015bc <__aeabi_ddiv+0x500>
 80015ba:	e697      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015bc:	1e83      	subs	r3, r0, #2
 80015be:	4464      	add	r4, ip
 80015c0:	e694      	b.n	80012ec <__aeabi_ddiv+0x230>
 80015c2:	46ac      	mov	ip, r5
 80015c4:	4461      	add	r1, ip
 80015c6:	3f01      	subs	r7, #1
 80015c8:	428d      	cmp	r5, r1
 80015ca:	d900      	bls.n	80015ce <__aeabi_ddiv+0x512>
 80015cc:	e680      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015ce:	428a      	cmp	r2, r1
 80015d0:	d800      	bhi.n	80015d4 <__aeabi_ddiv+0x518>
 80015d2:	e67d      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015d4:	1e87      	subs	r7, r0, #2
 80015d6:	4461      	add	r1, ip
 80015d8:	e67a      	b.n	80012d0 <__aeabi_ddiv+0x214>
 80015da:	4285      	cmp	r5, r0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_ddiv+0x524>
 80015de:	e65f      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 80015e0:	45b9      	cmp	r9, r7
 80015e2:	d900      	bls.n	80015e6 <__aeabi_ddiv+0x52a>
 80015e4:	e65c      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 80015e6:	e656      	b.n	8001296 <__aeabi_ddiv+0x1da>
 80015e8:	42a2      	cmp	r2, r4
 80015ea:	d800      	bhi.n	80015ee <__aeabi_ddiv+0x532>
 80015ec:	e61a      	b.n	8001224 <__aeabi_ddiv+0x168>
 80015ee:	1e83      	subs	r3, r0, #2
 80015f0:	4464      	add	r4, ip
 80015f2:	e617      	b.n	8001224 <__aeabi_ddiv+0x168>
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d800      	bhi.n	80015fa <__aeabi_ddiv+0x53e>
 80015f8:	e600      	b.n	80011fc <__aeabi_ddiv+0x140>
 80015fa:	46ac      	mov	ip, r5
 80015fc:	1e83      	subs	r3, r0, #2
 80015fe:	4698      	mov	r8, r3
 8001600:	4461      	add	r1, ip
 8001602:	e5fb      	b.n	80011fc <__aeabi_ddiv+0x140>
 8001604:	4837      	ldr	r0, [pc, #220]	@ (80016e4 <__aeabi_ddiv+0x628>)
 8001606:	0014      	movs	r4, r2
 8001608:	4450      	add	r0, sl
 800160a:	4082      	lsls	r2, r0
 800160c:	465b      	mov	r3, fp
 800160e:	0017      	movs	r7, r2
 8001610:	4083      	lsls	r3, r0
 8001612:	40cc      	lsrs	r4, r1
 8001614:	1e7a      	subs	r2, r7, #1
 8001616:	4197      	sbcs	r7, r2
 8001618:	4323      	orrs	r3, r4
 800161a:	433b      	orrs	r3, r7
 800161c:	001a      	movs	r2, r3
 800161e:	465b      	mov	r3, fp
 8001620:	40cb      	lsrs	r3, r1
 8001622:	0751      	lsls	r1, r2, #29
 8001624:	d009      	beq.n	800163a <__aeabi_ddiv+0x57e>
 8001626:	210f      	movs	r1, #15
 8001628:	4011      	ands	r1, r2
 800162a:	2904      	cmp	r1, #4
 800162c:	d005      	beq.n	800163a <__aeabi_ddiv+0x57e>
 800162e:	1d11      	adds	r1, r2, #4
 8001630:	4291      	cmp	r1, r2
 8001632:	4192      	sbcs	r2, r2
 8001634:	4252      	negs	r2, r2
 8001636:	189b      	adds	r3, r3, r2
 8001638:	000a      	movs	r2, r1
 800163a:	0219      	lsls	r1, r3, #8
 800163c:	d400      	bmi.n	8001640 <__aeabi_ddiv+0x584>
 800163e:	e755      	b.n	80014ec <__aeabi_ddiv+0x430>
 8001640:	2200      	movs	r2, #0
 8001642:	2301      	movs	r3, #1
 8001644:	2400      	movs	r4, #0
 8001646:	4690      	mov	r8, r2
 8001648:	e598      	b.n	800117c <__aeabi_ddiv+0xc0>
 800164a:	000a      	movs	r2, r1
 800164c:	42bc      	cmp	r4, r7
 800164e:	d000      	beq.n	8001652 <__aeabi_ddiv+0x596>
 8001650:	e66e      	b.n	8001330 <__aeabi_ddiv+0x274>
 8001652:	454b      	cmp	r3, r9
 8001654:	d000      	beq.n	8001658 <__aeabi_ddiv+0x59c>
 8001656:	e66b      	b.n	8001330 <__aeabi_ddiv+0x274>
 8001658:	e66c      	b.n	8001334 <__aeabi_ddiv+0x278>
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <__aeabi_ddiv+0x62c>)
 800165c:	4a23      	ldr	r2, [pc, #140]	@ (80016ec <__aeabi_ddiv+0x630>)
 800165e:	4453      	add	r3, sl
 8001660:	4592      	cmp	sl, r2
 8001662:	da00      	bge.n	8001666 <__aeabi_ddiv+0x5aa>
 8001664:	e718      	b.n	8001498 <__aeabi_ddiv+0x3dc>
 8001666:	2101      	movs	r1, #1
 8001668:	4249      	negs	r1, r1
 800166a:	1d0a      	adds	r2, r1, #4
 800166c:	428a      	cmp	r2, r1
 800166e:	4189      	sbcs	r1, r1
 8001670:	4249      	negs	r1, r1
 8001672:	448b      	add	fp, r1
 8001674:	e666      	b.n	8001344 <__aeabi_ddiv+0x288>
 8001676:	210f      	movs	r1, #15
 8001678:	4011      	ands	r1, r2
 800167a:	2904      	cmp	r1, #4
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x5c4>
 800167e:	e661      	b.n	8001344 <__aeabi_ddiv+0x288>
 8001680:	0011      	movs	r1, r2
 8001682:	e7f2      	b.n	800166a <__aeabi_ddiv+0x5ae>
 8001684:	42bc      	cmp	r4, r7
 8001686:	d800      	bhi.n	800168a <__aeabi_ddiv+0x5ce>
 8001688:	e60a      	b.n	80012a0 <__aeabi_ddiv+0x1e4>
 800168a:	2302      	movs	r3, #2
 800168c:	425b      	negs	r3, r3
 800168e:	469c      	mov	ip, r3
 8001690:	9900      	ldr	r1, [sp, #0]
 8001692:	444f      	add	r7, r9
 8001694:	454f      	cmp	r7, r9
 8001696:	419b      	sbcs	r3, r3
 8001698:	44e3      	add	fp, ip
 800169a:	468c      	mov	ip, r1
 800169c:	425b      	negs	r3, r3
 800169e:	4463      	add	r3, ip
 80016a0:	18c0      	adds	r0, r0, r3
 80016a2:	e5ff      	b.n	80012a4 <__aeabi_ddiv+0x1e8>
 80016a4:	4649      	mov	r1, r9
 80016a6:	9d00      	ldr	r5, [sp, #0]
 80016a8:	0048      	lsls	r0, r1, #1
 80016aa:	4548      	cmp	r0, r9
 80016ac:	4189      	sbcs	r1, r1
 80016ae:	46ac      	mov	ip, r5
 80016b0:	4249      	negs	r1, r1
 80016b2:	4461      	add	r1, ip
 80016b4:	4681      	mov	r9, r0
 80016b6:	3a02      	subs	r2, #2
 80016b8:	1864      	adds	r4, r4, r1
 80016ba:	e7c7      	b.n	800164c <__aeabi_ddiv+0x590>
 80016bc:	2480      	movs	r4, #128	@ 0x80
 80016be:	465b      	mov	r3, fp
 80016c0:	0324      	lsls	r4, r4, #12
 80016c2:	431c      	orrs	r4, r3
 80016c4:	0324      	lsls	r4, r4, #12
 80016c6:	4690      	mov	r8, r2
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <__aeabi_ddiv+0x620>)
 80016ca:	0b24      	lsrs	r4, r4, #12
 80016cc:	e556      	b.n	800117c <__aeabi_ddiv+0xc0>
 80016ce:	4599      	cmp	r9, r3
 80016d0:	d3e8      	bcc.n	80016a4 <__aeabi_ddiv+0x5e8>
 80016d2:	000a      	movs	r2, r1
 80016d4:	e7bd      	b.n	8001652 <__aeabi_ddiv+0x596>
 80016d6:	2300      	movs	r3, #0
 80016d8:	e708      	b.n	80014ec <__aeabi_ddiv+0x430>
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	000007ff 	.word	0x000007ff
 80016e0:	0000043e 	.word	0x0000043e
 80016e4:	0000041e 	.word	0x0000041e
 80016e8:	000003ff 	.word	0x000003ff
 80016ec:	fffffc02 	.word	0xfffffc02

080016f0 <__eqdf2>:
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	4657      	mov	r7, sl
 80016f4:	46de      	mov	lr, fp
 80016f6:	464e      	mov	r6, r9
 80016f8:	4645      	mov	r5, r8
 80016fa:	b5e0      	push	{r5, r6, r7, lr}
 80016fc:	000d      	movs	r5, r1
 80016fe:	0004      	movs	r4, r0
 8001700:	0fe8      	lsrs	r0, r5, #31
 8001702:	4683      	mov	fp, r0
 8001704:	0309      	lsls	r1, r1, #12
 8001706:	0fd8      	lsrs	r0, r3, #31
 8001708:	0b09      	lsrs	r1, r1, #12
 800170a:	4682      	mov	sl, r0
 800170c:	4819      	ldr	r0, [pc, #100]	@ (8001774 <__eqdf2+0x84>)
 800170e:	468c      	mov	ip, r1
 8001710:	031f      	lsls	r7, r3, #12
 8001712:	0069      	lsls	r1, r5, #1
 8001714:	005e      	lsls	r6, r3, #1
 8001716:	0d49      	lsrs	r1, r1, #21
 8001718:	0b3f      	lsrs	r7, r7, #12
 800171a:	0d76      	lsrs	r6, r6, #21
 800171c:	4281      	cmp	r1, r0
 800171e:	d018      	beq.n	8001752 <__eqdf2+0x62>
 8001720:	4286      	cmp	r6, r0
 8001722:	d00f      	beq.n	8001744 <__eqdf2+0x54>
 8001724:	2001      	movs	r0, #1
 8001726:	42b1      	cmp	r1, r6
 8001728:	d10d      	bne.n	8001746 <__eqdf2+0x56>
 800172a:	45bc      	cmp	ip, r7
 800172c:	d10b      	bne.n	8001746 <__eqdf2+0x56>
 800172e:	4294      	cmp	r4, r2
 8001730:	d109      	bne.n	8001746 <__eqdf2+0x56>
 8001732:	45d3      	cmp	fp, sl
 8001734:	d01c      	beq.n	8001770 <__eqdf2+0x80>
 8001736:	2900      	cmp	r1, #0
 8001738:	d105      	bne.n	8001746 <__eqdf2+0x56>
 800173a:	4660      	mov	r0, ip
 800173c:	4320      	orrs	r0, r4
 800173e:	1e43      	subs	r3, r0, #1
 8001740:	4198      	sbcs	r0, r3
 8001742:	e000      	b.n	8001746 <__eqdf2+0x56>
 8001744:	2001      	movs	r0, #1
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	46bb      	mov	fp, r7
 800174a:	46b2      	mov	sl, r6
 800174c:	46a9      	mov	r9, r5
 800174e:	46a0      	mov	r8, r4
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	2001      	movs	r0, #1
 8001754:	428e      	cmp	r6, r1
 8001756:	d1f6      	bne.n	8001746 <__eqdf2+0x56>
 8001758:	4661      	mov	r1, ip
 800175a:	4339      	orrs	r1, r7
 800175c:	000f      	movs	r7, r1
 800175e:	4317      	orrs	r7, r2
 8001760:	4327      	orrs	r7, r4
 8001762:	d1f0      	bne.n	8001746 <__eqdf2+0x56>
 8001764:	465b      	mov	r3, fp
 8001766:	4652      	mov	r2, sl
 8001768:	1a98      	subs	r0, r3, r2
 800176a:	1e43      	subs	r3, r0, #1
 800176c:	4198      	sbcs	r0, r3
 800176e:	e7ea      	b.n	8001746 <__eqdf2+0x56>
 8001770:	2000      	movs	r0, #0
 8001772:	e7e8      	b.n	8001746 <__eqdf2+0x56>
 8001774:	000007ff 	.word	0x000007ff

08001778 <__gedf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	4657      	mov	r7, sl
 800177c:	464e      	mov	r6, r9
 800177e:	4645      	mov	r5, r8
 8001780:	46de      	mov	lr, fp
 8001782:	b5e0      	push	{r5, r6, r7, lr}
 8001784:	000d      	movs	r5, r1
 8001786:	030f      	lsls	r7, r1, #12
 8001788:	0b39      	lsrs	r1, r7, #12
 800178a:	b083      	sub	sp, #12
 800178c:	0004      	movs	r4, r0
 800178e:	4680      	mov	r8, r0
 8001790:	9101      	str	r1, [sp, #4]
 8001792:	0058      	lsls	r0, r3, #1
 8001794:	0fe9      	lsrs	r1, r5, #31
 8001796:	4f31      	ldr	r7, [pc, #196]	@ (800185c <__gedf2+0xe4>)
 8001798:	0d40      	lsrs	r0, r0, #21
 800179a:	468c      	mov	ip, r1
 800179c:	006e      	lsls	r6, r5, #1
 800179e:	0319      	lsls	r1, r3, #12
 80017a0:	4682      	mov	sl, r0
 80017a2:	4691      	mov	r9, r2
 80017a4:	0d76      	lsrs	r6, r6, #21
 80017a6:	0b09      	lsrs	r1, r1, #12
 80017a8:	0fd8      	lsrs	r0, r3, #31
 80017aa:	42be      	cmp	r6, r7
 80017ac:	d01f      	beq.n	80017ee <__gedf2+0x76>
 80017ae:	45ba      	cmp	sl, r7
 80017b0:	d00f      	beq.n	80017d2 <__gedf2+0x5a>
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	d12f      	bne.n	8001816 <__gedf2+0x9e>
 80017b6:	4655      	mov	r5, sl
 80017b8:	9e01      	ldr	r6, [sp, #4]
 80017ba:	4334      	orrs	r4, r6
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d127      	bne.n	8001810 <__gedf2+0x98>
 80017c0:	430a      	orrs	r2, r1
 80017c2:	d03a      	beq.n	800183a <__gedf2+0xc2>
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d145      	bne.n	8001854 <__gedf2+0xdc>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d11a      	bne.n	8001802 <__gedf2+0x8a>
 80017cc:	2001      	movs	r0, #1
 80017ce:	4240      	negs	r0, r0
 80017d0:	e017      	b.n	8001802 <__gedf2+0x8a>
 80017d2:	4311      	orrs	r1, r2
 80017d4:	d13b      	bne.n	800184e <__gedf2+0xd6>
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d102      	bne.n	80017e0 <__gedf2+0x68>
 80017da:	9f01      	ldr	r7, [sp, #4]
 80017dc:	4327      	orrs	r7, r4
 80017de:	d0f3      	beq.n	80017c8 <__gedf2+0x50>
 80017e0:	4584      	cmp	ip, r0
 80017e2:	d109      	bne.n	80017f8 <__gedf2+0x80>
 80017e4:	4663      	mov	r3, ip
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <__gedf2+0x54>
 80017ea:	4660      	mov	r0, ip
 80017ec:	e009      	b.n	8001802 <__gedf2+0x8a>
 80017ee:	9f01      	ldr	r7, [sp, #4]
 80017f0:	4327      	orrs	r7, r4
 80017f2:	d12c      	bne.n	800184e <__gedf2+0xd6>
 80017f4:	45b2      	cmp	sl, r6
 80017f6:	d024      	beq.n	8001842 <__gedf2+0xca>
 80017f8:	4663      	mov	r3, ip
 80017fa:	2002      	movs	r0, #2
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4018      	ands	r0, r3
 8001800:	3801      	subs	r0, #1
 8001802:	b003      	add	sp, #12
 8001804:	bcf0      	pop	{r4, r5, r6, r7}
 8001806:	46bb      	mov	fp, r7
 8001808:	46b2      	mov	sl, r6
 800180a:	46a9      	mov	r9, r5
 800180c:	46a0      	mov	r8, r4
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	2c00      	cmp	r4, #0
 8001812:	d0d9      	beq.n	80017c8 <__gedf2+0x50>
 8001814:	e7e4      	b.n	80017e0 <__gedf2+0x68>
 8001816:	4654      	mov	r4, sl
 8001818:	2c00      	cmp	r4, #0
 800181a:	d0ed      	beq.n	80017f8 <__gedf2+0x80>
 800181c:	4584      	cmp	ip, r0
 800181e:	d1eb      	bne.n	80017f8 <__gedf2+0x80>
 8001820:	4556      	cmp	r6, sl
 8001822:	dce9      	bgt.n	80017f8 <__gedf2+0x80>
 8001824:	dbde      	blt.n	80017e4 <__gedf2+0x6c>
 8001826:	9b01      	ldr	r3, [sp, #4]
 8001828:	428b      	cmp	r3, r1
 800182a:	d8e5      	bhi.n	80017f8 <__gedf2+0x80>
 800182c:	d1da      	bne.n	80017e4 <__gedf2+0x6c>
 800182e:	45c8      	cmp	r8, r9
 8001830:	d8e2      	bhi.n	80017f8 <__gedf2+0x80>
 8001832:	2000      	movs	r0, #0
 8001834:	45c8      	cmp	r8, r9
 8001836:	d2e4      	bcs.n	8001802 <__gedf2+0x8a>
 8001838:	e7d4      	b.n	80017e4 <__gedf2+0x6c>
 800183a:	2000      	movs	r0, #0
 800183c:	2c00      	cmp	r4, #0
 800183e:	d0e0      	beq.n	8001802 <__gedf2+0x8a>
 8001840:	e7da      	b.n	80017f8 <__gedf2+0x80>
 8001842:	4311      	orrs	r1, r2
 8001844:	d103      	bne.n	800184e <__gedf2+0xd6>
 8001846:	4584      	cmp	ip, r0
 8001848:	d1d6      	bne.n	80017f8 <__gedf2+0x80>
 800184a:	2000      	movs	r0, #0
 800184c:	e7d9      	b.n	8001802 <__gedf2+0x8a>
 800184e:	2002      	movs	r0, #2
 8001850:	4240      	negs	r0, r0
 8001852:	e7d6      	b.n	8001802 <__gedf2+0x8a>
 8001854:	4584      	cmp	ip, r0
 8001856:	d0e6      	beq.n	8001826 <__gedf2+0xae>
 8001858:	e7ce      	b.n	80017f8 <__gedf2+0x80>
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	000007ff 	.word	0x000007ff

08001860 <__ledf2>:
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	b5e0      	push	{r5, r6, r7, lr}
 800186c:	000d      	movs	r5, r1
 800186e:	030f      	lsls	r7, r1, #12
 8001870:	0004      	movs	r4, r0
 8001872:	4680      	mov	r8, r0
 8001874:	0fe8      	lsrs	r0, r5, #31
 8001876:	0b39      	lsrs	r1, r7, #12
 8001878:	4684      	mov	ip, r0
 800187a:	b083      	sub	sp, #12
 800187c:	0058      	lsls	r0, r3, #1
 800187e:	4f30      	ldr	r7, [pc, #192]	@ (8001940 <__ledf2+0xe0>)
 8001880:	0d40      	lsrs	r0, r0, #21
 8001882:	9101      	str	r1, [sp, #4]
 8001884:	031e      	lsls	r6, r3, #12
 8001886:	0069      	lsls	r1, r5, #1
 8001888:	4682      	mov	sl, r0
 800188a:	4691      	mov	r9, r2
 800188c:	0d49      	lsrs	r1, r1, #21
 800188e:	0b36      	lsrs	r6, r6, #12
 8001890:	0fd8      	lsrs	r0, r3, #31
 8001892:	42b9      	cmp	r1, r7
 8001894:	d020      	beq.n	80018d8 <__ledf2+0x78>
 8001896:	45ba      	cmp	sl, r7
 8001898:	d00f      	beq.n	80018ba <__ledf2+0x5a>
 800189a:	2900      	cmp	r1, #0
 800189c:	d12b      	bne.n	80018f6 <__ledf2+0x96>
 800189e:	9901      	ldr	r1, [sp, #4]
 80018a0:	430c      	orrs	r4, r1
 80018a2:	4651      	mov	r1, sl
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d137      	bne.n	8001918 <__ledf2+0xb8>
 80018a8:	4332      	orrs	r2, r6
 80018aa:	d038      	beq.n	800191e <__ledf2+0xbe>
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d144      	bne.n	800193a <__ledf2+0xda>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d119      	bne.n	80018e8 <__ledf2+0x88>
 80018b4:	2001      	movs	r0, #1
 80018b6:	4240      	negs	r0, r0
 80018b8:	e016      	b.n	80018e8 <__ledf2+0x88>
 80018ba:	4316      	orrs	r6, r2
 80018bc:	d113      	bne.n	80018e6 <__ledf2+0x86>
 80018be:	2900      	cmp	r1, #0
 80018c0:	d102      	bne.n	80018c8 <__ledf2+0x68>
 80018c2:	9f01      	ldr	r7, [sp, #4]
 80018c4:	4327      	orrs	r7, r4
 80018c6:	d0f3      	beq.n	80018b0 <__ledf2+0x50>
 80018c8:	4584      	cmp	ip, r0
 80018ca:	d020      	beq.n	800190e <__ledf2+0xae>
 80018cc:	4663      	mov	r3, ip
 80018ce:	2002      	movs	r0, #2
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4018      	ands	r0, r3
 80018d4:	3801      	subs	r0, #1
 80018d6:	e007      	b.n	80018e8 <__ledf2+0x88>
 80018d8:	9f01      	ldr	r7, [sp, #4]
 80018da:	4327      	orrs	r7, r4
 80018dc:	d103      	bne.n	80018e6 <__ledf2+0x86>
 80018de:	458a      	cmp	sl, r1
 80018e0:	d1f4      	bne.n	80018cc <__ledf2+0x6c>
 80018e2:	4316      	orrs	r6, r2
 80018e4:	d01f      	beq.n	8001926 <__ledf2+0xc6>
 80018e6:	2002      	movs	r0, #2
 80018e8:	b003      	add	sp, #12
 80018ea:	bcf0      	pop	{r4, r5, r6, r7}
 80018ec:	46bb      	mov	fp, r7
 80018ee:	46b2      	mov	sl, r6
 80018f0:	46a9      	mov	r9, r5
 80018f2:	46a0      	mov	r8, r4
 80018f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f6:	4654      	mov	r4, sl
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d0e7      	beq.n	80018cc <__ledf2+0x6c>
 80018fc:	4584      	cmp	ip, r0
 80018fe:	d1e5      	bne.n	80018cc <__ledf2+0x6c>
 8001900:	4551      	cmp	r1, sl
 8001902:	dce3      	bgt.n	80018cc <__ledf2+0x6c>
 8001904:	db03      	blt.n	800190e <__ledf2+0xae>
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	42b3      	cmp	r3, r6
 800190a:	d8df      	bhi.n	80018cc <__ledf2+0x6c>
 800190c:	d00f      	beq.n	800192e <__ledf2+0xce>
 800190e:	4663      	mov	r3, ip
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0cf      	beq.n	80018b4 <__ledf2+0x54>
 8001914:	4660      	mov	r0, ip
 8001916:	e7e7      	b.n	80018e8 <__ledf2+0x88>
 8001918:	2c00      	cmp	r4, #0
 800191a:	d0c9      	beq.n	80018b0 <__ledf2+0x50>
 800191c:	e7d4      	b.n	80018c8 <__ledf2+0x68>
 800191e:	2000      	movs	r0, #0
 8001920:	2c00      	cmp	r4, #0
 8001922:	d0e1      	beq.n	80018e8 <__ledf2+0x88>
 8001924:	e7d2      	b.n	80018cc <__ledf2+0x6c>
 8001926:	4584      	cmp	ip, r0
 8001928:	d1d0      	bne.n	80018cc <__ledf2+0x6c>
 800192a:	2000      	movs	r0, #0
 800192c:	e7dc      	b.n	80018e8 <__ledf2+0x88>
 800192e:	45c8      	cmp	r8, r9
 8001930:	d8cc      	bhi.n	80018cc <__ledf2+0x6c>
 8001932:	2000      	movs	r0, #0
 8001934:	45c8      	cmp	r8, r9
 8001936:	d2d7      	bcs.n	80018e8 <__ledf2+0x88>
 8001938:	e7e9      	b.n	800190e <__ledf2+0xae>
 800193a:	4584      	cmp	ip, r0
 800193c:	d0e3      	beq.n	8001906 <__ledf2+0xa6>
 800193e:	e7c5      	b.n	80018cc <__ledf2+0x6c>
 8001940:	000007ff 	.word	0x000007ff

08001944 <__aeabi_dmul>:
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	4657      	mov	r7, sl
 8001948:	46de      	mov	lr, fp
 800194a:	464e      	mov	r6, r9
 800194c:	4645      	mov	r5, r8
 800194e:	b5e0      	push	{r5, r6, r7, lr}
 8001950:	001f      	movs	r7, r3
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0b1b      	lsrs	r3, r3, #12
 8001956:	0016      	movs	r6, r2
 8001958:	469a      	mov	sl, r3
 800195a:	0fca      	lsrs	r2, r1, #31
 800195c:	004b      	lsls	r3, r1, #1
 800195e:	0004      	movs	r4, r0
 8001960:	4693      	mov	fp, r2
 8001962:	b087      	sub	sp, #28
 8001964:	0d5b      	lsrs	r3, r3, #21
 8001966:	d100      	bne.n	800196a <__aeabi_dmul+0x26>
 8001968:	e0d5      	b.n	8001b16 <__aeabi_dmul+0x1d2>
 800196a:	4abb      	ldr	r2, [pc, #748]	@ (8001c58 <__aeabi_dmul+0x314>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_dmul+0x2e>
 8001970:	e0f8      	b.n	8001b64 <__aeabi_dmul+0x220>
 8001972:	4651      	mov	r1, sl
 8001974:	0f42      	lsrs	r2, r0, #29
 8001976:	00c9      	lsls	r1, r1, #3
 8001978:	430a      	orrs	r2, r1
 800197a:	2180      	movs	r1, #128	@ 0x80
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	4311      	orrs	r1, r2
 8001980:	00c2      	lsls	r2, r0, #3
 8001982:	4691      	mov	r9, r2
 8001984:	4ab5      	ldr	r2, [pc, #724]	@ (8001c5c <__aeabi_dmul+0x318>)
 8001986:	468a      	mov	sl, r1
 8001988:	189d      	adds	r5, r3, r2
 800198a:	2300      	movs	r3, #0
 800198c:	4698      	mov	r8, r3
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	033c      	lsls	r4, r7, #12
 8001992:	007b      	lsls	r3, r7, #1
 8001994:	0ffa      	lsrs	r2, r7, #31
 8001996:	0030      	movs	r0, r6
 8001998:	0b24      	lsrs	r4, r4, #12
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	d100      	bne.n	80019a2 <__aeabi_dmul+0x5e>
 80019a0:	e096      	b.n	8001ad0 <__aeabi_dmul+0x18c>
 80019a2:	4aad      	ldr	r2, [pc, #692]	@ (8001c58 <__aeabi_dmul+0x314>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d031      	beq.n	8001a0c <__aeabi_dmul+0xc8>
 80019a8:	0f72      	lsrs	r2, r6, #29
 80019aa:	00e4      	lsls	r4, r4, #3
 80019ac:	4322      	orrs	r2, r4
 80019ae:	2480      	movs	r4, #128	@ 0x80
 80019b0:	0424      	lsls	r4, r4, #16
 80019b2:	4314      	orrs	r4, r2
 80019b4:	4aa9      	ldr	r2, [pc, #676]	@ (8001c5c <__aeabi_dmul+0x318>)
 80019b6:	00f0      	lsls	r0, r6, #3
 80019b8:	4694      	mov	ip, r2
 80019ba:	4463      	add	r3, ip
 80019bc:	195b      	adds	r3, r3, r5
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	4642      	mov	r2, r8
 80019c4:	2600      	movs	r6, #0
 80019c6:	2a0a      	cmp	r2, #10
 80019c8:	dc42      	bgt.n	8001a50 <__aeabi_dmul+0x10c>
 80019ca:	465a      	mov	r2, fp
 80019cc:	9900      	ldr	r1, [sp, #0]
 80019ce:	404a      	eors	r2, r1
 80019d0:	4693      	mov	fp, r2
 80019d2:	4642      	mov	r2, r8
 80019d4:	2a02      	cmp	r2, #2
 80019d6:	dc32      	bgt.n	8001a3e <__aeabi_dmul+0xfa>
 80019d8:	3a01      	subs	r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d900      	bls.n	80019e0 <__aeabi_dmul+0x9c>
 80019de:	e149      	b.n	8001c74 <__aeabi_dmul+0x330>
 80019e0:	2e02      	cmp	r6, #2
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dmul+0xa2>
 80019e4:	e0ca      	b.n	8001b7c <__aeabi_dmul+0x238>
 80019e6:	2e01      	cmp	r6, #1
 80019e8:	d13d      	bne.n	8001a66 <__aeabi_dmul+0x122>
 80019ea:	2300      	movs	r3, #0
 80019ec:	2400      	movs	r4, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	0010      	movs	r0, r2
 80019f2:	465a      	mov	r2, fp
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	4323      	orrs	r3, r4
 80019f8:	07d2      	lsls	r2, r2, #31
 80019fa:	4313      	orrs	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	b007      	add	sp, #28
 8001a00:	bcf0      	pop	{r4, r5, r6, r7}
 8001a02:	46bb      	mov	fp, r7
 8001a04:	46b2      	mov	sl, r6
 8001a06:	46a9      	mov	r9, r5
 8001a08:	46a0      	mov	r8, r4
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0c:	4b92      	ldr	r3, [pc, #584]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001a0e:	4326      	orrs	r6, r4
 8001a10:	18eb      	adds	r3, r5, r3
 8001a12:	2e00      	cmp	r6, #0
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dmul+0xd4>
 8001a16:	e0bb      	b.n	8001b90 <__aeabi_dmul+0x24c>
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	465a      	mov	r2, fp
 8001a20:	4688      	mov	r8, r1
 8001a22:	9900      	ldr	r1, [sp, #0]
 8001a24:	404a      	eors	r2, r1
 8001a26:	2180      	movs	r1, #128	@ 0x80
 8001a28:	0109      	lsls	r1, r1, #4
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	0029      	movs	r1, r5
 8001a2e:	4461      	add	r1, ip
 8001a30:	9101      	str	r1, [sp, #4]
 8001a32:	4641      	mov	r1, r8
 8001a34:	290a      	cmp	r1, #10
 8001a36:	dd00      	ble.n	8001a3a <__aeabi_dmul+0xf6>
 8001a38:	e233      	b.n	8001ea2 <__aeabi_dmul+0x55e>
 8001a3a:	4693      	mov	fp, r2
 8001a3c:	2603      	movs	r6, #3
 8001a3e:	4642      	mov	r2, r8
 8001a40:	2701      	movs	r7, #1
 8001a42:	4097      	lsls	r7, r2
 8001a44:	21a6      	movs	r1, #166	@ 0xa6
 8001a46:	003a      	movs	r2, r7
 8001a48:	00c9      	lsls	r1, r1, #3
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	420f      	tst	r7, r1
 8001a4e:	d031      	beq.n	8001ab4 <__aeabi_dmul+0x170>
 8001a50:	9e02      	ldr	r6, [sp, #8]
 8001a52:	2e02      	cmp	r6, #2
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x114>
 8001a56:	e235      	b.n	8001ec4 <__aeabi_dmul+0x580>
 8001a58:	2e03      	cmp	r6, #3
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x11a>
 8001a5c:	e1d2      	b.n	8001e04 <__aeabi_dmul+0x4c0>
 8001a5e:	4654      	mov	r4, sl
 8001a60:	4648      	mov	r0, r9
 8001a62:	2e01      	cmp	r6, #1
 8001a64:	d0c1      	beq.n	80019ea <__aeabi_dmul+0xa6>
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	4b7d      	ldr	r3, [pc, #500]	@ (8001c60 <__aeabi_dmul+0x31c>)
 8001a6a:	4694      	mov	ip, r2
 8001a6c:	4463      	add	r3, ip
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dc00      	bgt.n	8001a74 <__aeabi_dmul+0x130>
 8001a72:	e0c0      	b.n	8001bf6 <__aeabi_dmul+0x2b2>
 8001a74:	0742      	lsls	r2, r0, #29
 8001a76:	d009      	beq.n	8001a8c <__aeabi_dmul+0x148>
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4002      	ands	r2, r0
 8001a7c:	2a04      	cmp	r2, #4
 8001a7e:	d005      	beq.n	8001a8c <__aeabi_dmul+0x148>
 8001a80:	1d02      	adds	r2, r0, #4
 8001a82:	4282      	cmp	r2, r0
 8001a84:	4180      	sbcs	r0, r0
 8001a86:	4240      	negs	r0, r0
 8001a88:	1824      	adds	r4, r4, r0
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	01e2      	lsls	r2, r4, #7
 8001a8e:	d506      	bpl.n	8001a9e <__aeabi_dmul+0x15a>
 8001a90:	4b74      	ldr	r3, [pc, #464]	@ (8001c64 <__aeabi_dmul+0x320>)
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	401c      	ands	r4, r3
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	4694      	mov	ip, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4463      	add	r3, ip
 8001a9e:	4a72      	ldr	r2, [pc, #456]	@ (8001c68 <__aeabi_dmul+0x324>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	dc6b      	bgt.n	8001b7c <__aeabi_dmul+0x238>
 8001aa4:	0762      	lsls	r2, r4, #29
 8001aa6:	08c0      	lsrs	r0, r0, #3
 8001aa8:	0264      	lsls	r4, r4, #9
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4302      	orrs	r2, r0
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	0d5b      	lsrs	r3, r3, #21
 8001ab2:	e79d      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ab4:	2190      	movs	r1, #144	@ 0x90
 8001ab6:	0089      	lsls	r1, r1, #2
 8001ab8:	420f      	tst	r7, r1
 8001aba:	d163      	bne.n	8001b84 <__aeabi_dmul+0x240>
 8001abc:	2288      	movs	r2, #136	@ 0x88
 8001abe:	423a      	tst	r2, r7
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dmul+0x180>
 8001ac2:	e0d7      	b.n	8001c74 <__aeabi_dmul+0x330>
 8001ac4:	9b00      	ldr	r3, [sp, #0]
 8001ac6:	46a2      	mov	sl, r4
 8001ac8:	469b      	mov	fp, r3
 8001aca:	4681      	mov	r9, r0
 8001acc:	9602      	str	r6, [sp, #8]
 8001ace:	e7bf      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001ad0:	0023      	movs	r3, r4
 8001ad2:	4333      	orrs	r3, r6
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dmul+0x194>
 8001ad6:	e07f      	b.n	8001bd8 <__aeabi_dmul+0x294>
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0x19a>
 8001adc:	e1ad      	b.n	8001e3a <__aeabi_dmul+0x4f6>
 8001ade:	0020      	movs	r0, r4
 8001ae0:	f000 faf2 	bl	80020c8 <__clzsi2>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	3a0b      	subs	r2, #11
 8001aea:	201d      	movs	r0, #29
 8001aec:	0019      	movs	r1, r3
 8001aee:	1a82      	subs	r2, r0, r2
 8001af0:	0030      	movs	r0, r6
 8001af2:	3908      	subs	r1, #8
 8001af4:	40d0      	lsrs	r0, r2
 8001af6:	408c      	lsls	r4, r1
 8001af8:	4304      	orrs	r4, r0
 8001afa:	0030      	movs	r0, r6
 8001afc:	4088      	lsls	r0, r1
 8001afe:	4a5b      	ldr	r2, [pc, #364]	@ (8001c6c <__aeabi_dmul+0x328>)
 8001b00:	1aeb      	subs	r3, r5, r3
 8001b02:	4694      	mov	ip, r2
 8001b04:	4463      	add	r3, ip
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	4642      	mov	r2, r8
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	2a0a      	cmp	r2, #10
 8001b10:	dc00      	bgt.n	8001b14 <__aeabi_dmul+0x1d0>
 8001b12:	e75a      	b.n	80019ca <__aeabi_dmul+0x86>
 8001b14:	e79c      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001b16:	4653      	mov	r3, sl
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	d054      	beq.n	8001bc8 <__aeabi_dmul+0x284>
 8001b1e:	4653      	mov	r3, sl
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x1e2>
 8001b24:	e177      	b.n	8001e16 <__aeabi_dmul+0x4d2>
 8001b26:	4650      	mov	r0, sl
 8001b28:	f000 face 	bl	80020c8 <__clzsi2>
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	425b      	negs	r3, r3
 8001b30:	469c      	mov	ip, r3
 8001b32:	0002      	movs	r2, r0
 8001b34:	4484      	add	ip, r0
 8001b36:	0011      	movs	r1, r2
 8001b38:	4650      	mov	r0, sl
 8001b3a:	3908      	subs	r1, #8
 8001b3c:	4088      	lsls	r0, r1
 8001b3e:	231d      	movs	r3, #29
 8001b40:	4680      	mov	r8, r0
 8001b42:	4660      	mov	r0, ip
 8001b44:	1a1b      	subs	r3, r3, r0
 8001b46:	0020      	movs	r0, r4
 8001b48:	40d8      	lsrs	r0, r3
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	4303      	orrs	r3, r0
 8001b50:	469a      	mov	sl, r3
 8001b52:	0023      	movs	r3, r4
 8001b54:	408b      	lsls	r3, r1
 8001b56:	4699      	mov	r9, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4d44      	ldr	r5, [pc, #272]	@ (8001c6c <__aeabi_dmul+0x328>)
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	1aad      	subs	r5, r5, r2
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	e715      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001b64:	4652      	mov	r2, sl
 8001b66:	4302      	orrs	r2, r0
 8001b68:	4691      	mov	r9, r2
 8001b6a:	d126      	bne.n	8001bba <__aeabi_dmul+0x276>
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	001d      	movs	r5, r3
 8001b70:	2302      	movs	r3, #2
 8001b72:	4692      	mov	sl, r2
 8001b74:	3208      	adds	r2, #8
 8001b76:	4690      	mov	r8, r2
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	e709      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001b82:	e735      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2480      	movs	r4, #128	@ 0x80
 8001b88:	469b      	mov	fp, r3
 8001b8a:	0324      	lsls	r4, r4, #12
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <__aeabi_dmul+0x314>)
 8001b8e:	e72f      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001b90:	2202      	movs	r2, #2
 8001b92:	4641      	mov	r1, r8
 8001b94:	4311      	orrs	r1, r2
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	4694      	mov	ip, r2
 8001b9c:	002a      	movs	r2, r5
 8001b9e:	4462      	add	r2, ip
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	290a      	cmp	r1, #10
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_dmul+0x266>
 8001ba8:	e752      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001baa:	465a      	mov	r2, fp
 8001bac:	2000      	movs	r0, #0
 8001bae:	9900      	ldr	r1, [sp, #0]
 8001bb0:	0004      	movs	r4, r0
 8001bb2:	404a      	eors	r2, r1
 8001bb4:	4693      	mov	fp, r2
 8001bb6:	2602      	movs	r6, #2
 8001bb8:	e70b      	b.n	80019d2 <__aeabi_dmul+0x8e>
 8001bba:	220c      	movs	r2, #12
 8001bbc:	001d      	movs	r5, r3
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	4681      	mov	r9, r0
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	e6e3      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	469a      	mov	sl, r3
 8001bcc:	3304      	adds	r3, #4
 8001bce:	4698      	mov	r8, r3
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	e6db      	b.n	8001990 <__aeabi_dmul+0x4c>
 8001bd8:	4642      	mov	r2, r8
 8001bda:	3301      	adds	r3, #1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	002b      	movs	r3, r5
 8001be0:	4690      	mov	r8, r2
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	4642      	mov	r2, r8
 8001be8:	2400      	movs	r4, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	2601      	movs	r6, #1
 8001bee:	2a0a      	cmp	r2, #10
 8001bf0:	dc00      	bgt.n	8001bf4 <__aeabi_dmul+0x2b0>
 8001bf2:	e6ea      	b.n	80019ca <__aeabi_dmul+0x86>
 8001bf4:	e72c      	b.n	8001a50 <__aeabi_dmul+0x10c>
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	2a38      	cmp	r2, #56	@ 0x38
 8001bfc:	dd00      	ble.n	8001c00 <__aeabi_dmul+0x2bc>
 8001bfe:	e6f4      	b.n	80019ea <__aeabi_dmul+0xa6>
 8001c00:	2a1f      	cmp	r2, #31
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_dmul+0x2c2>
 8001c04:	e12a      	b.n	8001e5c <__aeabi_dmul+0x518>
 8001c06:	211f      	movs	r1, #31
 8001c08:	4249      	negs	r1, r1
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	0021      	movs	r1, r4
 8001c0e:	40d9      	lsrs	r1, r3
 8001c10:	000b      	movs	r3, r1
 8001c12:	2a20      	cmp	r2, #32
 8001c14:	d005      	beq.n	8001c22 <__aeabi_dmul+0x2de>
 8001c16:	4a16      	ldr	r2, [pc, #88]	@ (8001c70 <__aeabi_dmul+0x32c>)
 8001c18:	9d01      	ldr	r5, [sp, #4]
 8001c1a:	4694      	mov	ip, r2
 8001c1c:	4465      	add	r5, ip
 8001c1e:	40ac      	lsls	r4, r5
 8001c20:	4320      	orrs	r0, r4
 8001c22:	1e42      	subs	r2, r0, #1
 8001c24:	4190      	sbcs	r0, r2
 8001c26:	4318      	orrs	r0, r3
 8001c28:	2307      	movs	r3, #7
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	4001      	ands	r1, r0
 8001c30:	4203      	tst	r3, r0
 8001c32:	d00c      	beq.n	8001c4e <__aeabi_dmul+0x30a>
 8001c34:	230f      	movs	r3, #15
 8001c36:	4003      	ands	r3, r0
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dmul+0x2fa>
 8001c3c:	e140      	b.n	8001ec0 <__aeabi_dmul+0x57c>
 8001c3e:	1d03      	adds	r3, r0, #4
 8001c40:	4283      	cmp	r3, r0
 8001c42:	41a4      	sbcs	r4, r4
 8001c44:	0018      	movs	r0, r3
 8001c46:	4264      	negs	r4, r4
 8001c48:	0761      	lsls	r1, r4, #29
 8001c4a:	0264      	lsls	r4, r4, #9
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	08c2      	lsrs	r2, r0, #3
 8001c50:	2300      	movs	r3, #0
 8001c52:	430a      	orrs	r2, r1
 8001c54:	e6cc      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	fffffc01 	.word	0xfffffc01
 8001c60:	000003ff 	.word	0x000003ff
 8001c64:	feffffff 	.word	0xfeffffff
 8001c68:	000007fe 	.word	0x000007fe
 8001c6c:	fffffc0d 	.word	0xfffffc0d
 8001c70:	0000043e 	.word	0x0000043e
 8001c74:	4649      	mov	r1, r9
 8001c76:	464a      	mov	r2, r9
 8001c78:	0409      	lsls	r1, r1, #16
 8001c7a:	0c09      	lsrs	r1, r1, #16
 8001c7c:	000d      	movs	r5, r1
 8001c7e:	0c16      	lsrs	r6, r2, #16
 8001c80:	0c02      	lsrs	r2, r0, #16
 8001c82:	0400      	lsls	r0, r0, #16
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4345      	muls	r5, r0
 8001c88:	46ac      	mov	ip, r5
 8001c8a:	0005      	movs	r5, r0
 8001c8c:	4375      	muls	r5, r6
 8001c8e:	46a8      	mov	r8, r5
 8001c90:	0015      	movs	r5, r2
 8001c92:	000f      	movs	r7, r1
 8001c94:	4375      	muls	r5, r6
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	9502      	str	r5, [sp, #8]
 8001c9a:	002a      	movs	r2, r5
 8001c9c:	9d00      	ldr	r5, [sp, #0]
 8001c9e:	436f      	muls	r7, r5
 8001ca0:	4665      	mov	r5, ip
 8001ca2:	0c2d      	lsrs	r5, r5, #16
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	4447      	add	r7, r8
 8001ca8:	444f      	add	r7, r9
 8001caa:	45b8      	cmp	r8, r7
 8001cac:	d905      	bls.n	8001cba <__aeabi_dmul+0x376>
 8001cae:	0015      	movs	r5, r2
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	0252      	lsls	r2, r2, #9
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	4445      	add	r5, r8
 8001cb8:	9502      	str	r5, [sp, #8]
 8001cba:	0c3d      	lsrs	r5, r7, #16
 8001cbc:	9503      	str	r5, [sp, #12]
 8001cbe:	4665      	mov	r5, ip
 8001cc0:	042d      	lsls	r5, r5, #16
 8001cc2:	043f      	lsls	r7, r7, #16
 8001cc4:	0c2d      	lsrs	r5, r5, #16
 8001cc6:	46ac      	mov	ip, r5
 8001cc8:	003d      	movs	r5, r7
 8001cca:	4465      	add	r5, ip
 8001ccc:	9504      	str	r5, [sp, #16]
 8001cce:	0c25      	lsrs	r5, r4, #16
 8001cd0:	0424      	lsls	r4, r4, #16
 8001cd2:	0c24      	lsrs	r4, r4, #16
 8001cd4:	46ac      	mov	ip, r5
 8001cd6:	0025      	movs	r5, r4
 8001cd8:	4375      	muls	r5, r6
 8001cda:	46a8      	mov	r8, r5
 8001cdc:	4665      	mov	r5, ip
 8001cde:	000f      	movs	r7, r1
 8001ce0:	4369      	muls	r1, r5
 8001ce2:	4441      	add	r1, r8
 8001ce4:	4689      	mov	r9, r1
 8001ce6:	4367      	muls	r7, r4
 8001ce8:	0c39      	lsrs	r1, r7, #16
 8001cea:	4449      	add	r1, r9
 8001cec:	436e      	muls	r6, r5
 8001cee:	4588      	cmp	r8, r1
 8001cf0:	d903      	bls.n	8001cfa <__aeabi_dmul+0x3b6>
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	0252      	lsls	r2, r2, #9
 8001cf6:	4690      	mov	r8, r2
 8001cf8:	4446      	add	r6, r8
 8001cfa:	0c0d      	lsrs	r5, r1, #16
 8001cfc:	46a8      	mov	r8, r5
 8001cfe:	0035      	movs	r5, r6
 8001d00:	4445      	add	r5, r8
 8001d02:	9505      	str	r5, [sp, #20]
 8001d04:	9d03      	ldr	r5, [sp, #12]
 8001d06:	043f      	lsls	r7, r7, #16
 8001d08:	46a8      	mov	r8, r5
 8001d0a:	0c3f      	lsrs	r7, r7, #16
 8001d0c:	0409      	lsls	r1, r1, #16
 8001d0e:	19c9      	adds	r1, r1, r7
 8001d10:	4488      	add	r8, r1
 8001d12:	4645      	mov	r5, r8
 8001d14:	9503      	str	r5, [sp, #12]
 8001d16:	4655      	mov	r5, sl
 8001d18:	042e      	lsls	r6, r5, #16
 8001d1a:	0c36      	lsrs	r6, r6, #16
 8001d1c:	0c2f      	lsrs	r7, r5, #16
 8001d1e:	0035      	movs	r5, r6
 8001d20:	4345      	muls	r5, r0
 8001d22:	4378      	muls	r0, r7
 8001d24:	4681      	mov	r9, r0
 8001d26:	0038      	movs	r0, r7
 8001d28:	46a8      	mov	r8, r5
 8001d2a:	0c2d      	lsrs	r5, r5, #16
 8001d2c:	46aa      	mov	sl, r5
 8001d2e:	9a00      	ldr	r2, [sp, #0]
 8001d30:	4350      	muls	r0, r2
 8001d32:	4372      	muls	r2, r6
 8001d34:	444a      	add	r2, r9
 8001d36:	4452      	add	r2, sl
 8001d38:	4591      	cmp	r9, r2
 8001d3a:	d903      	bls.n	8001d44 <__aeabi_dmul+0x400>
 8001d3c:	2580      	movs	r5, #128	@ 0x80
 8001d3e:	026d      	lsls	r5, r5, #9
 8001d40:	46a9      	mov	r9, r5
 8001d42:	4448      	add	r0, r9
 8001d44:	0c15      	lsrs	r5, r2, #16
 8001d46:	46a9      	mov	r9, r5
 8001d48:	4645      	mov	r5, r8
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	0c2d      	lsrs	r5, r5, #16
 8001d4e:	46a8      	mov	r8, r5
 8001d50:	4665      	mov	r5, ip
 8001d52:	437d      	muls	r5, r7
 8001d54:	0412      	lsls	r2, r2, #16
 8001d56:	4448      	add	r0, r9
 8001d58:	4490      	add	r8, r2
 8001d5a:	46a9      	mov	r9, r5
 8001d5c:	0032      	movs	r2, r6
 8001d5e:	4665      	mov	r5, ip
 8001d60:	4362      	muls	r2, r4
 8001d62:	436e      	muls	r6, r5
 8001d64:	437c      	muls	r4, r7
 8001d66:	0c17      	lsrs	r7, r2, #16
 8001d68:	1936      	adds	r6, r6, r4
 8001d6a:	19bf      	adds	r7, r7, r6
 8001d6c:	42bc      	cmp	r4, r7
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_dmul+0x434>
 8001d70:	2480      	movs	r4, #128	@ 0x80
 8001d72:	0264      	lsls	r4, r4, #9
 8001d74:	46a4      	mov	ip, r4
 8001d76:	44e1      	add	r9, ip
 8001d78:	9c02      	ldr	r4, [sp, #8]
 8001d7a:	9e03      	ldr	r6, [sp, #12]
 8001d7c:	46a4      	mov	ip, r4
 8001d7e:	9d05      	ldr	r5, [sp, #20]
 8001d80:	4466      	add	r6, ip
 8001d82:	428e      	cmp	r6, r1
 8001d84:	4189      	sbcs	r1, r1
 8001d86:	46ac      	mov	ip, r5
 8001d88:	0412      	lsls	r2, r2, #16
 8001d8a:	043c      	lsls	r4, r7, #16
 8001d8c:	0c12      	lsrs	r2, r2, #16
 8001d8e:	18a2      	adds	r2, r4, r2
 8001d90:	4462      	add	r2, ip
 8001d92:	4249      	negs	r1, r1
 8001d94:	1854      	adds	r4, r2, r1
 8001d96:	4446      	add	r6, r8
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	4546      	cmp	r6, r8
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	4682      	mov	sl, r0
 8001da0:	4264      	negs	r4, r4
 8001da2:	46a0      	mov	r8, r4
 8001da4:	42aa      	cmp	r2, r5
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	458c      	cmp	ip, r1
 8001daa:	4189      	sbcs	r1, r1
 8001dac:	44e2      	add	sl, ip
 8001dae:	44d0      	add	r8, sl
 8001db0:	4249      	negs	r1, r1
 8001db2:	4252      	negs	r2, r2
 8001db4:	430a      	orrs	r2, r1
 8001db6:	45a0      	cmp	r8, r4
 8001db8:	41a4      	sbcs	r4, r4
 8001dba:	4582      	cmp	sl, r0
 8001dbc:	4189      	sbcs	r1, r1
 8001dbe:	4264      	negs	r4, r4
 8001dc0:	4249      	negs	r1, r1
 8001dc2:	430c      	orrs	r4, r1
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	0c3f      	lsrs	r7, r7, #16
 8001dc8:	19d2      	adds	r2, r2, r7
 8001dca:	1912      	adds	r2, r2, r4
 8001dcc:	0dcc      	lsrs	r4, r1, #23
 8001dce:	9904      	ldr	r1, [sp, #16]
 8001dd0:	0270      	lsls	r0, r6, #9
 8001dd2:	4308      	orrs	r0, r1
 8001dd4:	1e41      	subs	r1, r0, #1
 8001dd6:	4188      	sbcs	r0, r1
 8001dd8:	4641      	mov	r1, r8
 8001dda:	444a      	add	r2, r9
 8001ddc:	0df6      	lsrs	r6, r6, #23
 8001dde:	0252      	lsls	r2, r2, #9
 8001de0:	4330      	orrs	r0, r6
 8001de2:	0249      	lsls	r1, r1, #9
 8001de4:	4314      	orrs	r4, r2
 8001de6:	4308      	orrs	r0, r1
 8001de8:	01d2      	lsls	r2, r2, #7
 8001dea:	d535      	bpl.n	8001e58 <__aeabi_dmul+0x514>
 8001dec:	2201      	movs	r2, #1
 8001dee:	0843      	lsrs	r3, r0, #1
 8001df0:	4002      	ands	r2, r0
 8001df2:	4313      	orrs	r3, r2
 8001df4:	07e0      	lsls	r0, r4, #31
 8001df6:	4318      	orrs	r0, r3
 8001df8:	0864      	lsrs	r4, r4, #1
 8001dfa:	e634      	b.n	8001a66 <__aeabi_dmul+0x122>
 8001dfc:	9b00      	ldr	r3, [sp, #0]
 8001dfe:	46a2      	mov	sl, r4
 8001e00:	469b      	mov	fp, r3
 8001e02:	4681      	mov	r9, r0
 8001e04:	2480      	movs	r4, #128	@ 0x80
 8001e06:	4653      	mov	r3, sl
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	431c      	orrs	r4, r3
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	464a      	mov	r2, r9
 8001e10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001e12:	0b24      	lsrs	r4, r4, #12
 8001e14:	e5ec      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001e16:	f000 f957 	bl	80020c8 <__clzsi2>
 8001e1a:	2315      	movs	r3, #21
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	4484      	add	ip, r0
 8001e20:	0002      	movs	r2, r0
 8001e22:	4663      	mov	r3, ip
 8001e24:	3220      	adds	r2, #32
 8001e26:	2b1c      	cmp	r3, #28
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_dmul+0x4e8>
 8001e2a:	e684      	b.n	8001b36 <__aeabi_dmul+0x1f2>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4699      	mov	r9, r3
 8001e30:	0023      	movs	r3, r4
 8001e32:	3808      	subs	r0, #8
 8001e34:	4083      	lsls	r3, r0
 8001e36:	469a      	mov	sl, r3
 8001e38:	e68e      	b.n	8001b58 <__aeabi_dmul+0x214>
 8001e3a:	f000 f945 	bl	80020c8 <__clzsi2>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	0003      	movs	r3, r0
 8001e42:	3215      	adds	r2, #21
 8001e44:	3320      	adds	r3, #32
 8001e46:	2a1c      	cmp	r2, #28
 8001e48:	dc00      	bgt.n	8001e4c <__aeabi_dmul+0x508>
 8001e4a:	e64e      	b.n	8001aea <__aeabi_dmul+0x1a6>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	0034      	movs	r4, r6
 8001e50:	3a08      	subs	r2, #8
 8001e52:	2000      	movs	r0, #0
 8001e54:	4094      	lsls	r4, r2
 8001e56:	e652      	b.n	8001afe <__aeabi_dmul+0x1ba>
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	e604      	b.n	8001a66 <__aeabi_dmul+0x122>
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <__aeabi_dmul+0x58c>)
 8001e5e:	0021      	movs	r1, r4
 8001e60:	469c      	mov	ip, r3
 8001e62:	0003      	movs	r3, r0
 8001e64:	9d01      	ldr	r5, [sp, #4]
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	4465      	add	r5, ip
 8001e6a:	40a9      	lsls	r1, r5
 8001e6c:	4319      	orrs	r1, r3
 8001e6e:	0003      	movs	r3, r0
 8001e70:	40ab      	lsls	r3, r5
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	4183      	sbcs	r3, r0
 8001e76:	4319      	orrs	r1, r3
 8001e78:	0008      	movs	r0, r1
 8001e7a:	40d4      	lsrs	r4, r2
 8001e7c:	074b      	lsls	r3, r1, #29
 8001e7e:	d009      	beq.n	8001e94 <__aeabi_dmul+0x550>
 8001e80:	230f      	movs	r3, #15
 8001e82:	400b      	ands	r3, r1
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d005      	beq.n	8001e94 <__aeabi_dmul+0x550>
 8001e88:	1d0b      	adds	r3, r1, #4
 8001e8a:	428b      	cmp	r3, r1
 8001e8c:	4180      	sbcs	r0, r0
 8001e8e:	4240      	negs	r0, r0
 8001e90:	1824      	adds	r4, r4, r0
 8001e92:	0018      	movs	r0, r3
 8001e94:	0223      	lsls	r3, r4, #8
 8001e96:	d400      	bmi.n	8001e9a <__aeabi_dmul+0x556>
 8001e98:	e6d6      	b.n	8001c48 <__aeabi_dmul+0x304>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	e5a6      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ea2:	290f      	cmp	r1, #15
 8001ea4:	d1aa      	bne.n	8001dfc <__aeabi_dmul+0x4b8>
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	031b      	lsls	r3, r3, #12
 8001eac:	421a      	tst	r2, r3
 8001eae:	d0a9      	beq.n	8001e04 <__aeabi_dmul+0x4c0>
 8001eb0:	421c      	tst	r4, r3
 8001eb2:	d1a7      	bne.n	8001e04 <__aeabi_dmul+0x4c0>
 8001eb4:	431c      	orrs	r4, r3
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	0002      	movs	r2, r0
 8001eba:	469b      	mov	fp, r3
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001ebe:	e597      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	e6c1      	b.n	8001c48 <__aeabi_dmul+0x304>
 8001ec4:	2400      	movs	r4, #0
 8001ec6:	4b01      	ldr	r3, [pc, #4]	@ (8001ecc <__aeabi_dmul+0x588>)
 8001ec8:	0022      	movs	r2, r4
 8001eca:	e591      	b.n	80019f0 <__aeabi_dmul+0xac>
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	0000041e 	.word	0x0000041e

08001ed4 <__aeabi_i2d>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d016      	beq.n	8001f08 <__aeabi_i2d+0x34>
 8001eda:	17c3      	asrs	r3, r0, #31
 8001edc:	18c5      	adds	r5, r0, r3
 8001ede:	405d      	eors	r5, r3
 8001ee0:	0fc4      	lsrs	r4, r0, #31
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f000 f8f0 	bl	80020c8 <__clzsi2>
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <__aeabi_i2d+0x58>)
 8001eea:	1a1b      	subs	r3, r3, r0
 8001eec:	055b      	lsls	r3, r3, #21
 8001eee:	0d5b      	lsrs	r3, r3, #21
 8001ef0:	280a      	cmp	r0, #10
 8001ef2:	dc14      	bgt.n	8001f1e <__aeabi_i2d+0x4a>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	002e      	movs	r6, r5
 8001ef8:	3215      	adds	r2, #21
 8001efa:	4096      	lsls	r6, r2
 8001efc:	220b      	movs	r2, #11
 8001efe:	1a12      	subs	r2, r2, r0
 8001f00:	40d5      	lsrs	r5, r2
 8001f02:	032d      	lsls	r5, r5, #12
 8001f04:	0b2d      	lsrs	r5, r5, #12
 8001f06:	e003      	b.n	8001f10 <__aeabi_i2d+0x3c>
 8001f08:	2400      	movs	r4, #0
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	2600      	movs	r6, #0
 8001f10:	051b      	lsls	r3, r3, #20
 8001f12:	432b      	orrs	r3, r5
 8001f14:	07e4      	lsls	r4, r4, #31
 8001f16:	4323      	orrs	r3, r4
 8001f18:	0030      	movs	r0, r6
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
 8001f1e:	380b      	subs	r0, #11
 8001f20:	4085      	lsls	r5, r0
 8001f22:	032d      	lsls	r5, r5, #12
 8001f24:	2600      	movs	r6, #0
 8001f26:	0b2d      	lsrs	r5, r5, #12
 8001f28:	e7f2      	b.n	8001f10 <__aeabi_i2d+0x3c>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	0000041e 	.word	0x0000041e

08001f30 <__aeabi_f2d>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	0242      	lsls	r2, r0, #9
 8001f34:	0043      	lsls	r3, r0, #1
 8001f36:	0fc4      	lsrs	r4, r0, #31
 8001f38:	20fe      	movs	r0, #254	@ 0xfe
 8001f3a:	0e1b      	lsrs	r3, r3, #24
 8001f3c:	1c59      	adds	r1, r3, #1
 8001f3e:	0a55      	lsrs	r5, r2, #9
 8001f40:	4208      	tst	r0, r1
 8001f42:	d00c      	beq.n	8001f5e <__aeabi_f2d+0x2e>
 8001f44:	21e0      	movs	r1, #224	@ 0xe0
 8001f46:	0089      	lsls	r1, r1, #2
 8001f48:	468c      	mov	ip, r1
 8001f4a:	076d      	lsls	r5, r5, #29
 8001f4c:	0b12      	lsrs	r2, r2, #12
 8001f4e:	4463      	add	r3, ip
 8001f50:	051b      	lsls	r3, r3, #20
 8001f52:	4313      	orrs	r3, r2
 8001f54:	07e4      	lsls	r4, r4, #31
 8001f56:	4323      	orrs	r3, r4
 8001f58:	0028      	movs	r0, r5
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d114      	bne.n	8001f8c <__aeabi_f2d+0x5c>
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	d01b      	beq.n	8001f9e <__aeabi_f2d+0x6e>
 8001f66:	0028      	movs	r0, r5
 8001f68:	f000 f8ae 	bl	80020c8 <__clzsi2>
 8001f6c:	280a      	cmp	r0, #10
 8001f6e:	dc1c      	bgt.n	8001faa <__aeabi_f2d+0x7a>
 8001f70:	230b      	movs	r3, #11
 8001f72:	002a      	movs	r2, r5
 8001f74:	1a1b      	subs	r3, r3, r0
 8001f76:	40da      	lsrs	r2, r3
 8001f78:	0003      	movs	r3, r0
 8001f7a:	3315      	adds	r3, #21
 8001f7c:	409d      	lsls	r5, r3
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <__aeabi_f2d+0x88>)
 8001f80:	0312      	lsls	r2, r2, #12
 8001f82:	1a1b      	subs	r3, r3, r0
 8001f84:	055b      	lsls	r3, r3, #21
 8001f86:	0b12      	lsrs	r2, r2, #12
 8001f88:	0d5b      	lsrs	r3, r3, #21
 8001f8a:	e7e1      	b.n	8001f50 <__aeabi_f2d+0x20>
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	d009      	beq.n	8001fa4 <__aeabi_f2d+0x74>
 8001f90:	0b13      	lsrs	r3, r2, #12
 8001f92:	2280      	movs	r2, #128	@ 0x80
 8001f94:	0312      	lsls	r2, r2, #12
 8001f96:	431a      	orrs	r2, r3
 8001f98:	076d      	lsls	r5, r5, #29
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <__aeabi_f2d+0x8c>)
 8001f9c:	e7d8      	b.n	8001f50 <__aeabi_f2d+0x20>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	e7d5      	b.n	8001f50 <__aeabi_f2d+0x20>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <__aeabi_f2d+0x8c>)
 8001fa8:	e7d2      	b.n	8001f50 <__aeabi_f2d+0x20>
 8001faa:	0003      	movs	r3, r0
 8001fac:	002a      	movs	r2, r5
 8001fae:	3b0b      	subs	r3, #11
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	e7e3      	b.n	8001f7e <__aeabi_f2d+0x4e>
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	00000389 	.word	0x00000389
 8001fbc:	000007ff 	.word	0x000007ff

08001fc0 <__aeabi_d2f>:
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	004b      	lsls	r3, r1, #1
 8001fc4:	030f      	lsls	r7, r1, #12
 8001fc6:	0d5b      	lsrs	r3, r3, #21
 8001fc8:	4c3b      	ldr	r4, [pc, #236]	@ (80020b8 <__aeabi_d2f+0xf8>)
 8001fca:	0f45      	lsrs	r5, r0, #29
 8001fcc:	b083      	sub	sp, #12
 8001fce:	0a7f      	lsrs	r7, r7, #9
 8001fd0:	1c5e      	adds	r6, r3, #1
 8001fd2:	432f      	orrs	r7, r5
 8001fd4:	9000      	str	r0, [sp, #0]
 8001fd6:	9101      	str	r1, [sp, #4]
 8001fd8:	0fca      	lsrs	r2, r1, #31
 8001fda:	00c5      	lsls	r5, r0, #3
 8001fdc:	4226      	tst	r6, r4
 8001fde:	d00b      	beq.n	8001ff8 <__aeabi_d2f+0x38>
 8001fe0:	4936      	ldr	r1, [pc, #216]	@ (80020bc <__aeabi_d2f+0xfc>)
 8001fe2:	185c      	adds	r4, r3, r1
 8001fe4:	2cfe      	cmp	r4, #254	@ 0xfe
 8001fe6:	dd13      	ble.n	8002010 <__aeabi_d2f+0x50>
 8001fe8:	20ff      	movs	r0, #255	@ 0xff
 8001fea:	2300      	movs	r3, #0
 8001fec:	05c0      	lsls	r0, r0, #23
 8001fee:	4318      	orrs	r0, r3
 8001ff0:	07d2      	lsls	r2, r2, #31
 8001ff2:	4310      	orrs	r0, r2
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <__aeabi_d2f+0x42>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	e7f4      	b.n	8001fec <__aeabi_d2f+0x2c>
 8002002:	433d      	orrs	r5, r7
 8002004:	d0f0      	beq.n	8001fe8 <__aeabi_d2f+0x28>
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	03db      	lsls	r3, r3, #15
 800200a:	20ff      	movs	r0, #255	@ 0xff
 800200c:	433b      	orrs	r3, r7
 800200e:	e7ed      	b.n	8001fec <__aeabi_d2f+0x2c>
 8002010:	2c00      	cmp	r4, #0
 8002012:	dd14      	ble.n	800203e <__aeabi_d2f+0x7e>
 8002014:	9b00      	ldr	r3, [sp, #0]
 8002016:	00ff      	lsls	r7, r7, #3
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	4183      	sbcs	r3, r0
 800201e:	0f69      	lsrs	r1, r5, #29
 8002020:	433b      	orrs	r3, r7
 8002022:	430b      	orrs	r3, r1
 8002024:	0759      	lsls	r1, r3, #29
 8002026:	d041      	beq.n	80020ac <__aeabi_d2f+0xec>
 8002028:	210f      	movs	r1, #15
 800202a:	4019      	ands	r1, r3
 800202c:	2904      	cmp	r1, #4
 800202e:	d028      	beq.n	8002082 <__aeabi_d2f+0xc2>
 8002030:	3304      	adds	r3, #4
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	d525      	bpl.n	8002082 <__aeabi_d2f+0xc2>
 8002036:	3401      	adds	r4, #1
 8002038:	2300      	movs	r3, #0
 800203a:	b2e0      	uxtb	r0, r4
 800203c:	e7d6      	b.n	8001fec <__aeabi_d2f+0x2c>
 800203e:	0021      	movs	r1, r4
 8002040:	3117      	adds	r1, #23
 8002042:	dbdb      	blt.n	8001ffc <__aeabi_d2f+0x3c>
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	201e      	movs	r0, #30
 8002048:	0409      	lsls	r1, r1, #16
 800204a:	4339      	orrs	r1, r7
 800204c:	1b00      	subs	r0, r0, r4
 800204e:	281f      	cmp	r0, #31
 8002050:	dd1b      	ble.n	800208a <__aeabi_d2f+0xca>
 8002052:	2602      	movs	r6, #2
 8002054:	4276      	negs	r6, r6
 8002056:	1b34      	subs	r4, r6, r4
 8002058:	000e      	movs	r6, r1
 800205a:	40e6      	lsrs	r6, r4
 800205c:	0034      	movs	r4, r6
 800205e:	2820      	cmp	r0, #32
 8002060:	d004      	beq.n	800206c <__aeabi_d2f+0xac>
 8002062:	4817      	ldr	r0, [pc, #92]	@ (80020c0 <__aeabi_d2f+0x100>)
 8002064:	4684      	mov	ip, r0
 8002066:	4463      	add	r3, ip
 8002068:	4099      	lsls	r1, r3
 800206a:	430d      	orrs	r5, r1
 800206c:	002b      	movs	r3, r5
 800206e:	1e59      	subs	r1, r3, #1
 8002070:	418b      	sbcs	r3, r1
 8002072:	4323      	orrs	r3, r4
 8002074:	0759      	lsls	r1, r3, #29
 8002076:	d015      	beq.n	80020a4 <__aeabi_d2f+0xe4>
 8002078:	210f      	movs	r1, #15
 800207a:	2400      	movs	r4, #0
 800207c:	4019      	ands	r1, r3
 800207e:	2904      	cmp	r1, #4
 8002080:	d117      	bne.n	80020b2 <__aeabi_d2f+0xf2>
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	0a5b      	lsrs	r3, r3, #9
 8002086:	b2e0      	uxtb	r0, r4
 8002088:	e7b0      	b.n	8001fec <__aeabi_d2f+0x2c>
 800208a:	4c0e      	ldr	r4, [pc, #56]	@ (80020c4 <__aeabi_d2f+0x104>)
 800208c:	191c      	adds	r4, r3, r4
 800208e:	002b      	movs	r3, r5
 8002090:	40a5      	lsls	r5, r4
 8002092:	40c3      	lsrs	r3, r0
 8002094:	40a1      	lsls	r1, r4
 8002096:	1e68      	subs	r0, r5, #1
 8002098:	4185      	sbcs	r5, r0
 800209a:	4329      	orrs	r1, r5
 800209c:	430b      	orrs	r3, r1
 800209e:	2400      	movs	r4, #0
 80020a0:	0759      	lsls	r1, r3, #29
 80020a2:	d1c1      	bne.n	8002028 <__aeabi_d2f+0x68>
 80020a4:	019b      	lsls	r3, r3, #6
 80020a6:	2000      	movs	r0, #0
 80020a8:	0a5b      	lsrs	r3, r3, #9
 80020aa:	e79f      	b.n	8001fec <__aeabi_d2f+0x2c>
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	b2e0      	uxtb	r0, r4
 80020b0:	e79c      	b.n	8001fec <__aeabi_d2f+0x2c>
 80020b2:	3304      	adds	r3, #4
 80020b4:	e7e5      	b.n	8002082 <__aeabi_d2f+0xc2>
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	000007fe 	.word	0x000007fe
 80020bc:	fffffc80 	.word	0xfffffc80
 80020c0:	fffffca2 	.word	0xfffffca2
 80020c4:	fffffc82 	.word	0xfffffc82

080020c8 <__clzsi2>:
 80020c8:	211c      	movs	r1, #28
 80020ca:	2301      	movs	r3, #1
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	4298      	cmp	r0, r3
 80020d0:	d301      	bcc.n	80020d6 <__clzsi2+0xe>
 80020d2:	0c00      	lsrs	r0, r0, #16
 80020d4:	3910      	subs	r1, #16
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	4298      	cmp	r0, r3
 80020da:	d301      	bcc.n	80020e0 <__clzsi2+0x18>
 80020dc:	0a00      	lsrs	r0, r0, #8
 80020de:	3908      	subs	r1, #8
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d301      	bcc.n	80020ea <__clzsi2+0x22>
 80020e6:	0900      	lsrs	r0, r0, #4
 80020e8:	3904      	subs	r1, #4
 80020ea:	a202      	add	r2, pc, #8	@ (adr r2, 80020f4 <__clzsi2+0x2c>)
 80020ec:	5c10      	ldrb	r0, [r2, r0]
 80020ee:	1840      	adds	r0, r0, r1
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	02020304 	.word	0x02020304
 80020f8:	01010101 	.word	0x01010101
	...

08002104 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	0018      	movs	r0, r3
 800210e:	230c      	movs	r3, #12
 8002110:	001a      	movs	r2, r3
 8002112:	2100      	movs	r1, #0
 8002114:	f003 ffd2 	bl	80060bc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002118:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800211a:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <MX_ADC_Init+0xb4>)
 800211c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8002124:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002126:	2208      	movs	r2, #8
 8002128:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212a:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002130:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002132:	2201      	movs	r2, #1
 8002134:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002136:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002138:	2204      	movs	r2, #4
 800213a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800213e:	2200      	movs	r2, #0
 8002140:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002144:	2200      	movs	r2, #0
 8002146:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800214a:	2200      	movs	r2, #0
 800214c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800214e:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002150:	2200      	movs	r2, #0
 8002152:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002156:	22c2      	movs	r2, #194	@ 0xc2
 8002158:	32ff      	adds	r2, #255	@ 0xff
 800215a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800215c:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002164:	2224      	movs	r2, #36	@ 0x24
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800216c:	2201      	movs	r2, #1
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002170:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <MX_ADC_Init+0xb0>)
 8002172:	0018      	movs	r0, r3
 8002174:	f001 fc2c 	bl	80039d0 <HAL_ADC_Init>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d001      	beq.n	8002180 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800217c:	f001 fb2d 	bl	80037da <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2280      	movs	r2, #128	@ 0x80
 800218a:	0152      	lsls	r2, r2, #5
 800218c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	0552      	lsls	r2, r2, #21
 8002194:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_ADC_Init+0xb0>)
 800219a:	0011      	movs	r1, r2
 800219c:	0018      	movs	r0, r3
 800219e:	f001 fdf7 	bl	8003d90 <HAL_ADC_ConfigChannel>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d001      	beq.n	80021aa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80021a6:	f001 fb18 	bl	80037da <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b004      	add	sp, #16
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	2000002c 	.word	0x2000002c
 80021b8:	40012400 	.word	0x40012400

080021bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08b      	sub	sp, #44	@ 0x2c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	2414      	movs	r4, #20
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	2314      	movs	r3, #20
 80021cc:	001a      	movs	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f003 ff74 	bl	80060bc <memset>
  if(adcHandle->Instance==ADC1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_ADC_MspInit+0x84>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12b      	bne.n	8002236 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 80021e4:	2180      	movs	r1, #128	@ 0x80
 80021e6:	0089      	lsls	r1, r1, #2
 80021e8:	430a      	orrs	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
 80021ec:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 8002200:	2180      	movs	r1, #128	@ 0x80
 8002202:	0289      	lsls	r1, r1, #10
 8002204:	430a      	orrs	r2, r1
 8002206:	615a      	str	r2, [r3, #20]
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_ADC_MspInit+0x88>)
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2203      	movs	r2, #3
 8002220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	193a      	adds	r2, r7, r4
 800222a:	2390      	movs	r3, #144	@ 0x90
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f002 f899 	bl	8004368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b00b      	add	sp, #44	@ 0x2c
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	40012400 	.word	0x40012400
 8002244:	40021000 	.word	0x40021000

08002248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	@ 0x24
 800224c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	240c      	movs	r4, #12
 8002250:	193b      	adds	r3, r7, r4
 8002252:	0018      	movs	r0, r3
 8002254:	2314      	movs	r3, #20
 8002256:	001a      	movs	r2, r3
 8002258:	2100      	movs	r1, #0
 800225a:	f003 ff2f 	bl	80060bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <MX_GPIO_Init+0x11c>)
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <MX_GPIO_Init+0x11c>)
 8002264:	2180      	movs	r1, #128	@ 0x80
 8002266:	0289      	lsls	r1, r1, #10
 8002268:	430a      	orrs	r2, r1
 800226a:	615a      	str	r2, [r3, #20]
 800226c:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <MX_GPIO_Init+0x11c>)
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <MX_GPIO_Init+0x11c>)
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <MX_GPIO_Init+0x11c>)
 8002280:	2180      	movs	r1, #128	@ 0x80
 8002282:	02c9      	lsls	r1, r1, #11
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <MX_GPIO_Init+0x11c>)
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	02db      	lsls	r3, r3, #11
 8002290:	4013      	ands	r3, r2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 8002296:	4934      	ldr	r1, [pc, #208]	@ (8002368 <MX_GPIO_Init+0x120>)
 8002298:	2390      	movs	r3, #144	@ 0x90
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	2200      	movs	r2, #0
 800229e:	0018      	movs	r0, r3
 80022a0:	f002 fabf 	bl	8004822 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <MX_GPIO_Init+0x124>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	214a      	movs	r1, #74	@ 0x4a
 80022aa:	0018      	movs	r0, r3
 80022ac:	f002 fab9 	bl	8004822 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8;
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	2212      	movs	r2, #18
 80022b4:	32ff      	adds	r2, #255	@ 0xff
 80022b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	2201      	movs	r2, #1
 80022c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	193a      	adds	r2, r7, r4
 80022c6:	2390      	movs	r3, #144	@ 0x90
 80022c8:	05db      	lsls	r3, r3, #23
 80022ca:	0011      	movs	r1, r2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f002 f84b 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <MX_GPIO_Init+0x120>)
 80022d6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	2201      	movs	r2, #1
 80022dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	193a      	adds	r2, r7, r4
 80022ec:	2390      	movs	r3, #144	@ 0x90
 80022ee:	05db      	lsls	r3, r3, #23
 80022f0:	0011      	movs	r1, r2
 80022f2:	0018      	movs	r0, r3
 80022f4:	f002 f838 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2211      	movs	r2, #17
 80022fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002304:	193b      	adds	r3, r7, r4
 8002306:	2201      	movs	r2, #1
 8002308:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	193b      	adds	r3, r7, r4
 800230c:	4a17      	ldr	r2, [pc, #92]	@ (800236c <MX_GPIO_Init+0x124>)
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f002 f829 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
 8002316:	193b      	adds	r3, r7, r4
 8002318:	224a      	movs	r2, #74	@ 0x4a
 800231a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	193b      	adds	r3, r7, r4
 800231e:	2201      	movs	r2, #1
 8002320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	193b      	adds	r3, r7, r4
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	193b      	adds	r3, r7, r4
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	193b      	adds	r3, r7, r4
 8002330:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <MX_GPIO_Init+0x124>)
 8002332:	0019      	movs	r1, r3
 8002334:	0010      	movs	r0, r2
 8002336:	f002 f817 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800233a:	0021      	movs	r1, r4
 800233c:	187b      	adds	r3, r7, r1
 800233e:	2220      	movs	r2, #32
 8002340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002342:	187b      	adds	r3, r7, r1
 8002344:	2288      	movs	r2, #136	@ 0x88
 8002346:	0352      	lsls	r2, r2, #13
 8002348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	187b      	adds	r3, r7, r1
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	187b      	adds	r3, r7, r1
 8002352:	4a06      	ldr	r2, [pc, #24]	@ (800236c <MX_GPIO_Init+0x124>)
 8002354:	0019      	movs	r1, r3
 8002356:	0010      	movs	r0, r2
 8002358:	f002 f806 	bl	8004368 <HAL_GPIO_Init>

}
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b009      	add	sp, #36	@ 0x24
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	000098cc 	.word	0x000098cc
 800236c:	48000400 	.word	0x48000400

08002370 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <MX_I2C1_Init+0x74>)
 8002376:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <MX_I2C1_Init+0x78>)
 8002378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <MX_I2C1_Init+0x74>)
 800237c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <MX_I2C1_Init+0x7c>)
 800237e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <MX_I2C1_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002386:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <MX_I2C1_Init+0x74>)
 8002388:	2201      	movs	r2, #1
 800238a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800238c:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <MX_I2C1_Init+0x74>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002392:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <MX_I2C1_Init+0x74>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <MX_I2C1_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <MX_I2C1_Init+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <MX_I2C1_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <MX_I2C1_Init+0x74>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fa71 	bl	8004894 <HAL_I2C_Init>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023b6:	f001 fa10 	bl	80037da <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <MX_I2C1_Init+0x74>)
 80023bc:	2100      	movs	r1, #0
 80023be:	0018      	movs	r0, r3
 80023c0:	f003 f86c 	bl	800549c <HAL_I2CEx_ConfigAnalogFilter>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d001      	beq.n	80023cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023c8:	f001 fa07 	bl	80037da <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <MX_I2C1_Init+0x74>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f003 f8af 	bl	8005534 <HAL_I2CEx_ConfigDigitalFilter>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d001      	beq.n	80023de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023da:	f001 f9fe 	bl	80037da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000006c 	.word	0x2000006c
 80023e8:	40005400 	.word	0x40005400
 80023ec:	2000090e 	.word	0x2000090e

080023f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b08b      	sub	sp, #44	@ 0x2c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	2414      	movs	r4, #20
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	0018      	movs	r0, r3
 80023fe:	2314      	movs	r3, #20
 8002400:	001a      	movs	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	f003 fe5a 	bl	80060bc <memset>
  if(i2cHandle->Instance==I2C1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1d      	ldr	r2, [pc, #116]	@ (8002484 <HAL_I2C_MspInit+0x94>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d133      	bne.n	800247a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	0289      	lsls	r1, r1, #10
 800241c:	430a      	orrs	r2, r1
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	22c0      	movs	r2, #192	@ 0xc0
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002436:	0021      	movs	r1, r4
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2212      	movs	r2, #18
 800243c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2203      	movs	r2, #3
 8002448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2204      	movs	r2, #4
 800244e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	187a      	adds	r2, r7, r1
 8002452:	2390      	movs	r3, #144	@ 0x90
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f001 ff85 	bl	8004368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	0389      	lsls	r1, r1, #14
 8002468:	430a      	orrs	r2, r1
 800246a:	61da      	str	r2, [r3, #28]
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_I2C_MspInit+0x98>)
 800246e:	69da      	ldr	r2, [r3, #28]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	039b      	lsls	r3, r3, #14
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b00b      	add	sp, #44	@ 0x2c
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40005400 	.word	0x40005400
 8002488:	40021000 	.word	0x40021000

0800248c <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800248c:	b5b0      	push	{r4, r5, r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	0008      	movs	r0, r1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	0019      	movs	r1, r3
 800249a:	230b      	movs	r3, #11
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	1c02      	adds	r2, r0, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	2308      	movs	r3, #8
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	1c0a      	adds	r2, r1, #0
 80024a8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <lis3dh_read_reg+0x2a>
  {
    return -1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	425b      	negs	r3, r3
 80024b4:	e00f      	b.n	80024d6 <lis3dh_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	685c      	ldr	r4, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68d8      	ldr	r0, [r3, #12]
 80024be:	2308      	movs	r3, #8
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	881d      	ldrh	r5, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	230b      	movs	r3, #11
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	7819      	ldrb	r1, [r3, #0]
 80024cc:	002b      	movs	r3, r5
 80024ce:	47a0      	blx	r4
 80024d0:	0003      	movs	r3, r0
 80024d2:	617b      	str	r3, [r7, #20]

  return ret;
 80024d4:	697b      	ldr	r3, [r7, #20]
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b006      	add	sp, #24
 80024dc:	bdb0      	pop	{r4, r5, r7, pc}

080024de <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80024de:	b5b0      	push	{r4, r5, r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	0008      	movs	r0, r1
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	0019      	movs	r1, r3
 80024ec:	230b      	movs	r3, #11
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	1c02      	adds	r2, r0, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	2308      	movs	r3, #8
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	1c0a      	adds	r2, r1, #0
 80024fa:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <lis3dh_write_reg+0x2a>
  {
    return -1;
 8002502:	2301      	movs	r3, #1
 8002504:	425b      	negs	r3, r3
 8002506:	e00f      	b.n	8002528 <lis3dh_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681c      	ldr	r4, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68d8      	ldr	r0, [r3, #12]
 8002510:	2308      	movs	r3, #8
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	881d      	ldrh	r5, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	230b      	movs	r3, #11
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	7819      	ldrb	r1, [r3, #0]
 800251e:	002b      	movs	r3, r5
 8002520:	47a0      	blx	r4
 8002522:	0003      	movs	r3, r0
 8002524:	617b      	str	r3, [r7, #20]

  return ret;
 8002526:	697b      	ldr	r3, [r7, #20]
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b006      	add	sp, #24
 800252e:	bdb0      	pop	{r4, r5, r7, pc}

08002530 <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	0002      	movs	r2, r0
 8002538:	1dbb      	adds	r3, r7, #6
 800253a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	2200      	movs	r2, #0
 8002540:	5e9b      	ldrsh	r3, [r3, r2]
 8002542:	0018      	movs	r0, r3
 8002544:	f7fe fd6e 	bl	8001024 <__aeabi_i2f>
 8002548:	1c03      	adds	r3, r0, #0
 800254a:	2183      	movs	r1, #131	@ 0x83
 800254c:	05c9      	lsls	r1, r1, #23
 800254e:	1c18      	adds	r0, r3, #0
 8002550:	f7fe f880 	bl	8000654 <__aeabi_fdiv>
 8002554:	1c03      	adds	r3, r0, #0
}
 8002556:	1c18      	adds	r0, r3, #0
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <lis3dh_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis3dh_from_lsb_hr_to_celsius(int16_t lsb)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	0002      	movs	r2, r0
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	2200      	movs	r2, #0
 8002570:	5e9b      	ldrsh	r3, [r3, r2]
 8002572:	0018      	movs	r0, r3
 8002574:	f7fe fd56 	bl	8001024 <__aeabi_i2f>
 8002578:	1c03      	adds	r3, r0, #0
 800257a:	2185      	movs	r1, #133	@ 0x85
 800257c:	05c9      	lsls	r1, r1, #23
 800257e:	1c18      	adds	r0, r3, #0
 8002580:	f7fe f868 	bl	8000654 <__aeabi_fdiv>
 8002584:	1c03      	adds	r3, r0, #0
 8002586:	2181      	movs	r1, #129	@ 0x81
 8002588:	05c9      	lsls	r1, r1, #23
 800258a:	1c18      	adds	r0, r3, #0
 800258c:	f7fe f862 	bl	8000654 <__aeabi_fdiv>
 8002590:	1c03      	adds	r3, r0, #0
 8002592:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <lis3dh_from_lsb_hr_to_celsius+0x44>)
 8002594:	1c18      	adds	r0, r3, #0
 8002596:	f7fd fed3 	bl	8000340 <__aeabi_fadd>
 800259a:	1c03      	adds	r3, r0, #0
}
 800259c:	1c18      	adds	r0, r3, #0
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	41c80000 	.word	0x41c80000

080025a8 <lis3dh_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temp_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG_AUX,
 80025b2:	2408      	movs	r4, #8
 80025b4:	193a      	adds	r2, r7, r4
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	2301      	movs	r3, #1
 80025ba:	2107      	movs	r1, #7
 80025bc:	f7ff ff66 	bl	800248c <lis3dh_read_reg>
 80025c0:	0003      	movs	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux._3da;
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	075b      	lsls	r3, r3, #29
 80025ca:	0fdb      	lsrs	r3, r3, #31
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	001a      	movs	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	701a      	strb	r2, [r3, #0]

  return ret;
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b005      	add	sp, #20
 80025dc:	bd90      	pop	{r4, r7, pc}

080025de <lis3dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80025de:	b590      	push	{r4, r7, lr}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_ADC3_L, buff, 2);
 80025e8:	2408      	movs	r4, #8
 80025ea:	193a      	adds	r2, r7, r4
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	210c      	movs	r1, #12
 80025f2:	f7ff ff4b 	bl	800248c <lis3dh_read_reg>
 80025f6:	0003      	movs	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80025fa:	0021      	movs	r1, r4
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	b21a      	sxth	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	5e9b      	ldrsh	r3, [r3, r2]
 800260c:	b29b      	uxth	r3, r3
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	b29b      	uxth	r3, r3
 8002612:	187a      	adds	r2, r7, r1
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	189b      	adds	r3, r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b005      	add	sp, #20
 8002628:	bd90      	pop	{r4, r7, pc}

0800262a <lis3dh_aux_adc_set>:
  * @param  val      configure the auxiliary ADC
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_aux_adc_set(const stmdev_ctx_t *ctx, lis3dh_temp_en_t val)
{
 800262a:	b590      	push	{r4, r7, lr}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	000a      	movs	r2, r1
 8002634:	1cfb      	adds	r3, r7, #3
 8002636:	701a      	strb	r2, [r3, #0]
  lis3dh_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_TEMP_CFG_REG,
 8002638:	2308      	movs	r3, #8
 800263a:	18fa      	adds	r2, r7, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	2301      	movs	r3, #1
 8002640:	211f      	movs	r1, #31
 8002642:	f7ff ff23 	bl	800248c <lis3dh_read_reg>
 8002646:	0003      	movs	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <lis3dh_aux_adc_set+0x3c>
  {
    if (val != LIS3DH_AUX_DISABLE)
 8002650:	1cfb      	adds	r3, r7, #3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <lis3dh_aux_adc_set+0x3c>
    {
      /* Required in order to use auxiliary adc */
      ret = lis3dh_block_data_update_set(ctx, PROPERTY_ENABLE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2101      	movs	r1, #1
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f8fa 	bl	8002856 <lis3dh_block_data_update_set>
 8002662:	0003      	movs	r3, r0
 8002664:	60fb      	str	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d128      	bne.n	80026be <lis3dh_aux_adc_set+0x94>
  {
    temp_cfg_reg.temp_en = ((uint8_t) val & 0x02U) >> 1;
 800266c:	1cfb      	adds	r3, r7, #3
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	1c1a      	adds	r2, r3, #0
 8002674:	2301      	movs	r3, #1
 8002676:	4013      	ands	r3, r2
 8002678:	b2da      	uxtb	r2, r3
 800267a:	2408      	movs	r4, #8
 800267c:	193b      	adds	r3, r7, r4
 800267e:	2101      	movs	r1, #1
 8002680:	400a      	ands	r2, r1
 8002682:	0190      	lsls	r0, r2, #6
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	2140      	movs	r1, #64	@ 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	1c11      	adds	r1, r2, #0
 800268c:	1c02      	adds	r2, r0, #0
 800268e:	430a      	orrs	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
    temp_cfg_reg.adc_pd  = (uint8_t) val &  0x01U;
 8002692:	1cfb      	adds	r3, r7, #3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	193b      	adds	r3, r7, r4
 800269e:	01d0      	lsls	r0, r2, #7
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	217f      	movs	r1, #127	@ 0x7f
 80026a4:	400a      	ands	r2, r1
 80026a6:	1c11      	adds	r1, r2, #0
 80026a8:	1c02      	adds	r2, r0, #0
 80026aa:	430a      	orrs	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_TEMP_CFG_REG,
 80026ae:	193a      	adds	r2, r7, r4
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	2301      	movs	r3, #1
 80026b4:	211f      	movs	r1, #31
 80026b6:	f7ff ff12 	bl	80024de <lis3dh_write_reg>
 80026ba:	0003      	movs	r3, r0
 80026bc:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b005      	add	sp, #20
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	000a      	movs	r2, r1
 80026d2:	1cfb      	adds	r3, r7, #3
 80026d4:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 80026d6:	2310      	movs	r3, #16
 80026d8:	18fa      	adds	r2, r7, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	2301      	movs	r3, #1
 80026de:	2120      	movs	r1, #32
 80026e0:	f7ff fed4 	bl	800248c <lis3dh_read_reg>
 80026e4:	0003      	movs	r3, r0
 80026e6:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 80026ee:	230c      	movs	r3, #12
 80026f0:	18fa      	adds	r2, r7, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	2301      	movs	r3, #1
 80026f6:	2123      	movs	r1, #35	@ 0x23
 80026f8:	f7ff fec8 	bl	800248c <lis3dh_read_reg>
 80026fc:	0003      	movs	r3, r0
 80026fe:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d138      	bne.n	8002778 <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 8002706:	1cfb      	adds	r3, r7, #3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 800270e:	2310      	movs	r3, #16
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	2108      	movs	r1, #8
 8002716:	438a      	bics	r2, r1
 8002718:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 800271a:	230c      	movs	r3, #12
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	2108      	movs	r1, #8
 8002722:	430a      	orrs	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 8002726:	1cfb      	adds	r3, r7, #3
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10b      	bne.n	8002746 <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 800272e:	2310      	movs	r3, #16
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	2108      	movs	r1, #8
 8002736:	438a      	bics	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800273a:	230c      	movs	r3, #12
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	2108      	movs	r1, #8
 8002742:	438a      	bics	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 8002746:	1cfb      	adds	r3, r7, #3
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d10b      	bne.n	8002766 <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 800274e:	2310      	movs	r3, #16
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	2108      	movs	r1, #8
 8002756:	430a      	orrs	r2, r1
 8002758:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800275a:	230c      	movs	r3, #12
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	2108      	movs	r1, #8
 8002762:	438a      	bics	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002766:	2310      	movs	r3, #16
 8002768:	18fa      	adds	r2, r7, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	2301      	movs	r3, #1
 800276e:	2120      	movs	r1, #32
 8002770:	f7ff feb5 	bl	80024de <lis3dh_write_reg>
 8002774:	0003      	movs	r3, r0
 8002776:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800277e:	230c      	movs	r3, #12
 8002780:	18fa      	adds	r2, r7, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	2301      	movs	r3, #1
 8002786:	2123      	movs	r1, #35	@ 0x23
 8002788:	f7ff fea9 	bl	80024de <lis3dh_write_reg>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002790:	697b      	ldr	r3, [r7, #20]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}

0800279a <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(const stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 800279a:	b590      	push	{r4, r7, lr}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	000a      	movs	r2, r1
 80027a4:	1cfb      	adds	r3, r7, #3
 80027a6:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80027a8:	2408      	movs	r4, #8
 80027aa:	193a      	adds	r2, r7, r4
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2120      	movs	r1, #32
 80027b2:	f7ff fe6b 	bl	800248c <lis3dh_read_reg>
 80027b6:	0003      	movs	r3, r0
 80027b8:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d115      	bne.n	80027ec <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80027c0:	1cfb      	adds	r3, r7, #3
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	220f      	movs	r2, #15
 80027c6:	4013      	ands	r3, r2
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	0110      	lsls	r0, r2, #4
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	210f      	movs	r1, #15
 80027d2:	400a      	ands	r2, r1
 80027d4:	1c11      	adds	r1, r2, #0
 80027d6:	1c02      	adds	r2, r0, #0
 80027d8:	430a      	orrs	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	2301      	movs	r3, #1
 80027e2:	2120      	movs	r1, #32
 80027e4:	f7ff fe7b 	bl	80024de <lis3dh_write_reg>
 80027e8:	0003      	movs	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b005      	add	sp, #20
 80027f4:	bd90      	pop	{r4, r7, pc}

080027f6 <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(const stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 80027f6:	b590      	push	{r4, r7, lr}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	000a      	movs	r2, r1
 8002800:	1cfb      	adds	r3, r7, #3
 8002802:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002804:	2408      	movs	r4, #8
 8002806:	193a      	adds	r2, r7, r4
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	2301      	movs	r3, #1
 800280c:	2123      	movs	r1, #35	@ 0x23
 800280e:	f7ff fe3d 	bl	800248c <lis3dh_read_reg>
 8002812:	0003      	movs	r3, r0
 8002814:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d117      	bne.n	800284c <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800281c:	1cfb      	adds	r3, r7, #3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2203      	movs	r2, #3
 8002822:	4013      	ands	r3, r2
 8002824:	b2da      	uxtb	r2, r3
 8002826:	193b      	adds	r3, r7, r4
 8002828:	2103      	movs	r1, #3
 800282a:	400a      	ands	r2, r1
 800282c:	0110      	lsls	r0, r2, #4
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	2130      	movs	r1, #48	@ 0x30
 8002832:	438a      	bics	r2, r1
 8002834:	1c11      	adds	r1, r2, #0
 8002836:	1c02      	adds	r2, r0, #0
 8002838:	430a      	orrs	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800283c:	193a      	adds	r2, r7, r4
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	2301      	movs	r3, #1
 8002842:	2123      	movs	r1, #35	@ 0x23
 8002844:	f7ff fe4b 	bl	80024de <lis3dh_write_reg>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b005      	add	sp, #20
 8002854:	bd90      	pop	{r4, r7, pc}

08002856 <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002856:	b590      	push	{r4, r7, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	000a      	movs	r2, r1
 8002860:	1cfb      	adds	r3, r7, #3
 8002862:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002864:	2408      	movs	r4, #8
 8002866:	193a      	adds	r2, r7, r4
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	2301      	movs	r3, #1
 800286c:	2123      	movs	r1, #35	@ 0x23
 800286e:	f7ff fe0d 	bl	800248c <lis3dh_read_reg>
 8002872:	0003      	movs	r3, r0
 8002874:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d115      	bne.n	80028a8 <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 800287c:	1cfb      	adds	r3, r7, #3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	b2da      	uxtb	r2, r3
 8002886:	193b      	adds	r3, r7, r4
 8002888:	01d0      	lsls	r0, r2, #7
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	217f      	movs	r1, #127	@ 0x7f
 800288e:	400a      	ands	r2, r1
 8002890:	1c11      	adds	r1, r2, #0
 8002892:	1c02      	adds	r2, r0, #0
 8002894:	430a      	orrs	r2, r1
 8002896:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002898:	193a      	adds	r2, r7, r4
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	2301      	movs	r3, #1
 800289e:	2123      	movs	r1, #35	@ 0x23
 80028a0:	f7ff fe1d 	bl	80024de <lis3dh_write_reg>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b005      	add	sp, #20
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <lis3dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80028b2:	b590      	push	{r4, r7, lr}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  lis3dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *)&status_reg, 1);
 80028bc:	2408      	movs	r4, #8
 80028be:	193a      	adds	r2, r7, r4
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	2301      	movs	r3, #1
 80028c4:	2127      	movs	r1, #39	@ 0x27
 80028c6:	f7ff fde1 	bl	800248c <lis3dh_read_reg>
 80028ca:	0003      	movs	r3, r0
 80028cc:	60fb      	str	r3, [r7, #12]
  *val = status_reg.zyxda;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	071b      	lsls	r3, r3, #28
 80028d4:	0fdb      	lsrs	r3, r3, #31
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	001a      	movs	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b005      	add	sp, #20
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 80028f2:	240c      	movs	r4, #12
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	2306      	movs	r3, #6
 80028fa:	2128      	movs	r1, #40	@ 0x28
 80028fc:	f7ff fdc6 	bl	800248c <lis3dh_read_reg>
 8002900:	0003      	movs	r3, r0
 8002902:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002904:	0021      	movs	r1, r4
 8002906:	187b      	adds	r3, r7, r1
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	b21a      	sxth	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	5e9b      	ldrsh	r3, [r3, r2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	187a      	adds	r2, r7, r1
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	189b      	adds	r3, r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	b21a      	sxth	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800292a:	187b      	adds	r3, r7, r1
 800292c:	78da      	ldrb	r2, [r3, #3]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3302      	adds	r3, #2
 8002932:	b212      	sxth	r2, r2
 8002934:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3302      	adds	r3, #2
 800293a:	2200      	movs	r2, #0
 800293c:	5e9b      	ldrsh	r3, [r3, r2]
 800293e:	b29b      	uxth	r3, r3
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b29b      	uxth	r3, r3
 8002944:	187a      	adds	r2, r7, r1
 8002946:	7892      	ldrb	r2, [r2, #2]
 8002948:	189b      	adds	r3, r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3302      	adds	r3, #2
 8002950:	b212      	sxth	r2, r2
 8002952:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002954:	187b      	adds	r3, r7, r1
 8002956:	795a      	ldrb	r2, [r3, #5]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	3304      	adds	r3, #4
 800295c:	b212      	sxth	r2, r2
 800295e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3304      	adds	r3, #4
 8002964:	2200      	movs	r2, #0
 8002966:	5e9b      	ldrsh	r3, [r3, r2]
 8002968:	b29b      	uxth	r3, r3
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	187a      	adds	r2, r7, r1
 8002970:	7912      	ldrb	r2, [r2, #4]
 8002972:	189b      	adds	r3, r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	3304      	adds	r3, #4
 800297a:	b212      	sxth	r2, r2
 800297c:	801a      	strh	r2, [r3, #0]

  return ret;
 800297e:	697b      	ldr	r3, [r7, #20]
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b007      	add	sp, #28
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	2301      	movs	r3, #1
 8002998:	210f      	movs	r1, #15
 800299a:	f7ff fd77 	bl	800248c <lis3dh_read_reg>
 800299e:	0003      	movs	r3, r0
 80029a0:	60fb      	str	r3, [r7, #12]

  return ret;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}

080029ac <theCode>:
static int16_t data_raw_acceleration[3];
static int16_t data_raw_temperature;
static float acceleration_mg[3];
static float temperature_degC;

int theCode(int N1, int N2, int N3, int N4) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
    // Check if the light state is equal to the code input to the function
    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) != N1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != N2)
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	011a      	lsls	r2, r3, #4
 80029be:	2390      	movs	r3, #144	@ 0x90
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 ff0f 	bl	80047e8 <HAL_GPIO_ReadPin>
 80029ca:	0003      	movs	r3, r0
 80029cc:	001a      	movs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d021      	beq.n	8002a18 <theCode+0x6c>
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <theCode+0x78>)
 80029d6:	2140      	movs	r1, #64	@ 0x40
 80029d8:	0018      	movs	r0, r3
 80029da:	f001 ff05 	bl	80047e8 <HAL_GPIO_ReadPin>
 80029de:	0003      	movs	r3, r0
 80029e0:	001a      	movs	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d017      	beq.n	8002a18 <theCode+0x6c>
    	&& (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) != N3) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) != N4)) {
 80029e8:	2390      	movs	r3, #144	@ 0x90
 80029ea:	05db      	lsls	r3, r3, #23
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 fefa 	bl	80047e8 <HAL_GPIO_ReadPin>
 80029f4:	0003      	movs	r3, r0
 80029f6:	001a      	movs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00c      	beq.n	8002a18 <theCode+0x6c>
 80029fe:	2390      	movs	r3, #144	@ 0x90
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	2140      	movs	r1, #64	@ 0x40
 8002a04:	0018      	movs	r0, r3
 8002a06:	f001 feef 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d001      	beq.n	8002a18 <theCode+0x6c>
        return 1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <theCode+0x6e>
    } else {
        return 0;
 8002a18:	2300      	movs	r3, #0
    }
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	48000400 	.word	0x48000400

08002a28 <ButtonToDec>:

int ButtonToDec() {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	int d = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	2390      	movs	r3, #144	@ 0x90
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f001 fed3 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d102      	bne.n	8002a4c <ButtonToDec+0x24>
		d = d + 1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0) {
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <ButtonToDec+0x70>)
 8002a4e:	2140      	movs	r1, #64	@ 0x40
 8002a50:	0018      	movs	r0, r3
 8002a52:	f001 fec9 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d102      	bne.n	8002a60 <ButtonToDec+0x38>
		d = d + 2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0) {
 8002a60:	2390      	movs	r3, #144	@ 0x90
 8002a62:	05db      	lsls	r3, r3, #23
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 febe 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002a6c:	1e03      	subs	r3, r0, #0
 8002a6e:	d102      	bne.n	8002a76 <ButtonToDec+0x4e>
		d = d + 4;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	607b      	str	r3, [r7, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0) {
 8002a76:	2390      	movs	r3, #144	@ 0x90
 8002a78:	05db      	lsls	r3, r3, #23
 8002a7a:	2140      	movs	r1, #64	@ 0x40
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f001 feb3 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d102      	bne.n	8002a8c <ButtonToDec+0x64>
		d = d + 8;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3308      	adds	r3, #8
 8002a8a:	607b      	str	r3, [r7, #4]
	}
	return d;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	48000400 	.word	0x48000400

08002a9c <allState>:

void allState(int state) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	2390      	movs	r3, #144	@ 0x90
 8002aaa:	05db      	lsls	r3, r3, #23
 8002aac:	2104      	movs	r1, #4
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f001 feb7 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, state);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	2390      	movs	r3, #144	@ 0x90
 8002aba:	05db      	lsls	r3, r3, #23
 8002abc:	2140      	movs	r1, #64	@ 0x40
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f001 feaf 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, state);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	2390      	movs	r3, #144	@ 0x90
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f001 fea7 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	0119      	lsls	r1, r3, #4
 8002adc:	2390      	movs	r3, #144	@ 0x90
 8002ade:	05db      	lsls	r3, r3, #23
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f001 fe9e 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, state);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	0159      	lsls	r1, r3, #5
 8002aee:	2390      	movs	r3, #144	@ 0x90
 8002af0:	05db      	lsls	r3, r3, #23
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 fe95 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, state);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4807      	ldr	r0, [pc, #28]	@ (8002b1c <allState+0x80>)
 8002afe:	001a      	movs	r2, r3
 8002b00:	2102      	movs	r1, #2
 8002b02:	f001 fe8e 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <allState+0x80>)
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2140      	movs	r1, #64	@ 0x40
 8002b10:	f001 fe87 	bl	8004822 <HAL_GPIO_WritePin>
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	48000400 	.word	0x48000400

08002b20 <BeepX>:

void BeepX(float seconds, float beepNumPerSecond) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	float j = seconds * beepNumPerSecond;
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd ff77 	bl	8000a20 <__aeabi_fmul>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	613b      	str	r3, [r7, #16]
	float t = 1000.0 / beepNumPerSecond;
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	481e      	ldr	r0, [pc, #120]	@ (8002bb4 <BeepX+0x94>)
 8002b3a:	f7fd fd8b 	bl	8000654 <__aeabi_fdiv>
 8002b3e:	1c03      	adds	r3, r0, #0
 8002b40:	60fb      	str	r3, [r7, #12]
	float x = t/2.0;
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	05c9      	lsls	r1, r1, #23
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7fd fd84 	bl	8000654 <__aeabi_fdiv>
 8002b4c:	1c03      	adds	r3, r0, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
	for (float i = 0; i <= j; i++){
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e022      	b.n	8002b9c <BeepX+0x7c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8002b56:	2390      	movs	r3, #144	@ 0x90
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f001 fe5f 	bl	8004822 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	f7fd fbd3 	bl	8000310 <__aeabi_f2uiz>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 ff0b 	bl	8003988 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8002b72:	2390      	movs	r3, #144	@ 0x90
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	2200      	movs	r2, #0
 8002b78:	2108      	movs	r1, #8
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f001 fe51 	bl	8004822 <HAL_GPIO_WritePin>
		HAL_Delay(x);
 8002b80:	68b8      	ldr	r0, [r7, #8]
 8002b82:	f7fd fbc5 	bl	8000310 <__aeabi_f2uiz>
 8002b86:	0003      	movs	r3, r0
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fefd 	bl	8003988 <HAL_Delay>
	for (float i = 0; i <= j; i++){
 8002b8e:	21fe      	movs	r1, #254	@ 0xfe
 8002b90:	0589      	lsls	r1, r1, #22
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7fd fbd4 	bl	8000340 <__aeabi_fadd>
 8002b98:	1c03      	adds	r3, r0, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	6939      	ldr	r1, [r7, #16]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7fd fb98 	bl	80002d4 <__aeabi_fcmple>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d1d6      	bne.n	8002b56 <BeepX+0x36>
	}
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	447a0000 	.word	0x447a0000

08002bb8 <buttonsNlights>:

void buttonsNlights() {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	005a      	lsls	r2, r3, #1
 8002bc0:	2390      	movs	r3, #144	@ 0x90
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f001 fe0e 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d10f      	bne.n	8002bf0 <buttonsNlights+0x38>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	2390      	movs	r3, #144	@ 0x90
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fe3e 	bl	800485c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8002be0:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <buttonsNlights+0xbc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fecf 	bl	8003988 <HAL_Delay>
		TimOut = 0;
 8002bea:	4b23      	ldr	r3, [pc, #140]	@ (8002c78 <buttonsNlights+0xc0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8002bf0:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <buttonsNlights+0xc4>)
 8002bf2:	2110      	movs	r1, #16
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f001 fdf7 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d10c      	bne.n	8002c18 <buttonsNlights+0x60>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <buttonsNlights+0xc4>)
 8002c00:	2140      	movs	r1, #64	@ 0x40
 8002c02:	0018      	movs	r0, r3
 8002c04:	f001 fe2a 	bl	800485c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <buttonsNlights+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 febb 	bl	8003988 <HAL_Delay>
		TimOut = 0;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <buttonsNlights+0xc0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 8002c18:	4b18      	ldr	r3, [pc, #96]	@ (8002c7c <buttonsNlights+0xc4>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f001 fde3 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d10d      	bne.n	8002c42 <buttonsNlights+0x8a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8002c26:	2390      	movs	r3, #144	@ 0x90
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	2180      	movs	r1, #128	@ 0x80
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f001 fe15 	bl	800485c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <buttonsNlights+0xbc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fea6 	bl	8003988 <HAL_Delay>
		TimOut = 0;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <buttonsNlights+0xc0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8002c42:	2390      	movs	r3, #144	@ 0x90
 8002c44:	05db      	lsls	r3, r3, #23
 8002c46:	2110      	movs	r1, #16
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fdcd 	bl	80047e8 <HAL_GPIO_ReadPin>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d10d      	bne.n	8002c6e <buttonsNlights+0xb6>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8002c52:	2390      	movs	r3, #144	@ 0x90
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	2140      	movs	r1, #64	@ 0x40
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f001 fdff 	bl	800485c <HAL_GPIO_TogglePin>
		HAL_Delay(debounce);
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <buttonsNlights+0xbc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 fe90 	bl	8003988 <HAL_Delay>
		TimOut = 0;
 8002c68:	4b03      	ldr	r3, [pc, #12]	@ (8002c78 <buttonsNlights+0xc0>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
	}
}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000000 	.word	0x20000000
 8002c78:	200000c4 	.word	0x200000c4
 8002c7c:	48000400 	.word	0x48000400

08002c80 <ErrorSound>:

void ErrorSound() {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	BeepX(0.5,698);
 8002c84:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc0 <ErrorSound+0x40>)
 8002c86:	23fc      	movs	r3, #252	@ 0xfc
 8002c88:	059b      	lsls	r3, r3, #22
 8002c8a:	1c11      	adds	r1, r2, #0
 8002c8c:	1c18      	adds	r0, r3, #0
 8002c8e:	f7ff ff47 	bl	8002b20 <BeepX>
	BeepX(0.5,520);
 8002c92:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc4 <ErrorSound+0x44>)
 8002c94:	23fc      	movs	r3, #252	@ 0xfc
 8002c96:	059b      	lsls	r3, r3, #22
 8002c98:	1c11      	adds	r1, r2, #0
 8002c9a:	1c18      	adds	r0, r3, #0
 8002c9c:	f7ff ff40 	bl	8002b20 <BeepX>
	BeepX(0.5,350);
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <ErrorSound+0x48>)
 8002ca2:	23fc      	movs	r3, #252	@ 0xfc
 8002ca4:	059b      	lsls	r3, r3, #22
 8002ca6:	1c11      	adds	r1, r2, #0
 8002ca8:	1c18      	adds	r0, r3, #0
 8002caa:	f7ff ff39 	bl	8002b20 <BeepX>
	HAL_Delay(1000);
 8002cae:	23fa      	movs	r3, #250	@ 0xfa
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 fe68 	bl	8003988 <HAL_Delay>
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	442e8000 	.word	0x442e8000
 8002cc4:	44020000 	.word	0x44020000
 8002cc8:	43af0000 	.word	0x43af0000

08002ccc <platform_write>:
}

//static uint8_t tx_buffer[1000];

/** Please note that is MANDATORY: return 0 -> no Error.**/
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	0008      	movs	r0, r1
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	0019      	movs	r1, r3
 8002cda:	240b      	movs	r4, #11
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	1c02      	adds	r2, r0, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	2508      	movs	r5, #8
 8002ce4:	197b      	adds	r3, r7, r5
 8002ce6:	1c0a      	adds	r2, r1, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8002cea:	0020      	movs	r0, r4
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	183a      	adds	r2, r7, r0
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	2180      	movs	r1, #128	@ 0x80
 8002cf4:	4249      	negs	r1, r1
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, 0x30, reg, 1, (uint8_t*) bufp, len, 1000); //define 8bit
 8002cfa:	183b      	adds	r3, r7, r0
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	23fa      	movs	r3, #250	@ 0xfa
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	197b      	adds	r3, r7, r5
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2301      	movs	r3, #1
 8002d14:	2130      	movs	r1, #48	@ 0x30
 8002d16:	f001 fe63 	bl	80049e0 <HAL_I2C_Mem_Write>
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bdb0      	pop	{r4, r5, r7, pc}

08002d24 <platform_read>:

int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af04      	add	r7, sp, #16
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	0008      	movs	r0, r1
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	0019      	movs	r1, r3
 8002d32:	240b      	movs	r4, #11
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	1c02      	adds	r2, r0, #0
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	2508      	movs	r5, #8
 8002d3c:	197b      	adds	r3, r7, r5
 8002d3e:	1c0a      	adds	r2, r1, #0
 8002d40:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8002d42:	0020      	movs	r0, r4
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	183a      	adds	r2, r7, r0
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	4249      	negs	r1, r1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, 0x30, reg, 1, bufp, len, 1000);
 8002d52:	183b      	adds	r3, r7, r0
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	23fa      	movs	r3, #250	@ 0xfa
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	197b      	adds	r3, r7, r5
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2130      	movs	r1, #48	@ 0x30
 8002d6e:	f001 ff65 	bl	8004c3c <HAL_I2C_Mem_Read>
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bdb0      	pop	{r4, r5, r7, pc}

08002d7c <platform_delay>:

/** Optional (may be required by driver) **/
void platform_delay(uint32_t millisec) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 fdfe 	bl	8003988 <HAL_Delay>
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <UpdateValues>:


void UpdateValues(void)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8002d9a:	2408      	movs	r4, #8
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <UpdateValues+0x118>)
 8002da0:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <UpdateValues+0x11c>)
 8002da6:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	4a42      	ldr	r2, [pc, #264]	@ (8002eb4 <UpdateValues+0x120>)
 8002dac:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	4a41      	ldr	r2, [pc, #260]	@ (8002eb8 <UpdateValues+0x124>)
 8002db2:	60da      	str	r2, [r3, #12]
  platform_delay(10);
 8002db4:	200a      	movs	r0, #10
 8002db6:	f7ff ffe1 	bl	8002d7c <platform_delay>
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 8002dba:	4a40      	ldr	r2, [pc, #256]	@ (8002ebc <UpdateValues+0x128>)
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7ff fde1 	bl	8002988 <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID) {
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ebc <UpdateValues+0x128>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b33      	cmp	r3, #51	@ 0x33
 8002dcc:	d002      	beq.n	8002dd4 <UpdateValues+0x40>
    while (1) {
    	ErrorSound();
 8002dce:	f7ff ff57 	bl	8002c80 <ErrorSound>
 8002dd2:	e7fc      	b.n	8002dce <UpdateValues+0x3a>
    }
  }

  /* Enable Block Data Update. */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002dd4:	2408      	movs	r4, #8
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	2101      	movs	r1, #1
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f7ff fd3b 	bl	8002856 <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	2102      	movs	r1, #2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff fcd8 	bl	800279a <lis3dh_data_rate_set>
  /* Set full scale to 2g. */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	2100      	movs	r1, #0
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fd01 	bl	80027f6 <lis3dh_full_scale_set>
  /* Enable temperature sensor. */
  lis3dh_aux_adc_set(&dev_ctx, LIS3DH_AUX_ON_TEMPERATURE);
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	2103      	movs	r1, #3
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff fc16 	bl	800262a <lis3dh_aux_adc_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	2100      	movs	r1, #0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fc60 	bl	80026c8 <lis3dh_operating_mode_set>

  lis3dh_reg_t reg;
  /* Read output only if new value available */
  lis3dh_xl_data_ready_get(&dev_ctx, &reg.byte);
 8002e08:	1d3a      	adds	r2, r7, #4
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff fd4f 	bl	80028b2 <lis3dh_xl_data_ready_get>

    if (reg.byte) {
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d026      	beq.n	8002e6a <UpdateValues+0xd6>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <UpdateValues+0x12c>)
 8002e1e:	2206      	movs	r2, #6
 8002e20:	2100      	movs	r1, #0
 8002e22:	0018      	movs	r0, r3
 8002e24:	f003 f94a 	bl	80060bc <memset>
      lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8002e28:	4a25      	ldr	r2, [pc, #148]	@ (8002ec0 <UpdateValues+0x12c>)
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff fd5a 	bl	80028e8 <lis3dh_acceleration_raw_get>
      acceleration_mg[0] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8002e34:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <UpdateValues+0x12c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	5e9b      	ldrsh	r3, [r3, r2]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff fb78 	bl	8002530 <lis3dh_from_fs2_hr_to_mg>
 8002e40:	1c02      	adds	r2, r0, #0
      acceleration_mg[0] =
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <UpdateValues+0x130>)
 8002e44:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <UpdateValues+0x12c>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff fb6f 	bl	8002530 <lis3dh_from_fs2_hr_to_mg>
 8002e52:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <UpdateValues+0x130>)
 8002e56:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
        lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <UpdateValues+0x12c>)
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff fb66 	bl	8002530 <lis3dh_from_fs2_hr_to_mg>
 8002e64:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
 8002e66:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <UpdateValues+0x130>)
 8002e68:	609a      	str	r2, [r3, #8]
    }

    lis3dh_temp_data_ready_get(&dev_ctx, &reg.byte);
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	2408      	movs	r4, #8
 8002e6e:	193b      	adds	r3, r7, r4
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fb98 	bl	80025a8 <lis3dh_temp_data_ready_get>

    if (reg.byte) {
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d011      	beq.n	8002ea4 <UpdateValues+0x110>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <UpdateValues+0x134>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	801a      	strh	r2, [r3, #0]
      lis3dh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8002e86:	4a10      	ldr	r2, [pc, #64]	@ (8002ec8 <UpdateValues+0x134>)
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fba6 	bl	80025de <lis3dh_temperature_raw_get>
      temperature_degC = lis3dh_from_lsb_hr_to_celsius(data_raw_temperature);
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <UpdateValues+0x134>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	5e9b      	ldrsh	r3, [r3, r2]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff fb61 	bl	8002560 <lis3dh_from_lsb_hr_to_celsius>
 8002e9e:	1c02      	adds	r2, r0, #0
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <UpdateValues+0x138>)
 8002ea2:	601a      	str	r2, [r3, #0]
    }
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b007      	add	sp, #28
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	08002ccd 	.word	0x08002ccd
 8002eb0:	08002d25 	.word	0x08002d25
 8002eb4:	08002d7d 	.word	0x08002d7d
 8002eb8:	2000006c 	.word	0x2000006c
 8002ebc:	200000c8 	.word	0x200000c8
 8002ec0:	200000cc 	.word	0x200000cc
 8002ec4:	200000d4 	.word	0x200000d4
 8002ec8:	200000d2 	.word	0x200000d2
 8002ecc:	200000e0 	.word	0x200000e0

08002ed0 <BarSet>:


int BarSet(int n1, int n2, int n3, int n4) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, !n1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	425a      	negs	r2, r3
 8002ee2:	4153      	adcs	r3, r2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	0119      	lsls	r1, r3, #4
 8002eec:	2390      	movs	r3, #144	@ 0x90
 8002eee:	05db      	lsls	r3, r3, #23
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f001 fc96 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, !n2);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	425a      	negs	r2, r3
 8002efa:	4153      	adcs	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	001a      	movs	r2, r3
 8002f00:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <BarSet+0x70>)
 8002f02:	2140      	movs	r1, #64	@ 0x40
 8002f04:	0018      	movs	r0, r3
 8002f06:	f001 fc8c 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, !n3);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	425a      	negs	r2, r3
 8002f0e:	4153      	adcs	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	001a      	movs	r2, r3
 8002f14:	2390      	movs	r3, #144	@ 0x90
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 fc81 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, !n4);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	425a      	negs	r2, r3
 8002f24:	4153      	adcs	r3, r2
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2390      	movs	r3, #144	@ 0x90
 8002f2c:	05db      	lsls	r3, r3, #23
 8002f2e:	2140      	movs	r1, #64	@ 0x40
 8002f30:	0018      	movs	r0, r3
 8002f32:	f001 fc76 	bl	8004822 <HAL_GPIO_WritePin>
}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	48000400 	.word	0x48000400

08002f44 <OnAnimation>:
        n = n / 2;
        i++;
    }
}

void OnAnimation() {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
	int delyuh = 70;
 8002f4a:	2346      	movs	r3, #70	@ 0x46
 8002f4c:	607b      	str	r3, [r7, #4]
	BarSet(0,0,0,1);
 8002f4e:	2301      	movs	r3, #1
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff ffbb 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fd13 	bl	8003988 <HAL_Delay>
	BarSet(0,0,1,1);
 8002f62:	2301      	movs	r3, #1
 8002f64:	2201      	movs	r2, #1
 8002f66:	2100      	movs	r1, #0
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7ff ffb1 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 fd09 	bl	8003988 <HAL_Delay>
	BarSet(0,1,1,0);
 8002f76:	2300      	movs	r3, #0
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff ffa7 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fcff 	bl	8003988 <HAL_Delay>
	BarSet(1,1,0,0);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7ff ff9d 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fcf5 	bl	8003988 <HAL_Delay>
	BarSet(1,0,0,1);
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff ff93 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fceb 	bl	8003988 <HAL_Delay>
	BarSet(0,0,1,1);
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7ff ff89 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fce1 	bl	8003988 <HAL_Delay>
	BarSet(0,1,1,0);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7ff ff7f 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 fcd7 	bl	8003988 <HAL_Delay>
	BarSet(1,1,0,0);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2101      	movs	r1, #1
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7ff ff75 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 fccd 	bl	8003988 <HAL_Delay>
	BarSet(1,0,0,0);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7ff ff6b 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f000 fcc3 	bl	8003988 <HAL_Delay>
	BarSet(0,0,0,0);
 8003002:	2300      	movs	r3, #0
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	2000      	movs	r0, #0
 800300a:	f7ff ff61 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fcb9 	bl	8003988 <HAL_Delay>
}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}

0800301e <OffAnimation>:
void OffAnimation() {
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
	int delyuh = 70;
 8003024:	2346      	movs	r3, #70	@ 0x46
 8003026:	607b      	str	r3, [r7, #4]
	BarSet(1,0,0,0);
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	2001      	movs	r0, #1
 8003030:	f7ff ff4e 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fca6 	bl	8003988 <HAL_Delay>
	BarSet(1,1,0,0);
 800303c:	2300      	movs	r3, #0
 800303e:	2200      	movs	r2, #0
 8003040:	2101      	movs	r1, #1
 8003042:	2001      	movs	r0, #1
 8003044:	f7ff ff44 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fc9c 	bl	8003988 <HAL_Delay>
	BarSet(0,1,1,0);
 8003050:	2300      	movs	r3, #0
 8003052:	2201      	movs	r2, #1
 8003054:	2101      	movs	r1, #1
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff ff3a 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 fc92 	bl	8003988 <HAL_Delay>
	BarSet(0,0,1,1);
 8003064:	2301      	movs	r3, #1
 8003066:	2201      	movs	r2, #1
 8003068:	2100      	movs	r1, #0
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff ff30 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fc88 	bl	8003988 <HAL_Delay>
	BarSet(1,0,0,1);
 8003078:	2301      	movs	r3, #1
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f7ff ff26 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fc7e 	bl	8003988 <HAL_Delay>
	BarSet(1,1,0,0);
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	2101      	movs	r1, #1
 8003092:	2001      	movs	r0, #1
 8003094:	f7ff ff1c 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fc74 	bl	8003988 <HAL_Delay>
	BarSet(0,1,1,0);
 80030a0:	2300      	movs	r3, #0
 80030a2:	2201      	movs	r2, #1
 80030a4:	2101      	movs	r1, #1
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7ff ff12 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fc6a 	bl	8003988 <HAL_Delay>
	BarSet(0,0,1,1);
 80030b4:	2301      	movs	r3, #1
 80030b6:	2201      	movs	r2, #1
 80030b8:	2100      	movs	r1, #0
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7ff ff08 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fc60 	bl	8003988 <HAL_Delay>
	BarSet(0,0,0,1);
 80030c8:	2301      	movs	r3, #1
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7ff fefe 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 fc56 	bl	8003988 <HAL_Delay>
	BarSet(0,0,0,0);
 80030dc:	2300      	movs	r3, #0
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7ff fef4 	bl	8002ed0 <BarSet>
	HAL_Delay(delyuh);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fc4c 	bl	8003988 <HAL_Delay>
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <stmSTOP>:

void stmSTOP() { //230% more power efficient than normal mode!
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	0018      	movs	r0, r3
 8003102:	2314      	movs	r3, #20
 8003104:	001a      	movs	r2, r3
 8003106:	2100      	movs	r1, #0
 8003108:	f002 ffd8 	bl	80060bc <memset>
    GPIO_Init.Pin          = GPIO_PIN_0;
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    GPIO_Init.Mode         = GPIO_MODE_EVT_FALLING;
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	2288      	movs	r2, #136	@ 0x88
 8003116:	0392      	lsls	r2, r2, #14
 8003118:	605a      	str	r2, [r3, #4]
    GPIO_Init.Pull         = GPIO_PULLUP;
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	2201      	movs	r2, #1
 800311e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003120:	1d3a      	adds	r2, r7, #4
 8003122:	2390      	movs	r3, #144	@ 0x90
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f001 f91d 	bl	8004368 <HAL_GPIO_Init>

    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800312e:	2102      	movs	r1, #2
 8003130:	2001      	movs	r0, #1
 8003132:	f002 fa6d 	bl	8005610 <HAL_PWR_EnterSTOPMode>

    //Device is in stop mode

    SystemInit();
 8003136:	f000 fb94 	bl	8003862 <SystemInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 800313a:	2390      	movs	r3, #144	@ 0x90
 800313c:	05db      	lsls	r3, r3, #23
 800313e:	2101      	movs	r1, #1
 8003140:	0018      	movs	r0, r3
 8003142:	f001 fa81 	bl	8004648 <HAL_GPIO_DeInit>

    GPIO_Init.Pin          = GPIO_PIN_0;
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]
    GPIO_Init.Mode         = GPIO_MODE_INPUT;
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
    GPIO_Init.Pull         = GPIO_PULLUP;
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2201      	movs	r2, #1
 8003156:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003158:	1d3a      	adds	r2, r7, #4
 800315a:	2390      	movs	r3, #144	@ 0x90
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f001 f901 	bl	8004368 <HAL_GPIO_Init>
    OnAnimation();
 8003166:	f7ff feed 	bl	8002f44 <OnAnimation>
    HAL_Delay(200);
 800316a:	20c8      	movs	r0, #200	@ 0xc8
 800316c:	f000 fc0c 	bl	8003988 <HAL_Delay>
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b006      	add	sp, #24
 8003176:	bd80      	pop	{r7, pc}

08003178 <stmSTANDBY>:

void stmSTANDBY() {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	 if (!__HAL_PWR_GET_FLAG(PWR_FLAG_WU)) {
 800317c:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <stmSTANDBY+0x54>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	4013      	ands	r3, r2
 8003184:	2b01      	cmp	r3, #1
 8003186:	d017      	beq.n	80031b8 <stmSTANDBY+0x40>
			HAL_Delay(500);
 8003188:	23fa      	movs	r3, #250	@ 0xfa
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	0018      	movs	r0, r3
 800318e:	f000 fbfb 	bl	8003988 <HAL_Delay>

			HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	0018      	movs	r0, r3
 8003198:	f002 fa28 	bl	80055ec <HAL_PWR_DisableWakeUpPin>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <stmSTANDBY+0x54>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <stmSTANDBY+0x54>)
 80031a2:	2104      	movs	r1, #4
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	0018      	movs	r0, r3
 80031ae:	f002 fa0d 	bl	80055cc <HAL_PWR_EnableWakeUpPin>

			HAL_PWR_EnterSTANDBYMode();
 80031b2:	f002 fa61 	bl	8005678 <HAL_PWR_EnterSTANDBYMode>

			HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
		    OnAnimation();

	  }
}
 80031b6:	e006      	b.n	80031c6 <stmSTANDBY+0x4e>
			HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	0018      	movs	r0, r3
 80031be:	f002 fa15 	bl	80055ec <HAL_PWR_DisableWakeUpPin>
		    OnAnimation();
 80031c2:	f7ff febf 	bl	8002f44 <OnAnimation>
}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40007000 	.word	0x40007000

080031d0 <BatteryVoltage>:

void BatteryVoltage() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	0219      	lsls	r1, r3, #8
 80031da:	2390      	movs	r3, #144	@ 0x90
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	2201      	movs	r2, #1
 80031e0:	0018      	movs	r0, r3
 80031e2:	f001 fb1e 	bl	8004822 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc);
 80031e6:	4bc0      	ldr	r3, [pc, #768]	@ (80034e8 <BatteryVoltage+0x318>)
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fd31 	bl	8003c50 <HAL_ADC_Start>
	  int analogVol = HAL_ADC_GetValue(&hadc);
 80031ee:	4bbe      	ldr	r3, [pc, #760]	@ (80034e8 <BatteryVoltage+0x318>)
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 fdc1 	bl	8003d78 <HAL_ADC_GetValue>
 80031f6:	0003      	movs	r3, r0
 80031f8:	60fb      	str	r3, [r7, #12]
	  float tmp = analogVol * 0.00322;
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7fe fe6a 	bl	8001ed4 <__aeabi_i2d>
 8003200:	4aba      	ldr	r2, [pc, #744]	@ (80034ec <BatteryVoltage+0x31c>)
 8003202:	4bbb      	ldr	r3, [pc, #748]	@ (80034f0 <BatteryVoltage+0x320>)
 8003204:	f7fe fb9e 	bl	8001944 <__aeabi_dmul>
 8003208:	0002      	movs	r2, r0
 800320a:	000b      	movs	r3, r1
 800320c:	0010      	movs	r0, r2
 800320e:	0019      	movs	r1, r3
 8003210:	f7fe fed6 	bl	8001fc0 <__aeabi_d2f>
 8003214:	1c03      	adds	r3, r0, #0
 8003216:	60bb      	str	r3, [r7, #8]
	  BatVol = tmp / 0.787;
 8003218:	68b8      	ldr	r0, [r7, #8]
 800321a:	f7fe fe89 	bl	8001f30 <__aeabi_f2d>
 800321e:	4ab5      	ldr	r2, [pc, #724]	@ (80034f4 <BatteryVoltage+0x324>)
 8003220:	4bb5      	ldr	r3, [pc, #724]	@ (80034f8 <BatteryVoltage+0x328>)
 8003222:	f7fd ff4b 	bl	80010bc <__aeabi_ddiv>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0010      	movs	r0, r2
 800322c:	0019      	movs	r1, r3
 800322e:	f7fe fec7 	bl	8001fc0 <__aeabi_d2f>
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	4bb1      	ldr	r3, [pc, #708]	@ (80034fc <BatteryVoltage+0x32c>)
 8003236:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8003238:	4bab      	ldr	r3, [pc, #684]	@ (80034e8 <BatteryVoltage+0x318>)
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fd5c 	bl	8003cf8 <HAL_ADC_Stop>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	0219      	lsls	r1, r3, #8
 8003244:	2390      	movs	r3, #144	@ 0x90
 8003246:	05db      	lsls	r3, r3, #23
 8003248:	2200      	movs	r2, #0
 800324a:	0018      	movs	r0, r3
 800324c:	f001 fae9 	bl	8004822 <HAL_GPIO_WritePin>
	  int delayee = 100;
 8003250:	2364      	movs	r3, #100	@ 0x64
 8003252:	607b      	str	r3, [r7, #4]
	  if (BatVol > 3.90) {
 8003254:	4ba9      	ldr	r3, [pc, #676]	@ (80034fc <BatteryVoltage+0x32c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	1c18      	adds	r0, r3, #0
 800325a:	f7fe fe69 	bl	8001f30 <__aeabi_f2d>
 800325e:	4aa8      	ldr	r2, [pc, #672]	@ (8003500 <BatteryVoltage+0x330>)
 8003260:	4ba8      	ldr	r3, [pc, #672]	@ (8003504 <BatteryVoltage+0x334>)
 8003262:	f7fd f807 	bl	8000274 <__aeabi_dcmpgt>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d050      	beq.n	800330c <BatteryVoltage+0x13c>
		  BarSet(0,0,0,1);
 800326a:	2301      	movs	r3, #1
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff fe2d 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 fb85 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,1,1);
 800327e:	2301      	movs	r3, #1
 8003280:	2201      	movs	r2, #1
 8003282:	2100      	movs	r1, #0
 8003284:	2000      	movs	r0, #0
 8003286:	f7ff fe23 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f000 fb7b 	bl	8003988 <HAL_Delay>
		  BarSet(0,1,1,1);
 8003292:	2301      	movs	r3, #1
 8003294:	2201      	movs	r2, #1
 8003296:	2101      	movs	r1, #1
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff fe19 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 fb71 	bl	8003988 <HAL_Delay>
		  BarSet(1,1,1,1);
 80032a6:	2301      	movs	r3, #1
 80032a8:	2201      	movs	r2, #1
 80032aa:	2101      	movs	r1, #1
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7ff fe0f 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*10);
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	0013      	movs	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 fb63 	bl	8003988 <HAL_Delay>
		  BarSet(0,1,1,1);
 80032c2:	2301      	movs	r3, #1
 80032c4:	2201      	movs	r2, #1
 80032c6:	2101      	movs	r1, #1
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7ff fe01 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fb59 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,1,1);
 80032d6:	2301      	movs	r3, #1
 80032d8:	2201      	movs	r2, #1
 80032da:	2100      	movs	r1, #0
 80032dc:	2000      	movs	r0, #0
 80032de:	f7ff fdf7 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fb4f 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,1);
 80032ea:	2301      	movs	r3, #1
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7ff fded 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 fb45 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 80032fe:	2300      	movs	r3, #0
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	2000      	movs	r0, #0
 8003306:	f7ff fde3 	bl	8002ed0 <BarSet>
 800330a:	e0e3      	b.n	80034d4 <BatteryVoltage+0x304>
	  }
	  else if (BatVol > 3.74) {
 800330c:	4b7b      	ldr	r3, [pc, #492]	@ (80034fc <BatteryVoltage+0x32c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c18      	adds	r0, r3, #0
 8003312:	f7fe fe0d 	bl	8001f30 <__aeabi_f2d>
 8003316:	4a7c      	ldr	r2, [pc, #496]	@ (8003508 <BatteryVoltage+0x338>)
 8003318:	4b7c      	ldr	r3, [pc, #496]	@ (800350c <BatteryVoltage+0x33c>)
 800331a:	f7fc ffab 	bl	8000274 <__aeabi_dcmpgt>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d03c      	beq.n	800339c <BatteryVoltage+0x1cc>
		  BarSet(0,0,0,1);
 8003322:	2301      	movs	r3, #1
 8003324:	2200      	movs	r2, #0
 8003326:	2100      	movs	r1, #0
 8003328:	2000      	movs	r0, #0
 800332a:	f7ff fdd1 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 fb29 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,1,1);
 8003336:	2301      	movs	r3, #1
 8003338:	2201      	movs	r2, #1
 800333a:	2100      	movs	r1, #0
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff fdc7 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 fb1f 	bl	8003988 <HAL_Delay>
		  BarSet(0,1,1,1);
 800334a:	2301      	movs	r3, #1
 800334c:	2201      	movs	r2, #1
 800334e:	2101      	movs	r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	f7ff fdbd 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*10);
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	0013      	movs	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	189b      	adds	r3, r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fb11 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,1,1);
 8003366:	2301      	movs	r3, #1
 8003368:	2201      	movs	r2, #1
 800336a:	2100      	movs	r1, #0
 800336c:	2000      	movs	r0, #0
 800336e:	f7ff fdaf 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 fb07 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,1);
 800337a:	2301      	movs	r3, #1
 800337c:	2200      	movs	r2, #0
 800337e:	2100      	movs	r1, #0
 8003380:	2000      	movs	r0, #0
 8003382:	f7ff fda5 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 fafd 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 800338e:	2300      	movs	r3, #0
 8003390:	2200      	movs	r2, #0
 8003392:	2100      	movs	r1, #0
 8003394:	2000      	movs	r0, #0
 8003396:	f7ff fd9b 	bl	8002ed0 <BarSet>
 800339a:	e09b      	b.n	80034d4 <BatteryVoltage+0x304>
	  }
	  else if (BatVol > 3.65) {
 800339c:	4b57      	ldr	r3, [pc, #348]	@ (80034fc <BatteryVoltage+0x32c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	1c18      	adds	r0, r3, #0
 80033a2:	f7fe fdc5 	bl	8001f30 <__aeabi_f2d>
 80033a6:	4a56      	ldr	r2, [pc, #344]	@ (8003500 <BatteryVoltage+0x330>)
 80033a8:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <BatteryVoltage+0x340>)
 80033aa:	f7fc ff63 	bl	8000274 <__aeabi_dcmpgt>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d028      	beq.n	8003404 <BatteryVoltage+0x234>
		  BarSet(0,0,0,1);
 80033b2:	2301      	movs	r3, #1
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7ff fd89 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 fae1 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,1,1);
 80033c6:	2301      	movs	r3, #1
 80033c8:	2201      	movs	r2, #1
 80033ca:	2100      	movs	r1, #0
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff fd7f 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*10);
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	0013      	movs	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 fad3 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,1);
 80033e2:	2301      	movs	r3, #1
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7ff fd71 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fac9 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 80033f6:	2300      	movs	r3, #0
 80033f8:	2200      	movs	r2, #0
 80033fa:	2100      	movs	r1, #0
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7ff fd67 	bl	8002ed0 <BarSet>
 8003402:	e067      	b.n	80034d4 <BatteryVoltage+0x304>
	  }
	  else if (BatVol > 3.4) {
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <BatteryVoltage+0x32c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	1c18      	adds	r0, r3, #0
 800340a:	f7fe fd91 	bl	8001f30 <__aeabi_f2d>
 800340e:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <BatteryVoltage+0x330>)
 8003410:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <BatteryVoltage+0x344>)
 8003412:	f7fc ff2f 	bl	8000274 <__aeabi_dcmpgt>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d014      	beq.n	8003444 <BatteryVoltage+0x274>
		  BarSet(0,0,0,1);
 800341a:	2301      	movs	r3, #1
 800341c:	2200      	movs	r2, #0
 800341e:	2100      	movs	r1, #0
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fd55 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*10);
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	0013      	movs	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	189b      	adds	r3, r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	0018      	movs	r0, r3
 8003432:	f000 faa9 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 8003436:	2300      	movs	r3, #0
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff fd47 	bl	8002ed0 <BarSet>
 8003442:	e047      	b.n	80034d4 <BatteryVoltage+0x304>
	  }
	  else if (BatVol < 3.4) {
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <BatteryVoltage+0x32c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c18      	adds	r0, r3, #0
 800344a:	f7fe fd71 	bl	8001f30 <__aeabi_f2d>
 800344e:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <BatteryVoltage+0x330>)
 8003450:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <BatteryVoltage+0x344>)
 8003452:	f7fc fefb 	bl	800024c <__aeabi_dcmplt>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d03c      	beq.n	80034d4 <BatteryVoltage+0x304>
		  BarSet(0,0,0,1);
 800345a:	2301      	movs	r3, #1
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fd35 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*2);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	0018      	movs	r0, r3
 800346c:	f000 fa8c 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 8003470:	2300      	movs	r3, #0
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff fd2a 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa81 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,1);
 8003486:	2301      	movs	r3, #1
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	2000      	movs	r0, #0
 800348e:	f7ff fd1f 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	0018      	movs	r0, r3
 8003498:	f000 fa76 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 800349c:	2300      	movs	r3, #0
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7ff fd14 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fa6b 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,1);
 80034b2:	2301      	movs	r3, #1
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	2000      	movs	r0, #0
 80034ba:	f7ff fd09 	bl	8002ed0 <BarSet>
		  HAL_Delay(delayee*2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fa60 	bl	8003988 <HAL_Delay>
		  BarSet(0,0,0,0);
 80034c8:	2300      	movs	r3, #0
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7ff fcfe 	bl	8002ed0 <BarSet>
	  }
	  HAL_Delay(200);
 80034d4:	20c8      	movs	r0, #200	@ 0xc8
 80034d6:	f000 fa57 	bl	8003988 <HAL_Delay>
	  allState(1);
 80034da:	2001      	movs	r0, #1
 80034dc:	f7ff fade 	bl	8002a9c <allState>
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2000002c 	.word	0x2000002c
 80034ec:	562e09ff 	.word	0x562e09ff
 80034f0:	3f6a60d4 	.word	0x3f6a60d4
 80034f4:	9fbe76c9 	.word	0x9fbe76c9
 80034f8:	3fe92f1a 	.word	0x3fe92f1a
 80034fc:	200000c0 	.word	0x200000c0
 8003500:	33333333 	.word	0x33333333
 8003504:	400f3333 	.word	0x400f3333
 8003508:	1eb851ec 	.word	0x1eb851ec
 800350c:	400deb85 	.word	0x400deb85
 8003510:	400d3333 	.word	0x400d3333
 8003514:	400b3333 	.word	0x400b3333

08003518 <AccelDetecting>:
		  }

	  }
}

void AccelDetecting(int sensitivity) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	  BarSet(1,1,1,1);
 8003520:	2301      	movs	r3, #1
 8003522:	2201      	movs	r2, #1
 8003524:	2101      	movs	r1, #1
 8003526:	2001      	movs	r0, #1
 8003528:	f7ff fcd2 	bl	8002ed0 <BarSet>
	  HAL_Delay(500);
 800352c:	23fa      	movs	r3, #250	@ 0xfa
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fa29 	bl	8003988 <HAL_Delay>
	  BarSet(0,1,1,1);
 8003536:	2301      	movs	r3, #1
 8003538:	2201      	movs	r2, #1
 800353a:	2101      	movs	r1, #1
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff fcc7 	bl	8002ed0 <BarSet>
	  HAL_Delay(500);
 8003542:	23fa      	movs	r3, #250	@ 0xfa
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fa1e 	bl	8003988 <HAL_Delay>
	  BarSet(0,0,1,1);
 800354c:	2301      	movs	r3, #1
 800354e:	2201      	movs	r2, #1
 8003550:	2100      	movs	r1, #0
 8003552:	2000      	movs	r0, #0
 8003554:	f7ff fcbc 	bl	8002ed0 <BarSet>
	  HAL_Delay(500);
 8003558:	23fa      	movs	r3, #250	@ 0xfa
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fa13 	bl	8003988 <HAL_Delay>
	  BarSet(0,0,0,1);
 8003562:	2301      	movs	r3, #1
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	2000      	movs	r0, #0
 800356a:	f7ff fcb1 	bl	8002ed0 <BarSet>
	  HAL_Delay(500);
 800356e:	23fa      	movs	r3, #250	@ 0xfa
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fa08 	bl	8003988 <HAL_Delay>
	  BarSet(0,0,0,0);
 8003578:	2300      	movs	r3, #0
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	2000      	movs	r0, #0
 8003580:	f7ff fca6 	bl	8002ed0 <BarSet>
	  UpdateValues();
 8003584:	f7ff fc06 	bl	8002d94 <UpdateValues>
	  int Xinit = acceleration_mg[0];
 8003588:	4b30      	ldr	r3, [pc, #192]	@ (800364c <AccelDetecting+0x134>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c18      	adds	r0, r3, #0
 800358e:	f7fd fd29 	bl	8000fe4 <__aeabi_f2iz>
 8003592:	0003      	movs	r3, r0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
	  int Yinit = acceleration_mg[1];
 8003596:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <AccelDetecting+0x134>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	1c18      	adds	r0, r3, #0
 800359c:	f7fd fd22 	bl	8000fe4 <__aeabi_f2iz>
 80035a0:	0003      	movs	r3, r0
 80035a2:	623b      	str	r3, [r7, #32]
	  int Zinit = acceleration_mg[2];
 80035a4:	4b29      	ldr	r3, [pc, #164]	@ (800364c <AccelDetecting+0x134>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	1c18      	adds	r0, r3, #0
 80035aa:	f7fd fd1b 	bl	8000fe4 <__aeabi_f2iz>
 80035ae:	0003      	movs	r3, r0
 80035b0:	61fb      	str	r3, [r7, #28]
	  int j = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
	  HAL_Delay(200);
 80035b6:	20c8      	movs	r0, #200	@ 0xc8
 80035b8:	f000 f9e6 	bl	8003988 <HAL_Delay>
	  while (j == 1) {
 80035bc:	e03e      	b.n	800363c <AccelDetecting+0x124>
		  UpdateValues();
 80035be:	f7ff fbe9 	bl	8002d94 <UpdateValues>
		  HAL_Delay(50);
 80035c2:	2032      	movs	r0, #50	@ 0x32
 80035c4:	f000 f9e0 	bl	8003988 <HAL_Delay>
		  int Xcurr = acceleration_mg[0];
 80035c8:	4b20      	ldr	r3, [pc, #128]	@ (800364c <AccelDetecting+0x134>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c18      	adds	r0, r3, #0
 80035ce:	f7fd fd09 	bl	8000fe4 <__aeabi_f2iz>
 80035d2:	0003      	movs	r3, r0
 80035d4:	617b      	str	r3, [r7, #20]
		  int Ycurr = acceleration_mg[1];
 80035d6:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <AccelDetecting+0x134>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	1c18      	adds	r0, r3, #0
 80035dc:	f7fd fd02 	bl	8000fe4 <__aeabi_f2iz>
 80035e0:	0003      	movs	r3, r0
 80035e2:	613b      	str	r3, [r7, #16]
		  int Zcurr = acceleration_mg[2];
 80035e4:	4b19      	ldr	r3, [pc, #100]	@ (800364c <AccelDetecting+0x134>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	1c18      	adds	r0, r3, #0
 80035ea:	f7fd fcfb 	bl	8000fe4 <__aeabi_f2iz>
 80035ee:	0003      	movs	r3, r0
 80035f0:	60fb      	str	r3, [r7, #12]
		  int Trig5 = 60 * sensitivity;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	0013      	movs	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	60bb      	str	r3, [r7, #8]
		  if (Xcurr - Xinit > Trig5 || Ycurr - Yinit > Trig5 || Zcurr - Zinit > Trig5) {
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	db0b      	blt.n	8003622 <AccelDetecting+0x10a>
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	db05      	blt.n	8003622 <AccelDetecting+0x10a>
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	da0c      	bge.n	800363c <AccelDetecting+0x124>
			  allState(0);
 8003622:	2000      	movs	r0, #0
 8003624:	f7ff fa3a 	bl	8002a9c <allState>
			  BeepX(0.5,45);
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <AccelDetecting+0x138>)
 800362a:	23fc      	movs	r3, #252	@ 0xfc
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	1c11      	adds	r1, r2, #0
 8003630:	1c18      	adds	r0, r3, #0
 8003632:	f7ff fa75 	bl	8002b20 <BeepX>
			  //HAL_Delay(500);
			  allState(1);
 8003636:	2001      	movs	r0, #1
 8003638:	f7ff fa30 	bl	8002a9c <allState>
	  while (j == 1) {
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d0bd      	beq.n	80035be <AccelDetecting+0xa6>
			  //HAL_Delay(500);
			  //j = 2;
		  }
	  }
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b00a      	add	sp, #40	@ 0x28
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200000d4 	.word	0x200000d4
 8003650:	42340000 	.word	0x42340000

08003654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
  allState(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f7ff fa1e 	bl	8002a9c <allState>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003660:	f000 f92e 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003664:	f000 f85c 	bl	8003720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003668:	f7fe fdee 	bl	8002248 <MX_GPIO_Init>
  MX_I2C1_Init();
 800366c:	f7fe fe80 	bl	8002370 <MX_I2C1_Init>
  MX_ADC_Init();
 8003670:	f7fe fd48 	bl	8002104 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  allState(1);
 8003674:	2001      	movs	r0, #1
 8003676:	f7ff fa11 	bl	8002a9c <allState>
//  //Device is asleep
//
//  HAL_ResumeTick();
//  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);

  stmSTANDBY();
 800367a:	f7ff fd7d 	bl	8003178 <stmSTANDBY>
  //		STANDBY mode for when turned off
  //		Battery Voltage Detection

  while (1)
  {
	  TimOut = 0;
 800367e:	4b27      	ldr	r3, [pc, #156]	@ (800371c <main+0xc8>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
	  while (TimOut < 150) { //if nothing happens, the STM goes back to sleep until its awakened again
 8003684:	e03e      	b.n	8003704 <main+0xb0>
		  // Converts button presses to LED toggles
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,0);
		  HAL_Delay(50);
 8003686:	2032      	movs	r0, #50	@ 0x32
 8003688:	f000 f97e 	bl	8003988 <HAL_Delay>
		  buttonsNlights();
 800368c:	f7ff fa94 	bl	8002bb8 <buttonsNlights>
		  // If a code is entered, will convert from binary to decimal (sensitivity level 1-15)
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0) != 1) {
 8003690:	2390      	movs	r3, #144	@ 0x90
 8003692:	05db      	lsls	r3, r3, #23
 8003694:	2101      	movs	r1, #1
 8003696:	0018      	movs	r0, r3
 8003698:	f001 f8a6 	bl	80047e8 <HAL_GPIO_ReadPin>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d117      	bne.n	80036d0 <main+0x7c>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7ff f980 	bl	80029ac <theCode>
 80036ac:	0003      	movs	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d00e      	beq.n	80036d0 <main+0x7c>
			  int sense = ButtonToDec();
 80036b2:	f7ff f9b9 	bl	8002a28 <ButtonToDec>
 80036b6:	0003      	movs	r3, r0
 80036b8:	607b      	str	r3, [r7, #4]
			  AccelDetecting(sense);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f7ff ff2b 	bl	8003518 <AccelDetecting>
			  allState(1);
 80036c2:	2001      	movs	r0, #1
 80036c4:	f7ff f9ea 	bl	8002a9c <allState>
			  TimOut = 0;
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <main+0xc8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0) != 1) {
 80036ce:	e014      	b.n	80036fa <main+0xa6>
		  // If no code entered, will display the temperature of the board with the 4 LEDs
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0 && theCode(0,0,0,0)){
 80036d0:	2390      	movs	r3, #144	@ 0x90
 80036d2:	05db      	lsls	r3, r3, #23
 80036d4:	2101      	movs	r1, #1
 80036d6:	0018      	movs	r0, r3
 80036d8:	f001 f886 	bl	80047e8 <HAL_GPIO_ReadPin>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d10c      	bne.n	80036fa <main+0xa6>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7ff f960 	bl	80029ac <theCode>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d004      	beq.n	80036fa <main+0xa6>
			  //TempLightBar();
			  BatteryVoltage();
 80036f0:	f7ff fd6e 	bl	80031d0 <BatteryVoltage>
			  TimOut = 0;
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <main+0xc8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
		  }
		  TimOut = TimOut + 1;
 80036fa:	4b08      	ldr	r3, [pc, #32]	@ (800371c <main+0xc8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <main+0xc8>)
 8003702:	601a      	str	r2, [r3, #0]
	  while (TimOut < 150) { //if nothing happens, the STM goes back to sleep until its awakened again
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <main+0xc8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b95      	cmp	r3, #149	@ 0x95
 800370a:	ddbc      	ble.n	8003686 <main+0x32>
	  }
	  OffAnimation();
 800370c:	f7ff fc87 	bl	800301e <OffAnimation>
	  allState(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff f9c3 	bl	8002a9c <allState>
	  stmSTOP();
 8003716:	f7ff fcef 	bl	80030f8 <stmSTOP>
	  TimOut = 0;
 800371a:	e7b0      	b.n	800367e <main+0x2a>
 800371c:	200000c4 	.word	0x200000c4

08003720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b095      	sub	sp, #84	@ 0x54
 8003724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003726:	2420      	movs	r4, #32
 8003728:	193b      	adds	r3, r7, r4
 800372a:	0018      	movs	r0, r3
 800372c:	2330      	movs	r3, #48	@ 0x30
 800372e:	001a      	movs	r2, r3
 8003730:	2100      	movs	r1, #0
 8003732:	f002 fcc3 	bl	80060bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003736:	2310      	movs	r3, #16
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	0018      	movs	r0, r3
 800373c:	2310      	movs	r3, #16
 800373e:	001a      	movs	r2, r3
 8003740:	2100      	movs	r1, #0
 8003742:	f002 fcbb 	bl	80060bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003746:	003b      	movs	r3, r7
 8003748:	0018      	movs	r0, r3
 800374a:	2310      	movs	r3, #16
 800374c:	001a      	movs	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f002 fcb4 	bl	80060bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003754:	0021      	movs	r1, r4
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2212      	movs	r2, #18
 800375a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2201      	movs	r2, #1
 8003760:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2201      	movs	r2, #1
 8003766:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2210      	movs	r2, #16
 800376c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2210      	movs	r2, #16
 8003772:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800377a:	187b      	adds	r3, r7, r1
 800377c:	0018      	movs	r0, r3
 800377e:	f001 ff91 	bl	80056a4 <HAL_RCC_OscConfig>
 8003782:	1e03      	subs	r3, r0, #0
 8003784:	d001      	beq.n	800378a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003786:	f000 f828 	bl	80037da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800378a:	2110      	movs	r1, #16
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2207      	movs	r2, #7
 8003790:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2200      	movs	r2, #0
 8003796:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2100      	movs	r1, #0
 80037a8:	0018      	movs	r0, r3
 80037aa:	f002 fa95 	bl	8005cd8 <HAL_RCC_ClockConfig>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80037b2:	f000 f812 	bl	80037da <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037b6:	003b      	movs	r3, r7
 80037b8:	2220      	movs	r2, #32
 80037ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80037bc:	003b      	movs	r3, r7
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c2:	003b      	movs	r3, r7
 80037c4:	0018      	movs	r0, r3
 80037c6:	f002 fbab 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80037ce:	f000 f804 	bl	80037da <Error_Handler>
  }
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b015      	add	sp, #84	@ 0x54
 80037d8:	bd90      	pop	{r4, r7, pc}

080037da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037de:	b672      	cpsid	i
}
 80037e0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	e7fd      	b.n	80037e2 <Error_Handler+0x8>
	...

080037e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <HAL_MspInit+0x44>)
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <HAL_MspInit+0x44>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_MspInit+0x44>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2201      	movs	r2, #1
 8003800:	4013      	ands	r3, r2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_MspInit+0x44>)
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_MspInit+0x44>)
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0549      	lsls	r1, r1, #21
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <HAL_MspInit+0x44>)
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	055b      	lsls	r3, r3, #21
 800381c:	4013      	ands	r3, r2
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	40021000 	.word	0x40021000

08003830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	e7fd      	b.n	8003834 <NMI_Handler+0x4>

08003838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	e7fd      	b.n	800383c <HardFault_Handler+0x4>

08003840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003858:	f000 f87a 	bl	8003950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800386e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003870:	f7ff fff7 	bl	8003862 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003874:	480c      	ldr	r0, [pc, #48]	@ (80038a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003878:	4a0d      	ldr	r2, [pc, #52]	@ (80038b0 <LoopForever+0xe>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800387c:	e002      	b.n	8003884 <LoopCopyDataInit>

0800387e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800387e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003882:	3304      	adds	r3, #4

08003884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003888:	d3f9      	bcc.n	800387e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800388a:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800388c:	4c0a      	ldr	r4, [pc, #40]	@ (80038b8 <LoopForever+0x16>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003890:	e001      	b.n	8003896 <LoopFillZerobss>

08003892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003894:	3204      	adds	r2, #4

08003896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003898:	d3fb      	bcc.n	8003892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800389a:	f002 fc17 	bl	80060cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800389e:	f7ff fed9 	bl	8003654 <main>

080038a2 <LoopForever>:

LoopForever:
    b LoopForever
 80038a2:	e7fe      	b.n	80038a2 <LoopForever>
  ldr   r0, =_estack
 80038a4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80038b0:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 80038b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80038b8:	200000e8 	.word	0x200000e8

080038bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC1_IRQHandler>
	...

080038c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c4:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <HAL_Init+0x24>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <HAL_Init+0x24>)
 80038ca:	2110      	movs	r1, #16
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f000 f809 	bl	80038e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d6:	f7ff ff87 	bl	80037e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	40022000 	.word	0x40022000

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f0:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_InitTick+0x5c>)
 80038f2:	681c      	ldr	r4, [r3, #0]
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_InitTick+0x60>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	0019      	movs	r1, r3
 80038fa:	23fa      	movs	r3, #250	@ 0xfa
 80038fc:	0098      	lsls	r0, r3, #2
 80038fe:	f7fc fc03 	bl	8000108 <__udivsi3>
 8003902:	0003      	movs	r3, r0
 8003904:	0019      	movs	r1, r3
 8003906:	0020      	movs	r0, r4
 8003908:	f7fc fbfe 	bl	8000108 <__udivsi3>
 800390c:	0003      	movs	r3, r0
 800390e:	0018      	movs	r0, r3
 8003910:	f000 fd1d 	bl	800434e <HAL_SYSTICK_Config>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d001      	beq.n	800391c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e00f      	b.n	800393c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d80b      	bhi.n	800393a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	2301      	movs	r3, #1
 8003926:	425b      	negs	r3, r3
 8003928:	2200      	movs	r2, #0
 800392a:	0018      	movs	r0, r3
 800392c:	f000 fcfa 	bl	8004324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_InitTick+0x64>)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b003      	add	sp, #12
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	20000004 	.word	0x20000004
 8003948:	2000000c 	.word	0x2000000c
 800394c:	20000008 	.word	0x20000008

08003950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <HAL_IncTick+0x1c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	001a      	movs	r2, r3
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_IncTick+0x20>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	18d2      	adds	r2, r2, r3
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <HAL_IncTick+0x20>)
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	2000000c 	.word	0x2000000c
 8003970:	200000e4 	.word	0x200000e4

08003974 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;
 8003978:	4b02      	ldr	r3, [pc, #8]	@ (8003984 <HAL_GetTick+0x10>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	200000e4 	.word	0x200000e4

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff fff0 	bl	8003974 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	001a      	movs	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	189b      	adds	r3, r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	f7ff ffe0 	bl	8003974 <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	2000000c 	.word	0x2000000c

080039d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d8:	230f      	movs	r3, #15
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e125      	b.n	8003c3a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2234      	movs	r2, #52	@ 0x34
 8003a00:	2100      	movs	r1, #0
 8003a02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fe fbd8 	bl	80021bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	2210      	movs	r2, #16
 8003a12:	4013      	ands	r3, r2
 8003a14:	d000      	beq.n	8003a18 <HAL_ADC_Init+0x48>
 8003a16:	e103      	b.n	8003c20 <HAL_ADC_Init+0x250>
 8003a18:	230f      	movs	r3, #15
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d000      	beq.n	8003a24 <HAL_ADC_Init+0x54>
 8003a22:	e0fd      	b.n	8003c20 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003a2e:	d000      	beq.n	8003a32 <HAL_ADC_Init+0x62>
 8003a30:	e0f6      	b.n	8003c20 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	4a83      	ldr	r2, [pc, #524]	@ (8003c44 <HAL_ADC_Init+0x274>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d112      	bne.n	8003a76 <HAL_ADC_Init+0xa6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d009      	beq.n	8003a72 <HAL_ADC_Init+0xa2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	2380      	movs	r3, #128	@ 0x80
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	401a      	ands	r2, r3
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Init+0xa6>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_ADC_Init+0xa8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2218      	movs	r2, #24
 8003a84:	4393      	bics	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	0899      	lsrs	r1, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4964      	ldr	r1, [pc, #400]	@ (8003c48 <HAL_ADC_Init+0x278>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7e1b      	ldrb	r3, [r3, #24]
 8003abe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7e5b      	ldrb	r3, [r3, #25]
 8003ac4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ac6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7e9b      	ldrb	r3, [r3, #26]
 8003acc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003ace:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d002      	beq.n	8003ade <HAL_ADC_Init+0x10e>
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	015b      	lsls	r3, r3, #5
 8003adc:	e000      	b.n	8003ae0 <HAL_ADC_Init+0x110>
 8003ade:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ae0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ae6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_Init+0x124>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e000      	b.n	8003af6 <HAL_ADC_Init+0x126>
 8003af4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003af6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2124      	movs	r1, #36	@ 0x24
 8003afc:	5c5b      	ldrb	r3, [r3, r1]
 8003afe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003b00:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7edb      	ldrb	r3, [r3, #27]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7e9b      	ldrb	r3, [r3, #26]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	0252      	lsls	r2, r2, #9
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	e00b      	b.n	8003b3c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	2220      	movs	r2, #32
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	2201      	movs	r2, #1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	23c2      	movs	r3, #194	@ 0xc2
 8003b42:	33ff      	adds	r3, #255	@ 0xff
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d007      	beq.n	8003b58 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003b50:	4313      	orrs	r3, r2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68d9      	ldr	r1, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	055b      	lsls	r3, r3, #21
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d01b      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d017      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d013      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d00f      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00b      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d007      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d003      	beq.n	8003bac <HAL_ADC_Init+0x1dc>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	2b07      	cmp	r3, #7
 8003baa:	d112      	bne.n	8003bd2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2107      	movs	r1, #7
 8003bb8:	438a      	bics	r2, r1
 8003bba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6959      	ldr	r1, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	401a      	ands	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_ADC_Init+0x27c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10b      	bne.n	8003bfa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	2203      	movs	r2, #3
 8003bee:	4393      	bics	r3, r2
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003bf8:	e01c      	b.n	8003c34 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	2212      	movs	r2, #18
 8003c00:	4393      	bics	r3, r2
 8003c02:	2210      	movs	r2, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003c16:	230f      	movs	r3, #15
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c1e:	e009      	b.n	8003c34 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	2210      	movs	r2, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2201      	movs	r2, #1
 8003c32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c34:	230f      	movs	r3, #15
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	781b      	ldrb	r3, [r3, #0]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	fffffefd 	.word	0xfffffefd
 8003c48:	fffe0219 	.word	0xfffe0219
 8003c4c:	833fffe7 	.word	0x833fffe7

08003c50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2204      	movs	r2, #4
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d138      	bne.n	8003cde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2234      	movs	r2, #52	@ 0x34
 8003c70:	5c9b      	ldrb	r3, [r3, r2]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_ADC_Start+0x2a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e038      	b.n	8003cec <HAL_ADC_Start+0x9c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2234      	movs	r2, #52	@ 0x34
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7e5b      	ldrb	r3, [r3, #25]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c8a:	230f      	movs	r3, #15
 8003c8c:	18fc      	adds	r4, r7, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 f973 	bl	8003f7c <ADC_Enable>
 8003c96:	0003      	movs	r3, r0
 8003c98:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d120      	bne.n	8003ce6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <HAL_ADC_Start+0xa4>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	2280      	movs	r2, #128	@ 0x80
 8003cae:	0052      	lsls	r2, r2, #1
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2234      	movs	r2, #52	@ 0x34
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	221c      	movs	r2, #28
 8003cca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e003      	b.n	8003ce6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cde:	230f      	movs	r3, #15
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b005      	add	sp, #20
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	fffff0fe 	.word	0xfffff0fe

08003cf8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	230f      	movs	r3, #15
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2234      	movs	r2, #52	@ 0x34
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_Stop+0x1e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e029      	b.n	8003d6a <HAL_ADC_Stop+0x72>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2234      	movs	r2, #52	@ 0x34
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d1e:	250f      	movs	r5, #15
 8003d20:	197c      	adds	r4, r7, r5
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 fa1e 	bl	8004166 <ADC_ConversionStop>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d2e:	197b      	adds	r3, r7, r5
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d112      	bne.n	8003d5c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d36:	197c      	adds	r4, r7, r5
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 f9a2 	bl	8004084 <ADC_Disable>
 8003d40:	0003      	movs	r3, r0
 8003d42:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d44:	197b      	adds	r3, r7, r5
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	4a08      	ldr	r2, [pc, #32]	@ (8003d74 <HAL_ADC_Stop+0x7c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	2201      	movs	r2, #1
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2234      	movs	r2, #52	@ 0x34
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003d64:	230f      	movs	r3, #15
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	fffffefe 	.word	0xfffffefe

08003d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	055b      	lsls	r3, r3, #21
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d011      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x46>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d00d      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x46>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x46>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d005      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x46>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d001      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x46>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2234      	movs	r2, #52	@ 0x34
 8003dda:	5c9b      	ldrb	r3, [r3, r2]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x54>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0bb      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x1cc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2234      	movs	r2, #52	@ 0x34
 8003de8:	2101      	movs	r1, #1
 8003dea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2204      	movs	r2, #4
 8003df4:	4013      	ands	r3, r2
 8003df6:	d000      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0x6a>
 8003df8:	e09f      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a59      	ldr	r2, [pc, #356]	@ (8003f64 <HAL_ADC_ConfigChannel+0x1d4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d100      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x76>
 8003e04:	e077      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	055b      	lsls	r3, r3, #21
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d037      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d033      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d02f      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d02b      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d027      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d023      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d01f      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	2b07      	cmp	r3, #7
 8003e5e:	d01b      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2107      	movs	r1, #7
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d012      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2107      	movs	r1, #7
 8003e7e:	438a      	bics	r2, r1
 8003e80:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6959      	ldr	r1, [r3, #20]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	401a      	ands	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d003      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x118>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d152      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8003f68 <HAL_ADC_ConfigChannel+0x1d8>)
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d102      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x12a>
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	e001      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x12e>
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	03db      	lsls	r3, r3, #15
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8003f68 <HAL_ADC_ConfigChannel+0x1d8>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d140      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_ADC_ConfigChannel+0x1dc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4927      	ldr	r1, [pc, #156]	@ (8003f70 <HAL_ADC_ConfigChannel+0x1e0>)
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fc f918 	bl	8000108 <__udivsi3>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	001a      	movs	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ee6:	e002      	b.n	8003eee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f9      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x158>
 8003ef4:	e02b      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	4099      	lsls	r1, r3
 8003f04:	000b      	movs	r3, r1
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d003      	beq.n	8003f20 <HAL_ADC_ConfigChannel+0x190>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b11      	cmp	r3, #17
 8003f1e:	d116      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003f20:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <HAL_ADC_ConfigChannel+0x1d8>)
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x1a0>
 8003f2c:	4a11      	ldr	r2, [pc, #68]	@ (8003f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f2e:	e000      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x1a2>
 8003f30:	4a11      	ldr	r2, [pc, #68]	@ (8003f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <HAL_ADC_ConfigChannel+0x1d8>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e009      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	2220      	movs	r2, #32
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003f46:	230f      	movs	r3, #15
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2234      	movs	r2, #52	@ 0x34
 8003f52:	2100      	movs	r1, #0
 8003f54:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003f56:	230f      	movs	r3, #15
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	781b      	ldrb	r3, [r3, #0]
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	00001001 	.word	0x00001001
 8003f68:	40012708 	.word	0x40012708
 8003f6c:	20000004 	.word	0x20000004
 8003f70:	000f4240 	.word	0x000f4240
 8003f74:	ff7fffff 	.word	0xff7fffff
 8003f78:	ffbfffff 	.word	0xffbfffff

08003f7c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2203      	movs	r2, #3
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d112      	bne.n	8003fc0 <ADC_Enable+0x44>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d009      	beq.n	8003fbc <ADC_Enable+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d101      	bne.n	8003fc0 <ADC_Enable+0x44>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <ADC_Enable+0x46>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d152      	bne.n	800406c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <ADC_Enable+0xfc>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d00d      	beq.n	8003fee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03f      	b.n	800406e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <ADC_Enable+0x100>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	491f      	ldr	r1, [pc, #124]	@ (8004080 <ADC_Enable+0x104>)
 8004004:	0018      	movs	r0, r3
 8004006:	f7fc f87f 	bl	8000108 <__udivsi3>
 800400a:	0003      	movs	r3, r0
 800400c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800400e:	e002      	b.n	8004016 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f9      	bne.n	8004010 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800401c:	f7ff fcaa 	bl	8003974 <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004024:	e01b      	b.n	800405e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004026:	f7ff fca5 	bl	8003974 <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d914      	bls.n	800405e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00d      	beq.n	800405e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	2210      	movs	r2, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	2201      	movs	r2, #1
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e007      	b.n	800406e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2201      	movs	r2, #1
 8004066:	4013      	ands	r3, r2
 8004068:	2b01      	cmp	r3, #1
 800406a:	d1dc      	bne.n	8004026 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	80000017 	.word	0x80000017
 800407c:	20000004 	.word	0x20000004
 8004080:	000f4240 	.word	0x000f4240

08004084 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2203      	movs	r2, #3
 8004098:	4013      	ands	r3, r2
 800409a:	2b01      	cmp	r3, #1
 800409c:	d112      	bne.n	80040c4 <ADC_Disable+0x40>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d009      	beq.n	80040c0 <ADC_Disable+0x3c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	401a      	ands	r2, r3
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	429a      	cmp	r2, r3
 80040be:	d101      	bne.n	80040c4 <ADC_Disable+0x40>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <ADC_Disable+0x42>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d048      	beq.n	800415c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2205      	movs	r2, #5
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d110      	bne.n	80040fa <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2102      	movs	r1, #2
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2203      	movs	r2, #3
 80040ee:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040f0:	f7ff fc40 	bl	8003974 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040f8:	e029      	b.n	800414e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	2210      	movs	r2, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	2201      	movs	r2, #1
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e023      	b.n	800415e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004116:	f7ff fc2d 	bl	8003974 <HAL_GetTick>
 800411a:	0002      	movs	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d914      	bls.n	800414e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2201      	movs	r2, #1
 800412c:	4013      	ands	r3, r2
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10d      	bne.n	800414e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	2210      	movs	r2, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	2201      	movs	r2, #1
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	2b01      	cmp	r3, #1
 800415a:	d0dc      	beq.n	8004116 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}

08004166 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2204      	movs	r2, #4
 800417a:	4013      	ands	r3, r2
 800417c:	d03a      	beq.n	80041f4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2204      	movs	r2, #4
 8004186:	4013      	ands	r3, r2
 8004188:	2b04      	cmp	r3, #4
 800418a:	d10d      	bne.n	80041a8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004196:	d107      	bne.n	80041a8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2110      	movs	r1, #16
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041a8:	f7ff fbe4 	bl	8003974 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80041b0:	e01a      	b.n	80041e8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041b2:	f7ff fbdf 	bl	8003974 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d913      	bls.n	80041e8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2204      	movs	r2, #4
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00d      	beq.n	80041e8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	2210      	movs	r2, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	2201      	movs	r2, #1
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e006      	b.n	80041f6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2204      	movs	r2, #4
 80041f0:	4013      	ands	r3, r2
 80041f2:	d1de      	bne.n	80041b2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	0002      	movs	r2, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b7f      	cmp	r3, #127	@ 0x7f
 8004214:	d828      	bhi.n	8004268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004216:	4a2f      	ldr	r2, [pc, #188]	@ (80042d4 <__NVIC_SetPriority+0xd4>)
 8004218:	1dfb      	adds	r3, r7, #7
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b25b      	sxtb	r3, r3
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	33c0      	adds	r3, #192	@ 0xc0
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	589b      	ldr	r3, [r3, r2]
 8004226:	1dfa      	adds	r2, r7, #7
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	0011      	movs	r1, r2
 800422c:	2203      	movs	r2, #3
 800422e:	400a      	ands	r2, r1
 8004230:	00d2      	lsls	r2, r2, #3
 8004232:	21ff      	movs	r1, #255	@ 0xff
 8004234:	4091      	lsls	r1, r2
 8004236:	000a      	movs	r2, r1
 8004238:	43d2      	mvns	r2, r2
 800423a:	401a      	ands	r2, r3
 800423c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	22ff      	movs	r2, #255	@ 0xff
 8004244:	401a      	ands	r2, r3
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	0018      	movs	r0, r3
 800424c:	2303      	movs	r3, #3
 800424e:	4003      	ands	r3, r0
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004254:	481f      	ldr	r0, [pc, #124]	@ (80042d4 <__NVIC_SetPriority+0xd4>)
 8004256:	1dfb      	adds	r3, r7, #7
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	430a      	orrs	r2, r1
 8004260:	33c0      	adds	r3, #192	@ 0xc0
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004266:	e031      	b.n	80042cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004268:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <__NVIC_SetPriority+0xd8>)
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0019      	movs	r1, r3
 8004270:	230f      	movs	r3, #15
 8004272:	400b      	ands	r3, r1
 8004274:	3b08      	subs	r3, #8
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	3306      	adds	r3, #6
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	3304      	adds	r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	1dfa      	adds	r2, r7, #7
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	0011      	movs	r1, r2
 8004288:	2203      	movs	r2, #3
 800428a:	400a      	ands	r2, r1
 800428c:	00d2      	lsls	r2, r2, #3
 800428e:	21ff      	movs	r1, #255	@ 0xff
 8004290:	4091      	lsls	r1, r2
 8004292:	000a      	movs	r2, r1
 8004294:	43d2      	mvns	r2, r2
 8004296:	401a      	ands	r2, r3
 8004298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	22ff      	movs	r2, #255	@ 0xff
 80042a0:	401a      	ands	r2, r3
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	0018      	movs	r0, r3
 80042a8:	2303      	movs	r3, #3
 80042aa:	4003      	ands	r3, r0
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042b0:	4809      	ldr	r0, [pc, #36]	@ (80042d8 <__NVIC_SetPriority+0xd8>)
 80042b2:	1dfb      	adds	r3, r7, #7
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	001c      	movs	r4, r3
 80042b8:	230f      	movs	r3, #15
 80042ba:	4023      	ands	r3, r4
 80042bc:	3b08      	subs	r3, #8
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	430a      	orrs	r2, r1
 80042c2:	3306      	adds	r3, #6
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	18c3      	adds	r3, r0, r3
 80042c8:	3304      	adds	r3, #4
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b003      	add	sp, #12
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	e000e100 	.word	0xe000e100
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1e5a      	subs	r2, r3, #1
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	045b      	lsls	r3, r3, #17
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d301      	bcc.n	80042f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042f0:	2301      	movs	r3, #1
 80042f2:	e010      	b.n	8004316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <SysTick_Config+0x44>)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	3a01      	subs	r2, #1
 80042fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042fc:	2301      	movs	r3, #1
 80042fe:	425b      	negs	r3, r3
 8004300:	2103      	movs	r1, #3
 8004302:	0018      	movs	r0, r3
 8004304:	f7ff ff7c 	bl	8004200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <SysTick_Config+0x44>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800430e:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <SysTick_Config+0x44>)
 8004310:	2207      	movs	r2, #7
 8004312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b002      	add	sp, #8
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	e000e010 	.word	0xe000e010

08004324 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	210f      	movs	r1, #15
 8004330:	187b      	adds	r3, r7, r1
 8004332:	1c02      	adds	r2, r0, #0
 8004334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	187b      	adds	r3, r7, r1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b25b      	sxtb	r3, r3
 800433e:	0011      	movs	r1, r2
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff ff5d 	bl	8004200 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	46bd      	mov	sp, r7
 800434a:	b004      	add	sp, #16
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff ffbf 	bl	80042dc <SysTick_Config>
 800435e:	0003      	movs	r3, r0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004376:	e14f      	b.n	8004618 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4091      	lsls	r1, r2
 8004382:	000a      	movs	r2, r1
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d100      	bne.n	8004390 <HAL_GPIO_Init+0x28>
 800438e:	e140      	b.n	8004612 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2203      	movs	r2, #3
 8004396:	4013      	ands	r3, r2
 8004398:	2b01      	cmp	r3, #1
 800439a:	d005      	beq.n	80043a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2203      	movs	r2, #3
 80043a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d130      	bne.n	800440a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	409a      	lsls	r2, r3
 80043b6:	0013      	movs	r3, r2
 80043b8:	43da      	mvns	r2, r3
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	0013      	movs	r3, r2
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043de:	2201      	movs	r2, #1
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
 80043e4:	0013      	movs	r3, r2
 80043e6:	43da      	mvns	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4013      	ands	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	2201      	movs	r2, #1
 80043f6:	401a      	ands	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	409a      	lsls	r2, r3
 80043fc:	0013      	movs	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2203      	movs	r2, #3
 8004410:	4013      	ands	r3, r2
 8004412:	2b03      	cmp	r3, #3
 8004414:	d017      	beq.n	8004446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	2203      	movs	r2, #3
 8004422:	409a      	lsls	r2, r3
 8004424:	0013      	movs	r3, r2
 8004426:	43da      	mvns	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	409a      	lsls	r2, r3
 8004438:	0013      	movs	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2203      	movs	r2, #3
 800444c:	4013      	ands	r3, r2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d123      	bne.n	800449a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	0092      	lsls	r2, r2, #2
 800445c:	58d3      	ldr	r3, [r2, r3]
 800445e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2207      	movs	r2, #7
 8004464:	4013      	ands	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	409a      	lsls	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	43da      	mvns	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2107      	movs	r1, #7
 800447e:	400b      	ands	r3, r1
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	409a      	lsls	r2, r3
 8004484:	0013      	movs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	08da      	lsrs	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3208      	adds	r2, #8
 8004494:	0092      	lsls	r2, r2, #2
 8004496:	6939      	ldr	r1, [r7, #16]
 8004498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	43da      	mvns	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2203      	movs	r2, #3
 80044b8:	401a      	ands	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	23c0      	movs	r3, #192	@ 0xc0
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	4013      	ands	r3, r2
 80044d8:	d100      	bne.n	80044dc <HAL_GPIO_Init+0x174>
 80044da:	e09a      	b.n	8004612 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	4b54      	ldr	r3, [pc, #336]	@ (8004630 <HAL_GPIO_Init+0x2c8>)
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <HAL_GPIO_Init+0x2c8>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	430a      	orrs	r2, r1
 80044e6:	619a      	str	r2, [r3, #24]
 80044e8:	4b51      	ldr	r3, [pc, #324]	@ (8004630 <HAL_GPIO_Init+0x2c8>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2201      	movs	r2, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004634 <HAL_GPIO_Init+0x2cc>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	3302      	adds	r3, #2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	589b      	ldr	r3, [r3, r2]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2203      	movs	r2, #3
 8004506:	4013      	ands	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	220f      	movs	r2, #15
 800450c:	409a      	lsls	r2, r3
 800450e:	0013      	movs	r3, r2
 8004510:	43da      	mvns	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	2390      	movs	r3, #144	@ 0x90
 800451c:	05db      	lsls	r3, r3, #23
 800451e:	429a      	cmp	r2, r3
 8004520:	d013      	beq.n	800454a <HAL_GPIO_Init+0x1e2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a44      	ldr	r2, [pc, #272]	@ (8004638 <HAL_GPIO_Init+0x2d0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00d      	beq.n	8004546 <HAL_GPIO_Init+0x1de>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a43      	ldr	r2, [pc, #268]	@ (800463c <HAL_GPIO_Init+0x2d4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <HAL_GPIO_Init+0x1da>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a42      	ldr	r2, [pc, #264]	@ (8004640 <HAL_GPIO_Init+0x2d8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_GPIO_Init+0x1d6>
 800453a:	2303      	movs	r3, #3
 800453c:	e006      	b.n	800454c <HAL_GPIO_Init+0x1e4>
 800453e:	2305      	movs	r3, #5
 8004540:	e004      	b.n	800454c <HAL_GPIO_Init+0x1e4>
 8004542:	2302      	movs	r3, #2
 8004544:	e002      	b.n	800454c <HAL_GPIO_Init+0x1e4>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x1e4>
 800454a:	2300      	movs	r3, #0
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	2103      	movs	r1, #3
 8004550:	400a      	ands	r2, r1
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	4093      	lsls	r3, r2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800455c:	4935      	ldr	r1, [pc, #212]	@ (8004634 <HAL_GPIO_Init+0x2cc>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b36      	ldr	r3, [pc, #216]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	43da      	mvns	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	2380      	movs	r3, #128	@ 0x80
 8004580:	035b      	lsls	r3, r3, #13
 8004582:	4013      	ands	r3, r2
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800458e:	4b2d      	ldr	r3, [pc, #180]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004594:	4b2b      	ldr	r3, [pc, #172]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43da      	mvns	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	039b      	lsls	r3, r3, #14
 80045ac:	4013      	ands	r3, r2
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045b8:	4b22      	ldr	r3, [pc, #136]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80045be:	4b21      	ldr	r3, [pc, #132]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43da      	mvns	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	029b      	lsls	r3, r3, #10
 80045d6:	4013      	ands	r3, r2
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80045e2:	4b18      	ldr	r3, [pc, #96]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80045e8:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	43da      	mvns	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	2380      	movs	r3, #128	@ 0x80
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	4013      	ands	r3, r2
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800460c:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <HAL_GPIO_Init+0x2dc>)
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	3301      	adds	r3, #1
 8004616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	40da      	lsrs	r2, r3
 8004620:	1e13      	subs	r3, r2, #0
 8004622:	d000      	beq.n	8004626 <HAL_GPIO_Init+0x2be>
 8004624:	e6a8      	b.n	8004378 <HAL_GPIO_Init+0x10>
  } 
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	b006      	add	sp, #24
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	40010000 	.word	0x40010000
 8004638:	48000400 	.word	0x48000400
 800463c:	48000800 	.word	0x48000800
 8004640:	48000c00 	.word	0x48000c00
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004656:	e0b1      	b.n	80047bc <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004658:	2201      	movs	r2, #1
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	409a      	lsls	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d100      	bne.n	800466c <HAL_GPIO_DeInit+0x24>
 800466a:	e0a4      	b.n	80047b6 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800466c:	4a59      	ldr	r2, [pc, #356]	@ (80047d4 <HAL_GPIO_DeInit+0x18c>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2203      	movs	r2, #3
 800467e:	4013      	ands	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	2390      	movs	r3, #144	@ 0x90
 8004690:	05db      	lsls	r3, r3, #23
 8004692:	429a      	cmp	r2, r3
 8004694:	d013      	beq.n	80046be <HAL_GPIO_DeInit+0x76>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4f      	ldr	r2, [pc, #316]	@ (80047d8 <HAL_GPIO_DeInit+0x190>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00d      	beq.n	80046ba <HAL_GPIO_DeInit+0x72>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4e      	ldr	r2, [pc, #312]	@ (80047dc <HAL_GPIO_DeInit+0x194>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d007      	beq.n	80046b6 <HAL_GPIO_DeInit+0x6e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4d      	ldr	r2, [pc, #308]	@ (80047e0 <HAL_GPIO_DeInit+0x198>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_GPIO_DeInit+0x6a>
 80046ae:	2303      	movs	r3, #3
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_DeInit+0x78>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_DeInit+0x78>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_DeInit+0x78>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_DeInit+0x78>
 80046be:	2300      	movs	r3, #0
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	2103      	movs	r1, #3
 80046c4:	400a      	ands	r2, r1
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d132      	bne.n	8004736 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046d0:	4b44      	ldr	r3, [pc, #272]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	4b42      	ldr	r3, [pc, #264]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046da:	400a      	ands	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	43d9      	mvns	r1, r3
 80046e6:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80046ec:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	43d9      	mvns	r1, r3
 80046f4:	4b3b      	ldr	r3, [pc, #236]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046f6:	400a      	ands	r2, r1
 80046f8:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80046fa:	4b3a      	ldr	r3, [pc, #232]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43d9      	mvns	r1, r3
 8004702:	4b38      	ldr	r3, [pc, #224]	@ (80047e4 <HAL_GPIO_DeInit+0x19c>)
 8004704:	400a      	ands	r2, r1
 8004706:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2203      	movs	r2, #3
 800470c:	4013      	ands	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	409a      	lsls	r2, r3
 8004714:	0013      	movs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004718:	4a2e      	ldr	r2, [pc, #184]	@ (80047d4 <HAL_GPIO_DeInit+0x18c>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	589a      	ldr	r2, [r3, r2]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43d9      	mvns	r1, r3
 8004728:	482a      	ldr	r0, [pc, #168]	@ (80047d4 <HAL_GPIO_DeInit+0x18c>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	400a      	ands	r2, r1
 8004730:	3302      	adds	r3, #2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	0052      	lsls	r2, r2, #1
 800473e:	2103      	movs	r1, #3
 8004740:	4091      	lsls	r1, r2
 8004742:	000a      	movs	r2, r1
 8004744:	43d2      	mvns	r2, r2
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	08da      	lsrs	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3208      	adds	r2, #8
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	58d3      	ldr	r3, [r2, r3]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	2107      	movs	r1, #7
 800475c:	400a      	ands	r2, r1
 800475e:	0092      	lsls	r2, r2, #2
 8004760:	210f      	movs	r1, #15
 8004762:	4091      	lsls	r1, r2
 8004764:	000a      	movs	r2, r1
 8004766:	43d1      	mvns	r1, r2
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	08d2      	lsrs	r2, r2, #3
 800476c:	4019      	ands	r1, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3208      	adds	r2, #8
 8004772:	0092      	lsls	r2, r2, #2
 8004774:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	0052      	lsls	r2, r2, #1
 800477e:	2103      	movs	r1, #3
 8004780:	4091      	lsls	r1, r2
 8004782:	000a      	movs	r2, r1
 8004784:	43d2      	mvns	r2, r2
 8004786:	401a      	ands	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2101      	movs	r1, #1
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4091      	lsls	r1, r2
 8004796:	000a      	movs	r2, r1
 8004798:	43d2      	mvns	r2, r2
 800479a:	401a      	ands	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	0052      	lsls	r2, r2, #1
 80047a8:	2103      	movs	r1, #3
 80047aa:	4091      	lsls	r1, r2
 80047ac:	000a      	movs	r2, r1
 80047ae:	43d2      	mvns	r2, r2
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]

    }

    position++;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3301      	adds	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	40da      	lsrs	r2, r3
 80047c2:	1e13      	subs	r3, r2, #0
 80047c4:	d000      	beq.n	80047c8 <HAL_GPIO_DeInit+0x180>
 80047c6:	e747      	b.n	8004658 <HAL_GPIO_DeInit+0x10>
  }
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b006      	add	sp, #24
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	40010000 	.word	0x40010000
 80047d8:	48000400 	.word	0x48000400
 80047dc:	48000800 	.word	0x48000800
 80047e0:	48000c00 	.word	0x48000c00
 80047e4:	40010400 	.word	0x40010400

080047e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	000a      	movs	r2, r1
 80047f2:	1cbb      	adds	r3, r7, #2
 80047f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	1cba      	adds	r2, r7, #2
 80047fc:	8812      	ldrh	r2, [r2, #0]
 80047fe:	4013      	ands	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004802:	230f      	movs	r3, #15
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e003      	b.n	8004814 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800480c:	230f      	movs	r3, #15
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
  }
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	0008      	movs	r0, r1
 800482c:	0011      	movs	r1, r2
 800482e:	1cbb      	adds	r3, r7, #2
 8004830:	1c02      	adds	r2, r0, #0
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	1c7b      	adds	r3, r7, #1
 8004836:	1c0a      	adds	r2, r1, #0
 8004838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800483a:	1c7b      	adds	r3, r7, #1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004842:	1cbb      	adds	r3, r7, #2
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800484a:	e003      	b.n	8004854 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800484c:	1cbb      	adds	r3, r7, #2
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004854:	46c0      	nop			@ (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	000a      	movs	r2, r1
 8004866:	1cbb      	adds	r3, r7, #2
 8004868:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004870:	1cbb      	adds	r3, r7, #2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4013      	ands	r3, r2
 8004878:	041a      	lsls	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	43db      	mvns	r3, r3
 800487e:	1cb9      	adds	r1, r7, #2
 8004880:	8809      	ldrh	r1, [r1, #0]
 8004882:	400b      	ands	r3, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b004      	add	sp, #16
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e08f      	b.n	80049c6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2241      	movs	r2, #65	@ 0x41
 80048aa:	5c9b      	ldrb	r3, [r3, r2]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2240      	movs	r2, #64	@ 0x40
 80048b6:	2100      	movs	r1, #0
 80048b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fd fd97 	bl	80023f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2241      	movs	r2, #65	@ 0x41
 80048c6:	2124      	movs	r1, #36	@ 0x24
 80048c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	493b      	ldr	r1, [pc, #236]	@ (80049d0 <HAL_I2C_Init+0x13c>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4938      	ldr	r1, [pc, #224]	@ (80049d4 <HAL_I2C_Init+0x140>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d108      	bne.n	8004912 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2180      	movs	r1, #128	@ 0x80
 800490a:	0209      	lsls	r1, r1, #8
 800490c:	430a      	orrs	r2, r1
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	e007      	b.n	8004922 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2184      	movs	r1, #132	@ 0x84
 800491c:	0209      	lsls	r1, r1, #8
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d109      	bne.n	800493e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2180      	movs	r1, #128	@ 0x80
 8004936:	0109      	lsls	r1, r1, #4
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e007      	b.n	800494e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4923      	ldr	r1, [pc, #140]	@ (80049d8 <HAL_I2C_Init+0x144>)
 800494a:	400a      	ands	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4920      	ldr	r1, [pc, #128]	@ (80049dc <HAL_I2C_Init+0x148>)
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	491a      	ldr	r1, [pc, #104]	@ (80049d4 <HAL_I2C_Init+0x140>)
 800496a:	400a      	ands	r2, r1
 800496c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69d9      	ldr	r1, [r3, #28]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2241      	movs	r2, #65	@ 0x41
 80049b2:	2120      	movs	r1, #32
 80049b4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2242      	movs	r2, #66	@ 0x42
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	f0ffffff 	.word	0xf0ffffff
 80049d4:	ffff7fff 	.word	0xffff7fff
 80049d8:	fffff7ff 	.word	0xfffff7ff
 80049dc:	02008000 	.word	0x02008000

080049e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b089      	sub	sp, #36	@ 0x24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	000c      	movs	r4, r1
 80049ea:	0010      	movs	r0, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	230a      	movs	r3, #10
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	1c22      	adds	r2, r4, #0
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	2308      	movs	r3, #8
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	1c02      	adds	r2, r0, #0
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	1dbb      	adds	r3, r7, #6
 8004a00:	1c0a      	adds	r2, r1, #0
 8004a02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2241      	movs	r2, #65	@ 0x41
 8004a08:	5c9b      	ldrb	r3, [r3, r2]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d000      	beq.n	8004a12 <HAL_I2C_Mem_Write+0x32>
 8004a10:	e10c      	b.n	8004c2c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_I2C_Mem_Write+0x42>
 8004a18:	232c      	movs	r3, #44	@ 0x2c
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2280      	movs	r2, #128	@ 0x80
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0ff      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2240      	movs	r2, #64	@ 0x40
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_I2C_Mem_Write+0x5c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0f8      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2240      	movs	r2, #64	@ 0x40
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a44:	f7fe ff96 	bl	8003974 <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a4c:	2380      	movs	r3, #128	@ 0x80
 8004a4e:	0219      	lsls	r1, r3, #8
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2319      	movs	r3, #25
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f000 fb0b 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	1e03      	subs	r3, r0, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0e3      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2241      	movs	r2, #65	@ 0x41
 8004a6a:	2121      	movs	r1, #33	@ 0x21
 8004a6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2242      	movs	r2, #66	@ 0x42
 8004a72:	2140      	movs	r1, #64	@ 0x40
 8004a74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	222c      	movs	r2, #44	@ 0x2c
 8004a86:	18ba      	adds	r2, r7, r2
 8004a88:	8812      	ldrh	r2, [r2, #0]
 8004a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a92:	1dbb      	adds	r3, r7, #6
 8004a94:	881c      	ldrh	r4, [r3, #0]
 8004a96:	2308      	movs	r3, #8
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	230a      	movs	r3, #10
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	8819      	ldrh	r1, [r3, #0]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	0023      	movs	r3, r4
 8004aae:	f000 f9f9 	bl	8004ea4 <I2C_RequestMemoryWrite>
 8004ab2:	1e03      	subs	r3, r0, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2240      	movs	r2, #64	@ 0x40
 8004aba:	2100      	movs	r1, #0
 8004abc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0b5      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2bff      	cmp	r3, #255	@ 0xff
 8004aca:	d911      	bls.n	8004af0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	22ff      	movs	r2, #255	@ 0xff
 8004ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	2380      	movs	r3, #128	@ 0x80
 8004ada:	045c      	lsls	r4, r3, #17
 8004adc:	230a      	movs	r3, #10
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	8819      	ldrh	r1, [r3, #0]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	0023      	movs	r3, r4
 8004aea:	f000 fc9d 	bl	8005428 <I2C_TransferConfig>
 8004aee:	e012      	b.n	8004b16 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	049c      	lsls	r4, r3, #18
 8004b04:	230a      	movs	r3, #10
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	8819      	ldrh	r1, [r3, #0]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	0023      	movs	r3, r4
 8004b12:	f000 fc89 	bl	8005428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 fb01 	bl	8005124 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e081      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d03a      	beq.n	8004bda <HAL_I2C_Mem_Write+0x1fa>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d136      	bne.n	8004bda <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	0013      	movs	r3, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	2180      	movs	r1, #128	@ 0x80
 8004b7a:	f000 fa7b 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	1e03      	subs	r3, r0, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e053      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2bff      	cmp	r3, #255	@ 0xff
 8004b8e:	d911      	bls.n	8004bb4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	22ff      	movs	r2, #255	@ 0xff
 8004b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	045c      	lsls	r4, r3, #17
 8004ba0:	230a      	movs	r3, #10
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	8819      	ldrh	r1, [r3, #0]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	0023      	movs	r3, r4
 8004bae:	f000 fc3b 	bl	8005428 <I2C_TransferConfig>
 8004bb2:	e012      	b.n	8004bda <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	2380      	movs	r3, #128	@ 0x80
 8004bc6:	049c      	lsls	r4, r3, #18
 8004bc8:	230a      	movs	r3, #10
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	8819      	ldrh	r1, [r3, #0]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	0023      	movs	r3, r4
 8004bd6:	f000 fc27 	bl	8005428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d198      	bne.n	8004b16 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fae0 	bl	80051b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e01a      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	490b      	ldr	r1, [pc, #44]	@ (8004c38 <HAL_I2C_Mem_Write+0x258>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2241      	movs	r2, #65	@ 0x41
 8004c14:	2120      	movs	r1, #32
 8004c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2242      	movs	r2, #66	@ 0x42
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2240      	movs	r2, #64	@ 0x40
 8004c24:	2100      	movs	r1, #0
 8004c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b007      	add	sp, #28
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	fe00e800 	.word	0xfe00e800

08004c3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b089      	sub	sp, #36	@ 0x24
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	000c      	movs	r4, r1
 8004c46:	0010      	movs	r0, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	1c22      	adds	r2, r4, #0
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	2308      	movs	r3, #8
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1c02      	adds	r2, r0, #0
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	1dbb      	adds	r3, r7, #6
 8004c5c:	1c0a      	adds	r2, r1, #0
 8004c5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2241      	movs	r2, #65	@ 0x41
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d000      	beq.n	8004c6e <HAL_I2C_Mem_Read+0x32>
 8004c6c:	e110      	b.n	8004e90 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_I2C_Mem_Read+0x42>
 8004c74:	232c      	movs	r3, #44	@ 0x2c
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2280      	movs	r2, #128	@ 0x80
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e103      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2240      	movs	r2, #64	@ 0x40
 8004c8e:	5c9b      	ldrb	r3, [r3, r2]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_I2C_Mem_Read+0x5c>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e0fc      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2240      	movs	r2, #64	@ 0x40
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fe fe68 	bl	8003974 <HAL_GetTick>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	0219      	lsls	r1, r3, #8
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2319      	movs	r3, #25
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f000 f9dd 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	1e03      	subs	r3, r0, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e0e7      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2241      	movs	r2, #65	@ 0x41
 8004cc6:	2122      	movs	r1, #34	@ 0x22
 8004cc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2242      	movs	r2, #66	@ 0x42
 8004cce:	2140      	movs	r1, #64	@ 0x40
 8004cd0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	222c      	movs	r2, #44	@ 0x2c
 8004ce2:	18ba      	adds	r2, r7, r2
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881c      	ldrh	r4, [r3, #0]
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	881a      	ldrh	r2, [r3, #0]
 8004cf8:	230a      	movs	r3, #10
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	8819      	ldrh	r1, [r3, #0]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	0023      	movs	r3, r4
 8004d0a:	f000 f92f 	bl	8004f6c <I2C_RequestMemoryRead>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2240      	movs	r2, #64	@ 0x40
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0b9      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2bff      	cmp	r3, #255	@ 0xff
 8004d26:	d911      	bls.n	8004d4c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	2380      	movs	r3, #128	@ 0x80
 8004d36:	045c      	lsls	r4, r3, #17
 8004d38:	230a      	movs	r3, #10
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	8819      	ldrh	r1, [r3, #0]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	4b56      	ldr	r3, [pc, #344]	@ (8004e9c <HAL_I2C_Mem_Read+0x260>)
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	0023      	movs	r3, r4
 8004d46:	f000 fb6f 	bl	8005428 <I2C_TransferConfig>
 8004d4a:	e012      	b.n	8004d72 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	049c      	lsls	r4, r3, #18
 8004d60:	230a      	movs	r3, #10
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	8819      	ldrh	r1, [r3, #0]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_I2C_Mem_Read+0x260>)
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	0023      	movs	r3, r4
 8004d6e:	f000 fb5b 	bl	8005428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	0013      	movs	r3, r2
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2104      	movs	r1, #4
 8004d80:	f000 f978 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e082      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d03a      	beq.n	8004e3e <HAL_I2C_Mem_Read+0x202>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d136      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	0013      	movs	r3, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2180      	movs	r1, #128	@ 0x80
 8004dde:	f000 f949 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	1e03      	subs	r3, r0, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e053      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2bff      	cmp	r3, #255	@ 0xff
 8004df2:	d911      	bls.n	8004e18 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	045c      	lsls	r4, r3, #17
 8004e04:	230a      	movs	r3, #10
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	8819      	ldrh	r1, [r3, #0]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	0023      	movs	r3, r4
 8004e12:	f000 fb09 	bl	8005428 <I2C_TransferConfig>
 8004e16:	e012      	b.n	8004e3e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	049c      	lsls	r4, r3, #18
 8004e2c:	230a      	movs	r3, #10
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	8819      	ldrh	r1, [r3, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	0023      	movs	r3, r4
 8004e3a:	f000 faf5 	bl	8005428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d194      	bne.n	8004d72 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f9ae 	bl	80051b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e01a      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2220      	movs	r2, #32
 8004e62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	490c      	ldr	r1, [pc, #48]	@ (8004ea0 <HAL_I2C_Mem_Read+0x264>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2241      	movs	r2, #65	@ 0x41
 8004e78:	2120      	movs	r1, #32
 8004e7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2242      	movs	r2, #66	@ 0x42
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2240      	movs	r2, #64	@ 0x40
 8004e88:	2100      	movs	r1, #0
 8004e8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b007      	add	sp, #28
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	80002400 	.word	0x80002400
 8004ea0:	fe00e800 	.word	0xfe00e800

08004ea4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ea4:	b5b0      	push	{r4, r5, r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	000c      	movs	r4, r1
 8004eae:	0010      	movs	r0, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	250a      	movs	r5, #10
 8004eb4:	197b      	adds	r3, r7, r5
 8004eb6:	1c22      	adds	r2, r4, #0
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	2308      	movs	r3, #8
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	1c02      	adds	r2, r0, #0
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	1dbb      	adds	r3, r7, #6
 8004ec4:	1c0a      	adds	r2, r1, #0
 8004ec6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ec8:	1dbb      	adds	r3, r7, #6
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	045c      	lsls	r4, r3, #17
 8004ed2:	197b      	adds	r3, r7, r5
 8004ed4:	8819      	ldrh	r1, [r3, #0]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	4b23      	ldr	r3, [pc, #140]	@ (8004f68 <I2C_RequestMemoryWrite+0xc4>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	0023      	movs	r3, r4
 8004ede:	f000 faa3 	bl	8005428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 f91b 	bl	8005124 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eee:	1e03      	subs	r3, r0, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e033      	b.n	8004f5e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efe:	2308      	movs	r3, #8
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f0c:	e019      	b.n	8004f42 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f0e:	2308      	movs	r3, #8
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f22:	6a39      	ldr	r1, [r7, #32]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 f8fc 	bl	8005124 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f2c:	1e03      	subs	r3, r0, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e014      	b.n	8004f5e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f34:	2308      	movs	r3, #8
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	@ 0x80
 8004f50:	f000 f890 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8004f54:	1e03      	subs	r3, r0, #0
 8004f56:	d001      	beq.n	8004f5c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b004      	add	sp, #16
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	80002000 	.word	0x80002000

08004f6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f6c:	b5b0      	push	{r4, r5, r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	000c      	movs	r4, r1
 8004f76:	0010      	movs	r0, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	250a      	movs	r5, #10
 8004f7c:	197b      	adds	r3, r7, r5
 8004f7e:	1c22      	adds	r2, r4, #0
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	2308      	movs	r3, #8
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	1c02      	adds	r2, r0, #0
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	1dbb      	adds	r3, r7, #6
 8004f8c:	1c0a      	adds	r2, r1, #0
 8004f8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f90:	1dbb      	adds	r3, r7, #6
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	197b      	adds	r3, r7, r5
 8004f98:	8819      	ldrh	r1, [r3, #0]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	4b23      	ldr	r3, [pc, #140]	@ (800502c <I2C_RequestMemoryRead+0xc0>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f000 fa41 	bl	8005428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 f8b9 	bl	8005124 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e033      	b.n	8005022 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fba:	1dbb      	adds	r3, r7, #6
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fd0:	e019      	b.n	8005006 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	0a1b      	lsrs	r3, r3, #8
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe6:	6a39      	ldr	r1, [r7, #32]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 f89a 	bl	8005124 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	1e03      	subs	r3, r0, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e014      	b.n	8005022 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	0013      	movs	r3, r2
 8005010:	2200      	movs	r2, #0
 8005012:	2140      	movs	r1, #64	@ 0x40
 8005014:	f000 f82e 	bl	8005074 <I2C_WaitOnFlagUntilTimeout>
 8005018:	1e03      	subs	r3, r0, #0
 800501a:	d001      	beq.n	8005020 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bdb0      	pop	{r4, r5, r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	80002000 	.word	0x80002000

08005030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d103      	bne.n	800504e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2201      	movs	r2, #1
 8005056:	4013      	ands	r3, r2
 8005058:	2b01      	cmp	r3, #1
 800505a:	d007      	beq.n	800506c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2101      	movs	r1, #1
 8005068:	430a      	orrs	r2, r1
 800506a:	619a      	str	r2, [r3, #24]
  }
}
 800506c:	46c0      	nop			@ (mov r8, r8)
 800506e:	46bd      	mov	sp, r7
 8005070:	b002      	add	sp, #8
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005084:	e03a      	b.n	80050fc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 f8d3 	bl	8005238 <I2C_IsErrorOccurred>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d001      	beq.n	800509a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e040      	b.n	800511c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	d02d      	beq.n	80050fc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a0:	f7fe fc68 	bl	8003974 <HAL_GetTick>
 80050a4:	0002      	movs	r2, r0
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d302      	bcc.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d122      	bne.n	80050fc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	425a      	negs	r2, r3
 80050c6:	4153      	adcs	r3, r2
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	001a      	movs	r2, r3
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d113      	bne.n	80050fc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	2220      	movs	r2, #32
 80050da:	431a      	orrs	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2241      	movs	r2, #65	@ 0x41
 80050e4:	2120      	movs	r1, #32
 80050e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2242      	movs	r2, #66	@ 0x42
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2240      	movs	r2, #64	@ 0x40
 80050f4:	2100      	movs	r1, #0
 80050f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e00f      	b.n	800511c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4013      	ands	r3, r2
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	425a      	negs	r2, r3
 800510c:	4153      	adcs	r3, r2
 800510e:	b2db      	uxtb	r3, r3
 8005110:	001a      	movs	r2, r3
 8005112:	1dfb      	adds	r3, r7, #7
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d0b5      	beq.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bd80      	pop	{r7, pc}

08005124 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005130:	e032      	b.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 f87d 	bl	8005238 <I2C_IsErrorOccurred>
 800513e:	1e03      	subs	r3, r0, #0
 8005140:	d001      	beq.n	8005146 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e030      	b.n	80051a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3301      	adds	r3, #1
 800514a:	d025      	beq.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fe fc12 	bl	8003974 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11a      	bne.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2202      	movs	r2, #2
 800516a:	4013      	ands	r3, r2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d013      	beq.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005174:	2220      	movs	r2, #32
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2241      	movs	r2, #65	@ 0x41
 8005180:	2120      	movs	r1, #32
 8005182:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2242      	movs	r2, #66	@ 0x42
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2240      	movs	r2, #64	@ 0x40
 8005190:	2100      	movs	r1, #0
 8005192:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2202      	movs	r2, #2
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d1c5      	bne.n	8005132 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	0018      	movs	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b004      	add	sp, #16
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051bc:	e02f      	b.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f837 	bl	8005238 <I2C_IsErrorOccurred>
 80051ca:	1e03      	subs	r3, r0, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e02d      	b.n	800522e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe fbcf 	bl	8003974 <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11a      	bne.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2220      	movs	r2, #32
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d013      	beq.n	800521e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	2220      	movs	r2, #32
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2241      	movs	r2, #65	@ 0x41
 8005206:	2120      	movs	r1, #32
 8005208:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2242      	movs	r2, #66	@ 0x42
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2240      	movs	r2, #64	@ 0x40
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e007      	b.n	800522e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2220      	movs	r2, #32
 8005226:	4013      	ands	r3, r2
 8005228:	2b20      	cmp	r3, #32
 800522a:	d1c8      	bne.n	80051be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b004      	add	sp, #16
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	@ 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005244:	2327      	movs	r3, #39	@ 0x27
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2210      	movs	r2, #16
 8005260:	4013      	ands	r3, r2
 8005262:	d100      	bne.n	8005266 <I2C_IsErrorOccurred+0x2e>
 8005264:	e079      	b.n	800535a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800526e:	e057      	b.n	8005320 <I2C_IsErrorOccurred+0xe8>
 8005270:	2227      	movs	r2, #39	@ 0x27
 8005272:	18bb      	adds	r3, r7, r2
 8005274:	18ba      	adds	r2, r7, r2
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3301      	adds	r3, #1
 800527e:	d04f      	beq.n	8005320 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fe fb78 	bl	8003974 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <I2C_IsErrorOccurred+0x5e>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d144      	bne.n	8005320 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	4013      	ands	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052a4:	2013      	movs	r0, #19
 80052a6:	183b      	adds	r3, r7, r0
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	2142      	movs	r1, #66	@ 0x42
 80052ac:	5c52      	ldrb	r2, [r2, r1]
 80052ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	401a      	ands	r2, r3
 80052bc:	2380      	movs	r3, #128	@ 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d126      	bne.n	8005312 <I2C_IsErrorOccurred+0xda>
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	2380      	movs	r3, #128	@ 0x80
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d021      	beq.n	8005312 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d01d      	beq.n	8005312 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	01c9      	lsls	r1, r1, #7
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052e8:	f7fe fb44 	bl	8003974 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f0:	e00f      	b.n	8005312 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052f2:	f7fe fb3f 	bl	8003974 <HAL_GetTick>
 80052f6:	0002      	movs	r2, r0
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b19      	cmp	r3, #25
 80052fe:	d908      	bls.n	8005312 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2220      	movs	r2, #32
 8005304:	4313      	orrs	r3, r2
 8005306:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005308:	2327      	movs	r3, #39	@ 0x27
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]

              break;
 8005310:	e006      	b.n	8005320 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2220      	movs	r2, #32
 800531a:	4013      	ands	r3, r2
 800531c:	2b20      	cmp	r3, #32
 800531e:	d1e8      	bne.n	80052f2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2220      	movs	r2, #32
 8005328:	4013      	ands	r3, r2
 800532a:	2b20      	cmp	r3, #32
 800532c:	d004      	beq.n	8005338 <I2C_IsErrorOccurred+0x100>
 800532e:	2327      	movs	r3, #39	@ 0x27
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d09b      	beq.n	8005270 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005338:	2327      	movs	r3, #39	@ 0x27
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2220      	movs	r2, #32
 8005348:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2204      	movs	r2, #4
 800534e:	4313      	orrs	r3, r2
 8005350:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005352:	2327      	movs	r3, #39	@ 0x27
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4013      	ands	r3, r2
 800536a:	d00c      	beq.n	8005386 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2201      	movs	r2, #1
 8005370:	4313      	orrs	r3, r2
 8005372:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2280      	movs	r2, #128	@ 0x80
 800537a:	0052      	lsls	r2, r2, #1
 800537c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800537e:	2327      	movs	r3, #39	@ 0x27
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4013      	ands	r3, r2
 800538e:	d00c      	beq.n	80053aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	2208      	movs	r2, #8
 8005394:	4313      	orrs	r3, r2
 8005396:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2280      	movs	r2, #128	@ 0x80
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053a2:	2327      	movs	r3, #39	@ 0x27
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4013      	ands	r3, r2
 80053b2:	d00c      	beq.n	80053ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2202      	movs	r2, #2
 80053b8:	4313      	orrs	r3, r2
 80053ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2280      	movs	r2, #128	@ 0x80
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053c6:	2327      	movs	r3, #39	@ 0x27
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80053ce:	2327      	movs	r3, #39	@ 0x27
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01d      	beq.n	8005414 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	0018      	movs	r0, r3
 80053dc:	f7ff fe28 	bl	8005030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	490e      	ldr	r1, [pc, #56]	@ (8005424 <I2C_IsErrorOccurred+0x1ec>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2241      	movs	r2, #65	@ 0x41
 8005400:	2120      	movs	r1, #32
 8005402:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2242      	movs	r2, #66	@ 0x42
 8005408:	2100      	movs	r1, #0
 800540a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005414:	2327      	movs	r3, #39	@ 0x27
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b00a      	add	sp, #40	@ 0x28
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	fe00e800 	.word	0xfe00e800

08005428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	0008      	movs	r0, r1
 8005432:	0011      	movs	r1, r2
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	240a      	movs	r4, #10
 8005438:	193b      	adds	r3, r7, r4
 800543a:	1c02      	adds	r2, r0, #0
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	2009      	movs	r0, #9
 8005440:	183b      	adds	r3, r7, r0
 8005442:	1c0a      	adds	r2, r1, #0
 8005444:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005446:	193b      	adds	r3, r7, r4
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	059b      	lsls	r3, r3, #22
 800544c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800544e:	183b      	adds	r3, r7, r0
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	0419      	lsls	r1, r3, #16
 8005454:	23ff      	movs	r3, #255	@ 0xff
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800545a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	4313      	orrs	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005472:	0d51      	lsrs	r1, r2, #21
 8005474:	2280      	movs	r2, #128	@ 0x80
 8005476:	00d2      	lsls	r2, r2, #3
 8005478:	400a      	ands	r2, r1
 800547a:	4907      	ldr	r1, [pc, #28]	@ (8005498 <I2C_TransferConfig+0x70>)
 800547c:	430a      	orrs	r2, r1
 800547e:	43d2      	mvns	r2, r2
 8005480:	401a      	ands	r2, r3
 8005482:	0011      	movs	r1, r2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b007      	add	sp, #28
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	03ff63ff 	.word	0x03ff63ff

0800549c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2241      	movs	r2, #65	@ 0x41
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d138      	bne.n	8005524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2240      	movs	r2, #64	@ 0x40
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054bc:	2302      	movs	r3, #2
 80054be:	e032      	b.n	8005526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2240      	movs	r2, #64	@ 0x40
 80054c4:	2101      	movs	r1, #1
 80054c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2241      	movs	r2, #65	@ 0x41
 80054cc:	2124      	movs	r1, #36	@ 0x24
 80054ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	438a      	bics	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4911      	ldr	r1, [pc, #68]	@ (8005530 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80054ec:	400a      	ands	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6819      	ldr	r1, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2101      	movs	r1, #1
 800550c:	430a      	orrs	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2241      	movs	r2, #65	@ 0x41
 8005514:	2120      	movs	r1, #32
 8005516:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2240      	movs	r2, #64	@ 0x40
 800551c:	2100      	movs	r1, #0
 800551e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	0018      	movs	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	b002      	add	sp, #8
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	ffffefff 	.word	0xffffefff

08005534 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2241      	movs	r2, #65	@ 0x41
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d139      	bne.n	80055be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2240      	movs	r2, #64	@ 0x40
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005554:	2302      	movs	r3, #2
 8005556:	e033      	b.n	80055c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2240      	movs	r2, #64	@ 0x40
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2241      	movs	r2, #65	@ 0x41
 8005564:	2124      	movs	r1, #36	@ 0x24
 8005566:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2101      	movs	r1, #1
 8005574:	438a      	bics	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a11      	ldr	r2, [pc, #68]	@ (80055c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2101      	movs	r1, #1
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2241      	movs	r2, #65	@ 0x41
 80055ae:	2120      	movs	r1, #32
 80055b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2240      	movs	r2, #64	@ 0x40
 80055b6:	2100      	movs	r1, #0
 80055b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e000      	b.n	80055c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055be:	2302      	movs	r3, #2
  }
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	fffff0ff 	.word	0xfffff0ff

080055cc <HAL_PWR_EnableWakeUpPin>:
  *         This parameter can be value of :
  *           @ref PWREx_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80055d4:	4b04      	ldr	r3, [pc, #16]	@ (80055e8 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	4b03      	ldr	r3, [pc, #12]	@ (80055e8 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40007000 	.word	0x40007000

080055ec <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be values of :
  *           @ref PWREx_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80055f4:	4b05      	ldr	r3, [pc, #20]	@ (800560c <HAL_PWR_DisableWakeUpPin+0x20>)
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	43d9      	mvns	r1, r3
 80055fc:	4b03      	ldr	r3, [pc, #12]	@ (800560c <HAL_PWR_DisableWakeUpPin+0x20>)
 80055fe:	400a      	ands	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b002      	add	sp, #8
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	40007000 	.word	0x40007000

08005610 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	000a      	movs	r2, r1
 800561a:	1cfb      	adds	r3, r7, #3
 800561c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <HAL_PWR_EnterSTOPMode+0x60>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2203      	movs	r2, #3
 800562c:	4393      	bics	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005638:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <HAL_PWR_EnterSTOPMode+0x60>)
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <HAL_PWR_EnterSTOPMode+0x64>)
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <HAL_PWR_EnterSTOPMode+0x64>)
 8005644:	2104      	movs	r1, #4
 8005646:	430a      	orrs	r2, r1
 8005648:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800564a:	1cfb      	adds	r3, r7, #3
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005652:	bf30      	wfi
 8005654:	e002      	b.n	800565c <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005656:	bf40      	sev
    __WFE();
 8005658:	bf20      	wfe
    __WFE();
 800565a:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_PWR_EnterSTOPMode+0x64>)
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	4b04      	ldr	r3, [pc, #16]	@ (8005674 <HAL_PWR_EnterSTOPMode+0x64>)
 8005662:	2104      	movs	r1, #4
 8005664:	438a      	bics	r2, r1
 8005666:	611a      	str	r2, [r3, #16]
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b004      	add	sp, #16
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40007000 	.word	0x40007000
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <HAL_PWR_EnterSTANDBYMode>:
  *            not used and the core is supplied directly from an external source.
  *            Consequently, the Standby mode is not available on those devices.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= (uint32_t)PWR_CR_PDDS;
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <HAL_PWR_EnterSTANDBYMode+0x24>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8005682:	2102      	movs	r1, #2
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800568e:	2104      	movs	r1, #4
 8005690:	430a      	orrs	r2, r1
 8005692:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005694:	bf30      	wfi
}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40007000 	.word	0x40007000
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e301      	b.n	8005cba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2201      	movs	r2, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	d100      	bne.n	80056c2 <HAL_RCC_OscConfig+0x1e>
 80056c0:	e08d      	b.n	80057de <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80056c2:	4bc3      	ldr	r3, [pc, #780]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	220c      	movs	r2, #12
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d00e      	beq.n	80056ec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056ce:	4bc0      	ldr	r3, [pc, #768]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	220c      	movs	r2, #12
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d116      	bne.n	8005708 <HAL_RCC_OscConfig+0x64>
 80056da:	4bbd      	ldr	r3, [pc, #756]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	025b      	lsls	r3, r3, #9
 80056e2:	401a      	ands	r2, r3
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	025b      	lsls	r3, r3, #9
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d10d      	bne.n	8005708 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	4bb8      	ldr	r3, [pc, #736]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	029b      	lsls	r3, r3, #10
 80056f4:	4013      	ands	r3, r2
 80056f6:	d100      	bne.n	80056fa <HAL_RCC_OscConfig+0x56>
 80056f8:	e070      	b.n	80057dc <HAL_RCC_OscConfig+0x138>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <HAL_RCC_OscConfig+0x60>
 8005702:	e06b      	b.n	80057dc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e2d8      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_RCC_OscConfig+0x7c>
 8005710:	4baf      	ldr	r3, [pc, #700]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4bae      	ldr	r3, [pc, #696]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	0249      	lsls	r1, r1, #9
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e02f      	b.n	8005780 <HAL_RCC_OscConfig+0xdc>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10c      	bne.n	8005742 <HAL_RCC_OscConfig+0x9e>
 8005728:	4ba9      	ldr	r3, [pc, #676]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4ba8      	ldr	r3, [pc, #672]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800572e:	49a9      	ldr	r1, [pc, #676]	@ (80059d4 <HAL_RCC_OscConfig+0x330>)
 8005730:	400a      	ands	r2, r1
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	4ba6      	ldr	r3, [pc, #664]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4ba5      	ldr	r3, [pc, #660]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800573a:	49a7      	ldr	r1, [pc, #668]	@ (80059d8 <HAL_RCC_OscConfig+0x334>)
 800573c:	400a      	ands	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e01e      	b.n	8005780 <HAL_RCC_OscConfig+0xdc>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b05      	cmp	r3, #5
 8005748:	d10e      	bne.n	8005768 <HAL_RCC_OscConfig+0xc4>
 800574a:	4ba1      	ldr	r3, [pc, #644]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4ba0      	ldr	r3, [pc, #640]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	02c9      	lsls	r1, r1, #11
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	4b9d      	ldr	r3, [pc, #628]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b9c      	ldr	r3, [pc, #624]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800575e:	2180      	movs	r1, #128	@ 0x80
 8005760:	0249      	lsls	r1, r1, #9
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0xdc>
 8005768:	4b99      	ldr	r3, [pc, #612]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b98      	ldr	r3, [pc, #608]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800576e:	4999      	ldr	r1, [pc, #612]	@ (80059d4 <HAL_RCC_OscConfig+0x330>)
 8005770:	400a      	ands	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	4b96      	ldr	r3, [pc, #600]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b95      	ldr	r3, [pc, #596]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800577a:	4997      	ldr	r1, [pc, #604]	@ (80059d8 <HAL_RCC_OscConfig+0x334>)
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d014      	beq.n	80057b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fe f8f4 	bl	8003974 <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005792:	f7fe f8ef 	bl	8003974 <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b64      	cmp	r3, #100	@ 0x64
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e28a      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a4:	4b8a      	ldr	r3, [pc, #552]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	2380      	movs	r3, #128	@ 0x80
 80057aa:	029b      	lsls	r3, r3, #10
 80057ac:	4013      	ands	r3, r2
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0xee>
 80057b0:	e015      	b.n	80057de <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fe f8df 	bl	8003974 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fe f8da 	bl	8003974 <HAL_GetTick>
 80057c0:	0002      	movs	r2, r0
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	@ 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e275      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	4b80      	ldr	r3, [pc, #512]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	2380      	movs	r3, #128	@ 0x80
 80057d4:	029b      	lsls	r3, r3, #10
 80057d6:	4013      	ands	r3, r2
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x118>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	d100      	bne.n	80057ea <HAL_RCC_OscConfig+0x146>
 80057e8:	e069      	b.n	80058be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057ea:	4b79      	ldr	r3, [pc, #484]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	220c      	movs	r2, #12
 80057f0:	4013      	ands	r3, r2
 80057f2:	d00b      	beq.n	800580c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057f4:	4b76      	ldr	r3, [pc, #472]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	220c      	movs	r2, #12
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d11c      	bne.n	800583a <HAL_RCC_OscConfig+0x196>
 8005800:	4b73      	ldr	r3, [pc, #460]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	025b      	lsls	r3, r3, #9
 8005808:	4013      	ands	r3, r2
 800580a:	d116      	bne.n	800583a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580c:	4b70      	ldr	r3, [pc, #448]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2202      	movs	r2, #2
 8005812:	4013      	ands	r3, r2
 8005814:	d005      	beq.n	8005822 <HAL_RCC_OscConfig+0x17e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e24b      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005822:	4b6b      	ldr	r3, [pc, #428]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	22f8      	movs	r2, #248	@ 0xf8
 8005828:	4393      	bics	r3, r2
 800582a:	0019      	movs	r1, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00da      	lsls	r2, r3, #3
 8005832:	4b67      	ldr	r3, [pc, #412]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005838:	e041      	b.n	80058be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d024      	beq.n	800588c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005842:	4b63      	ldr	r3, [pc, #396]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b62      	ldr	r3, [pc, #392]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005848:	2101      	movs	r1, #1
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584e:	f7fe f891 	bl	8003974 <HAL_GetTick>
 8005852:	0003      	movs	r3, r0
 8005854:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005858:	f7fe f88c 	bl	8003974 <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e227      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586a:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2202      	movs	r2, #2
 8005870:	4013      	ands	r3, r2
 8005872:	d0f1      	beq.n	8005858 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005874:	4b56      	ldr	r3, [pc, #344]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	22f8      	movs	r2, #248	@ 0xf8
 800587a:	4393      	bics	r3, r2
 800587c:	0019      	movs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00da      	lsls	r2, r3, #3
 8005884:	4b52      	ldr	r3, [pc, #328]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e018      	b.n	80058be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588c:	4b50      	ldr	r3, [pc, #320]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4b4f      	ldr	r3, [pc, #316]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005892:	2101      	movs	r1, #1
 8005894:	438a      	bics	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005898:	f7fe f86c 	bl	8003974 <HAL_GetTick>
 800589c:	0003      	movs	r3, r0
 800589e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fe f867 	bl	8003974 <HAL_GetTick>
 80058a6:	0002      	movs	r2, r0
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e202      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b4:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2202      	movs	r2, #2
 80058ba:	4013      	ands	r3, r2
 80058bc:	d1f1      	bne.n	80058a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2208      	movs	r2, #8
 80058c4:	4013      	ands	r3, r2
 80058c6:	d036      	beq.n	8005936 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d0:	4b3f      	ldr	r3, [pc, #252]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80058d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058d4:	4b3e      	ldr	r3, [pc, #248]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80058d6:	2101      	movs	r1, #1
 80058d8:	430a      	orrs	r2, r1
 80058da:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7fe f84a 	bl	8003974 <HAL_GetTick>
 80058e0:	0003      	movs	r3, r0
 80058e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fe f845 	bl	8003974 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e1e0      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f8:	4b35      	ldr	r3, [pc, #212]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	2202      	movs	r2, #2
 80058fe:	4013      	ands	r3, r2
 8005900:	d0f1      	beq.n	80058e6 <HAL_RCC_OscConfig+0x242>
 8005902:	e018      	b.n	8005936 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005904:	4b32      	ldr	r3, [pc, #200]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005908:	4b31      	ldr	r3, [pc, #196]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005910:	f7fe f830 	bl	8003974 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591a:	f7fe f82b 	bl	8003974 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e1c6      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800592c:	4b28      	ldr	r3, [pc, #160]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800592e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005930:	2202      	movs	r2, #2
 8005932:	4013      	ands	r3, r2
 8005934:	d1f1      	bne.n	800591a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2204      	movs	r2, #4
 800593c:	4013      	ands	r3, r2
 800593e:	d100      	bne.n	8005942 <HAL_RCC_OscConfig+0x29e>
 8005940:	e0b4      	b.n	8005aac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005942:	201f      	movs	r0, #31
 8005944:	183b      	adds	r3, r7, r0
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594a:	4b21      	ldr	r3, [pc, #132]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	2380      	movs	r3, #128	@ 0x80
 8005950:	055b      	lsls	r3, r3, #21
 8005952:	4013      	ands	r3, r2
 8005954:	d110      	bne.n	8005978 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005956:	4b1e      	ldr	r3, [pc, #120]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	4b1d      	ldr	r3, [pc, #116]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 800595c:	2180      	movs	r1, #128	@ 0x80
 800595e:	0549      	lsls	r1, r1, #21
 8005960:	430a      	orrs	r2, r1
 8005962:	61da      	str	r2, [r3, #28]
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	055b      	lsls	r3, r3, #21
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005972:	183b      	adds	r3, r7, r0
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	4b18      	ldr	r3, [pc, #96]	@ (80059dc <HAL_RCC_OscConfig+0x338>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d11a      	bne.n	80059ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005984:	4b15      	ldr	r3, [pc, #84]	@ (80059dc <HAL_RCC_OscConfig+0x338>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <HAL_RCC_OscConfig+0x338>)
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	0049      	lsls	r1, r1, #1
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005992:	f7fd ffef 	bl	8003974 <HAL_GetTick>
 8005996:	0003      	movs	r3, r0
 8005998:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599c:	f7fd ffea 	bl	8003974 <HAL_GetTick>
 80059a0:	0002      	movs	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	@ 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e185      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ae:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <HAL_RCC_OscConfig+0x338>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	2380      	movs	r3, #128	@ 0x80
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10e      	bne.n	80059e0 <HAL_RCC_OscConfig+0x33c>
 80059c2:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	4b02      	ldr	r3, [pc, #8]	@ (80059d0 <HAL_RCC_OscConfig+0x32c>)
 80059c8:	2101      	movs	r1, #1
 80059ca:	430a      	orrs	r2, r1
 80059cc:	621a      	str	r2, [r3, #32]
 80059ce:	e035      	b.n	8005a3c <HAL_RCC_OscConfig+0x398>
 80059d0:	40021000 	.word	0x40021000
 80059d4:	fffeffff 	.word	0xfffeffff
 80059d8:	fffbffff 	.word	0xfffbffff
 80059dc:	40007000 	.word	0x40007000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCC_OscConfig+0x35e>
 80059e8:	4bb6      	ldr	r3, [pc, #728]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 80059ea:	6a1a      	ldr	r2, [r3, #32]
 80059ec:	4bb5      	ldr	r3, [pc, #724]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 80059ee:	2101      	movs	r1, #1
 80059f0:	438a      	bics	r2, r1
 80059f2:	621a      	str	r2, [r3, #32]
 80059f4:	4bb3      	ldr	r3, [pc, #716]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	4bb2      	ldr	r3, [pc, #712]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 80059fa:	2104      	movs	r1, #4
 80059fc:	438a      	bics	r2, r1
 80059fe:	621a      	str	r2, [r3, #32]
 8005a00:	e01c      	b.n	8005a3c <HAL_RCC_OscConfig+0x398>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x380>
 8005a0a:	4bae      	ldr	r3, [pc, #696]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	4bad      	ldr	r3, [pc, #692]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a10:	2104      	movs	r1, #4
 8005a12:	430a      	orrs	r2, r1
 8005a14:	621a      	str	r2, [r3, #32]
 8005a16:	4bab      	ldr	r3, [pc, #684]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a18:	6a1a      	ldr	r2, [r3, #32]
 8005a1a:	4baa      	ldr	r3, [pc, #680]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	621a      	str	r2, [r3, #32]
 8005a22:	e00b      	b.n	8005a3c <HAL_RCC_OscConfig+0x398>
 8005a24:	4ba7      	ldr	r3, [pc, #668]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	4ba6      	ldr	r3, [pc, #664]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	438a      	bics	r2, r1
 8005a2e:	621a      	str	r2, [r3, #32]
 8005a30:	4ba4      	ldr	r3, [pc, #656]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	4ba3      	ldr	r3, [pc, #652]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a36:	2104      	movs	r1, #4
 8005a38:	438a      	bics	r2, r1
 8005a3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d014      	beq.n	8005a6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a44:	f7fd ff96 	bl	8003974 <HAL_GetTick>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4c:	e009      	b.n	8005a62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4e:	f7fd ff91 	bl	8003974 <HAL_GetTick>
 8005a52:	0002      	movs	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	4a9b      	ldr	r2, [pc, #620]	@ (8005cc8 <HAL_RCC_OscConfig+0x624>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e12b      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a62:	4b98      	ldr	r3, [pc, #608]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	2202      	movs	r2, #2
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x3aa>
 8005a6c:	e013      	b.n	8005a96 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd ff81 	bl	8003974 <HAL_GetTick>
 8005a72:	0003      	movs	r3, r0
 8005a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a76:	e009      	b.n	8005a8c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fd ff7c 	bl	8003974 <HAL_GetTick>
 8005a7c:	0002      	movs	r2, r0
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	4a91      	ldr	r2, [pc, #580]	@ (8005cc8 <HAL_RCC_OscConfig+0x624>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e116      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	2202      	movs	r2, #2
 8005a92:	4013      	ands	r3, r2
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a96:	231f      	movs	r3, #31
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d105      	bne.n	8005aac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa0:	4b88      	ldr	r3, [pc, #544]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	4b87      	ldr	r3, [pc, #540]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005aa6:	4989      	ldr	r1, [pc, #548]	@ (8005ccc <HAL_RCC_OscConfig+0x628>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d12a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005abe:	4b81      	ldr	r3, [pc, #516]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac2:	4b80      	ldr	r3, [pc, #512]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005aca:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ace:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad6:	f7fd ff4d 	bl	8003974 <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ae0:	f7fd ff48 	bl	8003974 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0e3      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005af2:	4b74      	ldr	r3, [pc, #464]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af6:	2202      	movs	r2, #2
 8005af8:	4013      	ands	r3, r2
 8005afa:	d0f1      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005afc:	4b71      	ldr	r3, [pc, #452]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b00:	22f8      	movs	r2, #248	@ 0xf8
 8005b02:	4393      	bics	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	00da      	lsls	r2, r3, #3
 8005b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b12:	e034      	b.n	8005b7e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	3305      	adds	r3, #5
 8005b1a:	d111      	bne.n	8005b40 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005b1c:	4b69      	ldr	r3, [pc, #420]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b20:	4b68      	ldr	r3, [pc, #416]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b22:	2104      	movs	r1, #4
 8005b24:	438a      	bics	r2, r1
 8005b26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b28:	4b66      	ldr	r3, [pc, #408]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2c:	22f8      	movs	r2, #248	@ 0xf8
 8005b2e:	4393      	bics	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	00da      	lsls	r2, r3, #3
 8005b38:	4b62      	ldr	r3, [pc, #392]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b3e:	e01e      	b.n	8005b7e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b40:	4b60      	ldr	r3, [pc, #384]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b44:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b46:	2104      	movs	r1, #4
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b50:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b52:	2101      	movs	r1, #1
 8005b54:	438a      	bics	r2, r1
 8005b56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b58:	f7fd ff0c 	bl	8003974 <HAL_GetTick>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b62:	f7fd ff07 	bl	8003974 <HAL_GetTick>
 8005b66:	0002      	movs	r2, r0
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e0a2      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005b74:	4b53      	ldr	r3, [pc, #332]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b78:	2202      	movs	r2, #2
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d1f1      	bne.n	8005b62 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d100      	bne.n	8005b88 <HAL_RCC_OscConfig+0x4e4>
 8005b86:	e097      	b.n	8005cb8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b88:	4b4e      	ldr	r3, [pc, #312]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	220c      	movs	r2, #12
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d100      	bne.n	8005b96 <HAL_RCC_OscConfig+0x4f2>
 8005b94:	e06b      	b.n	8005c6e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d14c      	bne.n	8005c38 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b49      	ldr	r3, [pc, #292]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b48      	ldr	r3, [pc, #288]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005ba4:	494a      	ldr	r1, [pc, #296]	@ (8005cd0 <HAL_RCC_OscConfig+0x62c>)
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fd fee3 	bl	8003974 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fd fede 	bl	8003974 <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e079      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	2380      	movs	r3, #128	@ 0x80
 8005bcc:	049b      	lsls	r3, r3, #18
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	220f      	movs	r2, #15
 8005bd8:	4393      	bics	r3, r2
 8005bda:	0019      	movs	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be0:	4b38      	ldr	r3, [pc, #224]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005be2:	430a      	orrs	r2, r1
 8005be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005be6:	4b37      	ldr	r3, [pc, #220]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	@ (8005cd4 <HAL_RCC_OscConfig+0x630>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	4b32      	ldr	r3, [pc, #200]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c00:	4b30      	ldr	r3, [pc, #192]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c06:	2180      	movs	r1, #128	@ 0x80
 8005c08:	0449      	lsls	r1, r1, #17
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0e:	f7fd feb1 	bl	8003974 <HAL_GetTick>
 8005c12:	0003      	movs	r3, r0
 8005c14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fd feac 	bl	8003974 <HAL_GetTick>
 8005c1c:	0002      	movs	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e047      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c2a:	4b26      	ldr	r3, [pc, #152]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	049b      	lsls	r3, r3, #18
 8005c32:	4013      	ands	r3, r2
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x574>
 8005c36:	e03f      	b.n	8005cb8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b22      	ldr	r3, [pc, #136]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b21      	ldr	r3, [pc, #132]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c3e:	4924      	ldr	r1, [pc, #144]	@ (8005cd0 <HAL_RCC_OscConfig+0x62c>)
 8005c40:	400a      	ands	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd fe96 	bl	8003974 <HAL_GetTick>
 8005c48:	0003      	movs	r3, r0
 8005c4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fd fe91 	bl	8003974 <HAL_GetTick>
 8005c52:	0002      	movs	r2, r0
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e02c      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c60:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	049b      	lsls	r3, r3, #18
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d1f0      	bne.n	8005c4e <HAL_RCC_OscConfig+0x5aa>
 8005c6c:	e024      	b.n	8005cb8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e01f      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005c7a:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005c80:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <HAL_RCC_OscConfig+0x620>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	2380      	movs	r3, #128	@ 0x80
 8005c8a:	025b      	lsls	r3, r3, #9
 8005c8c:	401a      	ands	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d10e      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	220f      	movs	r2, #15
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	23f0      	movs	r3, #240	@ 0xf0
 8005ca8:	039b      	lsls	r3, r3, #14
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b008      	add	sp, #32
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	00001388 	.word	0x00001388
 8005ccc:	efffffff 	.word	0xefffffff
 8005cd0:	feffffff 	.word	0xfeffffff
 8005cd4:	ffc2ffff 	.word	0xffc2ffff

08005cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0b3      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b5b      	ldr	r3, [pc, #364]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d911      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b58      	ldr	r3, [pc, #352]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4393      	bics	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	4b55      	ldr	r3, [pc, #340]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0c:	4b53      	ldr	r3, [pc, #332]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d001      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e09a      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2202      	movs	r2, #2
 8005d24:	4013      	ands	r3, r2
 8005d26:	d015      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d006      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d32:	4b4b      	ldr	r3, [pc, #300]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d38:	21e0      	movs	r1, #224	@ 0xe0
 8005d3a:	00c9      	lsls	r1, r1, #3
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	22f0      	movs	r2, #240	@ 0xf0
 8005d46:	4393      	bics	r3, r2
 8005d48:	0019      	movs	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	d040      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b3e      	ldr	r3, [pc, #248]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	2380      	movs	r3, #128	@ 0x80
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d114      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e06e      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7e:	4b38      	ldr	r3, [pc, #224]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	049b      	lsls	r3, r3, #18
 8005d86:	4013      	ands	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e062      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	4b34      	ldr	r3, [pc, #208]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2202      	movs	r2, #2
 8005d94:	4013      	ands	r3, r2
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e05b      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9c:	4b30      	ldr	r3, [pc, #192]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2203      	movs	r2, #3
 8005da2:	4393      	bics	r3, r2
 8005da4:	0019      	movs	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	4b2d      	ldr	r3, [pc, #180]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db0:	f7fd fde0 	bl	8003974 <HAL_GetTick>
 8005db4:	0003      	movs	r3, r0
 8005db6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db8:	e009      	b.n	8005dce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dba:	f7fd fddb 	bl	8003974 <HAL_GetTick>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	4a27      	ldr	r2, [pc, #156]	@ (8005e64 <HAL_RCC_ClockConfig+0x18c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e042      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	4b24      	ldr	r3, [pc, #144]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	220c      	movs	r2, #12
 8005dd4:	401a      	ands	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1ec      	bne.n	8005dba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005de0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	4013      	ands	r3, r2
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d211      	bcs.n	8005e12 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4393      	bics	r3, r2
 8005df6:	0019      	movs	r1, r3
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e00:	4b16      	ldr	r3, [pc, #88]	@ (8005e5c <HAL_RCC_ClockConfig+0x184>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	4013      	ands	r3, r2
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e020      	b.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2204      	movs	r2, #4
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e1c:	4b10      	ldr	r3, [pc, #64]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <HAL_RCC_ClockConfig+0x190>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	0019      	movs	r1, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e30:	f000 f820 	bl	8005e74 <HAL_RCC_GetSysClockFreq>
 8005e34:	0001      	movs	r1, r0
 8005e36:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x188>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	220f      	movs	r2, #15
 8005e3e:	4013      	ands	r3, r2
 8005e40:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <HAL_RCC_ClockConfig+0x194>)
 8005e42:	5cd3      	ldrb	r3, [r2, r3]
 8005e44:	000a      	movs	r2, r1
 8005e46:	40da      	lsrs	r2, r3
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <HAL_RCC_ClockConfig+0x198>)
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	f7fd fd4b 	bl	80038e8 <HAL_InitTick>
  
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40022000 	.word	0x40022000
 8005e60:	40021000 	.word	0x40021000
 8005e64:	00001388 	.word	0x00001388
 8005e68:	fffff8ff 	.word	0xfffff8ff
 8005e6c:	080061e8 	.word	0x080061e8
 8005e70:	20000004 	.word	0x20000004

08005e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005e8e:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	220c      	movs	r2, #12
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d002      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x30>
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d003      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x36>
 8005ea2:	e02c      	b.n	8005efe <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ea6:	613b      	str	r3, [r7, #16]
      break;
 8005ea8:	e02c      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	0c9b      	lsrs	r3, r3, #18
 8005eae:	220f      	movs	r2, #15
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005eb4:	5cd3      	ldrb	r3, [r2, r3]
 8005eb6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	025b      	lsls	r3, r3, #9
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4810      	ldr	r0, [pc, #64]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ed4:	f7fa f918 	bl	8000108 <__udivsi3>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	001a      	movs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4353      	muls	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e009      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	000a      	movs	r2, r1
 8005ee8:	0152      	lsls	r2, r2, #5
 8005eea:	1a52      	subs	r2, r2, r1
 8005eec:	0193      	lsls	r3, r2, #6
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	185b      	adds	r3, r3, r1
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	613b      	str	r3, [r7, #16]
      break;
 8005efc:	e002      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005efe:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f00:	613b      	str	r3, [r7, #16]
      break;
 8005f02:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005f04:	693b      	ldr	r3, [r7, #16]
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b006      	add	sp, #24
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	40021000 	.word	0x40021000
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	080061f8 	.word	0x080061f8
 8005f1c:	08006208 	.word	0x08006208

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	2380      	movs	r3, #128	@ 0x80
 8005f36:	025b      	lsls	r3, r3, #9
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d100      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005f3c:	e08e      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005f3e:	2017      	movs	r0, #23
 8005f40:	183b      	adds	r3, r7, r0
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f46:	4b57      	ldr	r3, [pc, #348]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	055b      	lsls	r3, r3, #21
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d110      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f52:	4b54      	ldr	r3, [pc, #336]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	4b53      	ldr	r3, [pc, #332]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f58:	2180      	movs	r1, #128	@ 0x80
 8005f5a:	0549      	lsls	r1, r1, #21
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	61da      	str	r2, [r3, #28]
 8005f60:	4b50      	ldr	r3, [pc, #320]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	2380      	movs	r3, #128	@ 0x80
 8005f66:	055b      	lsls	r3, r3, #21
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6e:	183b      	adds	r3, r7, r0
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f74:	4b4c      	ldr	r3, [pc, #304]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	2380      	movs	r3, #128	@ 0x80
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d11a      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f80:	4b49      	ldr	r3, [pc, #292]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b48      	ldr	r3, [pc, #288]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005f86:	2180      	movs	r1, #128	@ 0x80
 8005f88:	0049      	lsls	r1, r1, #1
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f8e:	f7fd fcf1 	bl	8003974 <HAL_GetTick>
 8005f92:	0003      	movs	r3, r0
 8005f94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	e008      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f98:	f7fd fcec 	bl	8003974 <HAL_GetTick>
 8005f9c:	0002      	movs	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	@ 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e077      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005faa:	4b3f      	ldr	r3, [pc, #252]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	@ 0x80
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	23c0      	movs	r3, #192	@ 0xc0
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d034      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	23c0      	movs	r3, #192	@ 0xc0
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d02c      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fd8:	4b32      	ldr	r3, [pc, #200]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4a33      	ldr	r2, [pc, #204]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fe2:	4b30      	ldr	r3, [pc, #192]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	0249      	lsls	r1, r1, #9
 8005fec:	430a      	orrs	r2, r1
 8005fee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ff6:	492e      	ldr	r1, [pc, #184]	@ (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005ff8:	400a      	ands	r2, r1
 8005ffa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ffc:	4b29      	ldr	r3, [pc, #164]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	4013      	ands	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600a:	f7fd fcb3 	bl	8003974 <HAL_GetTick>
 800600e:	0003      	movs	r3, r0
 8006010:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006012:	e009      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fd fcae 	bl	8003974 <HAL_GetTick>
 8006018:	0002      	movs	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	4a25      	ldr	r2, [pc, #148]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e038      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006028:	4b1e      	ldr	r3, [pc, #120]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	2202      	movs	r2, #2
 800602e:	4013      	ands	r3, r2
 8006030:	d0f0      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006032:	4b1c      	ldr	r3, [pc, #112]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	4a1d      	ldr	r2, [pc, #116]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006038:	4013      	ands	r3, r2
 800603a:	0019      	movs	r1, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	4b18      	ldr	r3, [pc, #96]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006042:	430a      	orrs	r2, r1
 8006044:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006046:	2317      	movs	r3, #23
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d105      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006050:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006056:	4918      	ldr	r1, [pc, #96]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006058:	400a      	ands	r2, r1
 800605a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	4013      	ands	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006066:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	2203      	movs	r2, #3
 800606c:	4393      	bics	r3, r2
 800606e:	0019      	movs	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006076:	430a      	orrs	r2, r1
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2220      	movs	r2, #32
 8006080:	4013      	ands	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006084:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	2210      	movs	r2, #16
 800608a:	4393      	bics	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006094:	430a      	orrs	r2, r1
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	0018      	movs	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	b006      	add	sp, #24
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40007000 	.word	0x40007000
 80060ac:	fffffcff 	.word	0xfffffcff
 80060b0:	fffeffff 	.word	0xfffeffff
 80060b4:	00001388 	.word	0x00001388
 80060b8:	efffffff 	.word	0xefffffff

080060bc <memset>:
 80060bc:	0003      	movs	r3, r0
 80060be:	1882      	adds	r2, r0, r2
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d100      	bne.n	80060c6 <memset+0xa>
 80060c4:	4770      	bx	lr
 80060c6:	7019      	strb	r1, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	e7f9      	b.n	80060c0 <memset+0x4>

080060cc <__libc_init_array>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	2600      	movs	r6, #0
 80060d0:	4c0c      	ldr	r4, [pc, #48]	@ (8006104 <__libc_init_array+0x38>)
 80060d2:	4d0d      	ldr	r5, [pc, #52]	@ (8006108 <__libc_init_array+0x3c>)
 80060d4:	1b64      	subs	r4, r4, r5
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	42a6      	cmp	r6, r4
 80060da:	d109      	bne.n	80060f0 <__libc_init_array+0x24>
 80060dc:	2600      	movs	r6, #0
 80060de:	f000 f819 	bl	8006114 <_init>
 80060e2:	4c0a      	ldr	r4, [pc, #40]	@ (800610c <__libc_init_array+0x40>)
 80060e4:	4d0a      	ldr	r5, [pc, #40]	@ (8006110 <__libc_init_array+0x44>)
 80060e6:	1b64      	subs	r4, r4, r5
 80060e8:	10a4      	asrs	r4, r4, #2
 80060ea:	42a6      	cmp	r6, r4
 80060ec:	d105      	bne.n	80060fa <__libc_init_array+0x2e>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	00b3      	lsls	r3, r6, #2
 80060f2:	58eb      	ldr	r3, [r5, r3]
 80060f4:	4798      	blx	r3
 80060f6:	3601      	adds	r6, #1
 80060f8:	e7ee      	b.n	80060d8 <__libc_init_array+0xc>
 80060fa:	00b3      	lsls	r3, r6, #2
 80060fc:	58eb      	ldr	r3, [r5, r3]
 80060fe:	4798      	blx	r3
 8006100:	3601      	adds	r6, #1
 8006102:	e7f2      	b.n	80060ea <__libc_init_array+0x1e>
 8006104:	08006218 	.word	0x08006218
 8006108:	08006218 	.word	0x08006218
 800610c:	0800621c 	.word	0x0800621c
 8006110:	08006218 	.word	0x08006218

08006114 <_init>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr

08006120 <_fini>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr
